[
  {
    "id": 0,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0]*n\n    \n    curr = 0\n    \n    for i,v in queries:\n        pv = arr[i]\n        \n        if i+1 <n and arr[i+1]==v:\n            curr += 1\n        if i-1>=0 and arr[i-1] == v:\n            curr += 1\n        if i+1 <n and arr[i+1]==pv and pv:\n            curr -= 1\n        if i-1>=0 and arr[i-1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        \n        res += [curr]\n    return res\nprint ( colorTheArray ( 8 , [ [ 3 , 1 ] , [ 4 , 1 ] , [ 2 , 1 ] , [ 5 , 1 ] , [ 3 , 2 ] , [ 3 , 1 ] , [ 1 , 1 ] , [ 6 , 1 ] , [ 7 , 2 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      3,
      1,
      3,
      4,
      5,
      5
    ]
  },
  {
    "id": 1,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0]*n\n    \n    curr = 0\n    \n    for i,v in queries:\n        pv = arr[i]\n        \n        if i+1 <n and arr[i+1]==v:\n            curr += 1\n        if i-1>=0 and arr[i-1] == v:\n            curr += 1\n        if i+1 <n and arr[i+1]==pv and pv:\n            curr -= 1\n        if i-1>=0 and arr[i-1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        \n        res += [curr]\n    return res\nprint ( colorTheArray ( 10 , [ [ 0 , 9 ] , [ 1 , 9 ] , [ 2 , 8 ] , [ 2 , 9 ] , [ 3 , 9 ] , [ 4 , 9 ] , [ 3 , 7 ] , [ 3 , 9 ] , [ 5 , 9 ] , [ 6 , 9 ] , [ 9 , 9 ] , [ 8 , 9 ] , [ 7 , 9 ] ] ) )",
    "execution_output": [
      0,
      1,
      1,
      2,
      3,
      4,
      2,
      4,
      5,
      6,
      6,
      7,
      9
    ]
  },
  {
    "id": 2,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0]*n\n    \n    curr = 0\n    \n    for i,v in queries:\n        pv = arr[i]\n        \n        if i+1 <n and arr[i+1]==v:\n            curr += 1\n        if i-1>=0 and arr[i-1] == v:\n            curr += 1\n        if i+1 <n and arr[i+1]==pv and pv:\n            curr -= 1\n        if i-1>=0 and arr[i-1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        \n        res += [curr]\n    return res\nprint ( colorTheArray ( 12 , [ [ 5 , 234772 ] , [ 6 , 234772 ] , [ 7 , 234772 ] , [ 6 , 1 ] , [ 6 , 234772 ] , [ 4 , 234772 ] , [ 8 , 234772 ] , [ 6 , 234772 ] , [ 6 , 234772 ] , [ 5 , 2 ] , [ 5 , 234772 ] , [ 3 , 234772 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      0,
      2,
      3,
      4,
      4,
      4,
      2,
      4,
      5
    ]
  },
  {
    "id": 3,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0]*n\n    \n    curr = 0\n    \n    for i,v in queries:\n        pv = arr[i]\n        \n        if i+1 <n and arr[i+1]==v:\n            curr += 1\n        if i-1>=0 and arr[i-1] == v:\n            curr += 1\n        if i+1 <n and arr[i+1]==pv and pv:\n            curr -= 1\n        if i-1>=0 and arr[i-1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        \n        res += [curr]\n    return res\nprint ( colorTheArray ( 7 , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 3 , 2 ] , [ 4 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ 4 , 2 ] , [ 5 , 2 ] , [ 6 , 2 ] ] ) )",
    "execution_output": [
      0,
      1,
      1,
      2,
      3,
      1,
      3,
      3,
      1,
      2,
      2,
      3,
      4
    ]
  },
  {
    "id": 4,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0]*n\n    \n    curr = 0\n    \n    for i,v in queries:\n        pv = arr[i]\n        \n        if i+1 <n and arr[i+1]==v:\n            curr += 1\n        if i-1>=0 and arr[i-1] == v:\n            curr += 1\n        if i+1 <n and arr[i+1]==pv and pv:\n            curr -= 1\n        if i-1>=0 and arr[i-1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        \n        res += [curr]\n    return res\nprint ( colorTheArray ( 9 , [ [ 4 , 5 ] , [ 5 , 5 ] , [ 3 , 5 ] , [ 4 , 7 ] , [ 4 , 5 ] , [ 2 , 5 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ 6 , 5 ] , [ 7 , 5 ] , [ 8 , 5 ] , [ 7 , 7 ] , [ 7 , 5 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      0,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      6,
      8
    ]
  },
  {
    "id": 5,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret -= 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret += 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret += 1\n        ans.append(ret)\n    return ans\nprint ( colorTheArray ( 7 , [ [ 3 , 1 ] , [ 2 , 1 ] , [ 4 , 1 ] , [ 3 , 2 ] , [ 5 , 1 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ 6 , 1 ] , [ 3 , 1 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      0,
      1,
      2,
      3,
      4,
      6
    ]
  },
  {
    "id": 6,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret -= 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret += 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret += 1\n        ans.append(ret)\n    return ans\nprint ( colorTheArray ( 5 , [ [ 2 , 1 ] , [ 1 , 1 ] , [ 3 , 1 ] , [ 2 , 2 ] , [ 2 , 1 ] , [ 2 , 1 ] , [ 3 , 2 ] , [ 1 , 2 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      0,
      2,
      2,
      1,
      0
    ]
  },
  {
    "id": 7,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret -= 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret += 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret += 1\n        ans.append(ret)\n    return ans\nprint ( colorTheArray ( 10 , [ [ 2 , 5 ] , [ 3 , 5 ] , [ 4 , 5 ] , [ 5 , 5 ] , [ 6 , 5 ] , [ 7 , 5 ] , [ 4 , 3 ] , [ 5 , 3 ] , [ 4 , 5 ] , [ 5 , 5 ] , [ 3 , 7 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      3,
      3,
      3,
      5,
      3
    ]
  },
  {
    "id": 8,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret -= 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret += 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret += 1\n        ans.append(ret)\n    return ans\nprint ( colorTheArray ( 8 , [ [ 0 , 1 ] , [ 2 , 1 ] , [ 4 , 1 ] , [ 6 , 1 ] , [ 1 , 2 ] , [ 3 , 2 ] , [ 5 , 2 ] , [ 7 , 2 ] , [ 1 , 1 ] , [ 3 , 1 ] , [ 5 , 1 ] , [ 7 , 1 ] ] ) )",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      4,
      6,
      7
    ]
  },
  {
    "id": 9,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret -= 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x-1] == a[x] and a[x] != 0:\n            ret += 1\n        if x < n-1 and a[x+1] == a[x] and a[x] != 0:\n            ret += 1\n        ans.append(ret)\n    return ans\nprint ( colorTheArray ( 6 , [ [ 0 , 10 ] , [ 5 , 10 ] , [ 1 , 10 ] , [ 4 , 10 ] , [ 2 , - 3 ] , [ 2 , 10 ] , [ 3 , 10 ] , [ 0 , 10 ] ] ) )",
    "execution_output": [
      0,
      0,
      1,
      2,
      2,
      3,
      5,
      5
    ]
  },
  {
    "id": 10,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint ( colorTheArray ( 10 , [ [ 3 , 1 ] , [ 4 , 1 ] , [ 5 , 1 ] , [ 6 , 1 ] , [ 2 , 1 ] , [ 7 , 1 ] , [ 4 , 2 ] , [ 4 , 1 ] , [ 1 , 1 ] , [ 8 , 1 ] , [ 9 , 1 ] , [ 5 , 3 ] , [ 5 , 1 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      3,
      5,
      6,
      7,
      8,
      6,
      8
    ]
  },
  {
    "id": 11,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint ( colorTheArray ( 8 , [ [ 0 , 1 ] , [ 1 , 2 ] , [ 2 , 1 ] , [ 3 , 2 ] , [ 4 , 1 ] , [ 5 , 2 ] , [ 6 , 1 ] , [ 7 , 2 ] , [ 1 , 1 ] , [ 3 , 1 ] , [ 5 , 1 ] , [ 7 , 1 ] , [ 3 , 2 ] ] ) )",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      4,
      6,
      7,
      5
    ]
  },
  {
    "id": 12,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint ( colorTheArray ( 12 , [ [ 0 , 5 ] , [ 0 , 5 ] , [ 1 , 5 ] , [ 2 , 5 ] , [ 2 , 3 ] , [ 2 , 5 ] , [ 1 , 3 ] , [ 1 , 5 ] , [ 11 , 5 ] , [ 10 , 5 ] , [ 9 , 5 ] , [ 9 , 5 ] , [ 10 , 3 ] , [ 10 , 5 ] ] ) )",
    "execution_output": [
      0,
      0,
      1,
      2,
      1,
      2,
      0,
      2,
      2,
      3,
      4,
      4,
      2,
      4
    ]
  },
  {
    "id": 13,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint ( colorTheArray ( 7 , [ [ 0 , 7 ] , [ 2 , 7 ] , [ 1 , 8 ] , [ 4 , 7 ] , [ 3 , 7 ] , [ 5 , 7 ] , [ 6 , 7 ] , [ 1 , 7 ] ] ) )",
    "execution_output": [
      0,
      0,
      0,
      0,
      2,
      3,
      4,
      6
    ]
  },
  {
    "id": 14,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint ( colorTheArray ( 9 , [ [ 0 , 234772 ] , [ 8 , 234772 ] , [ 1 , 234772 ] , [ 7 , 234772 ] , [ 2 , 234772 ] , [ 6 , 234772 ] , [ 3 , 3254323 ] , [ 3 , 234772 ] , [ 4 , 234772 ] , [ 5 , 234772 ] ] ) )",
    "execution_output": [
      0,
      0,
      1,
      2,
      3,
      4,
      4,
      5,
      6,
      8
    ]
  },
  {
    "id": 15,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint ( colorTheArray ( 8 , [ [ 3 , 1 ] , [ 4 , 1 ] , [ 2 , 1 ] , [ 5 , 1 ] , [ 4 , 2 ] , [ 3 , 2 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 6 , 2 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      3,
      1,
      1,
      2,
      3,
      3
    ]
  },
  {
    "id": 16,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint ( colorTheArray ( 5 , [ [ 0 , 7 ] , [ 1 , 7 ] , [ 2 , 7 ] , [ 1 , 3 ] , [ 1 , 7 ] , [ 2 , 3 ] , [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 7 ] , [ 2 , 7 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      0,
      2,
      1,
      2,
      3,
      1,
      3
    ]
  },
  {
    "id": 17,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint ( colorTheArray ( 9 , [ [ 0 , 5 ] , [ 8 , 5 ] , [ 1 , 5 ] , [ 7 , 5 ] , [ 2 , 5 ] , [ 6 , 5 ] , [ 3 , 5 ] , [ 5 , 5 ] , [ 4 , 5 ] ] ) )",
    "execution_output": [
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      8
    ]
  },
  {
    "id": 18,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint ( colorTheArray ( 10 , [ [ 5 , 1 ] , [ 4 , 1 ] , [ 6 , 1 ] , [ 3 , 2 ] , [ 7 , 2 ] , [ 2 , 2 ] , [ 5 , 2 ] , [ 6 , 3 ] , [ 7 , 3 ] , [ 8 , 3 ] , [ 9 , 3 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      2,
      2,
      3,
      1,
      1,
      2,
      3,
      4
    ]
  },
  {
    "id": 19,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint ( colorTheArray ( 6 , [ [ 1 , 10 ] , [ 4 , 10 ] , [ 2 , 10 ] , [ 3 , 10 ] , [ 2 , 20 ] , [ 3 , 20 ] , [ 1 , 20 ] , [ 4 , 20 ] ] ) )",
    "execution_output": [
      0,
      0,
      1,
      3,
      1,
      1,
      2,
      3
    ]
  },
  {
    "id": 20,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res -= 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res += 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res += 1\n        ans.append(res)\n    return ans\nprint ( colorTheArray ( 7 , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 2 , 1 ] , [ 3 , 2 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ 4 , 2 ] , [ 5 , 2 ] , [ 6 , 2 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      2,
      2,
      2,
      3,
      4,
      5,
      6
    ]
  },
  {
    "id": 21,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res -= 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res += 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res += 1\n        ans.append(res)\n    return ans\nprint ( colorTheArray ( 10 , [ [ 5 , 3 ] , [ 4 , 3 ] , [ 6 , 3 ] , [ 5 , 2 ] , [ 5 , 3 ] , [ 4 , 2 ] , [ 6 , 2 ] , [ 4 , 3 ] , [ 6 , 3 ] , [ 5 , 3 ] , [ 3 , 3 ] , [ 7 , 3 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      0,
      2,
      1,
      0,
      1,
      2,
      2,
      3,
      4
    ]
  },
  {
    "id": 22,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res -= 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res += 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res += 1\n        ans.append(res)\n    return ans\nprint ( colorTheArray ( 5 , [ [ 0 , 1 ] , [ 1 , 1 ] , [ 2 , 1 ] , [ 3 , 1 ] , [ 4 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 3 , 2 ] , [ 2 , 1 ] , [ 1 , 1 ] , [ 3 , 1 ] ] ) )",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      2,
      2,
      2,
      0,
      2,
      4
    ]
  },
  {
    "id": 23,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res -= 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res += 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res += 1\n        ans.append(res)\n    return ans\nprint ( colorTheArray ( 8 , [ [ 7 , 5 ] , [ 0 , 5 ] , [ 1 , 5 ] , [ 6 , 5 ] , [ 5 , 5 ] , [ 2 , 5 ] , [ 4 , 5 ] , [ 3 , 5 ] , [ 3 , 4 ] , [ 4 , 4 ] , [ 2 , 4 ] , [ 5 , 4 ] , [ 6 , 4 ] , [ 7 , 4 ] , [ 0 , 4 ] , [ 1 , 4 ] ] ) )",
    "execution_output": [
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      7,
      5,
      5,
      5,
      5,
      5,
      6,
      5,
      7
    ]
  },
  {
    "id": 24,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res -= 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i-1] and colors[i] > 0: res += 1\n        if i < n - 1 and colors[i] == colors[i+1] and colors[i] > 0: res += 1\n        ans.append(res)\n    return ans\nprint ( colorTheArray ( 6 , [ [ 1 , 9 ] , [ 2 , 9 ] , [ 4 , 8 ] , [ 3 , 8 ] , [ 2 , 8 ] , [ 1 , 8 ] , [ 0 , 8 ] , [ 5 , 8 ] , [ 3 , 7 ] , [ 4 , 7 ] ] ) )",
    "execution_output": [
      0,
      1,
      1,
      2,
      2,
      3,
      4,
      5,
      3,
      3
    ]
  },
  {
    "id": 25,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i-1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i+1] and color[i] != 0:\n            ans -= 1\n        \n        color[i] = x\n        \n        if color[i] == color[i-1]:\n            ans += 1\n        if color[i] == color[i+1]:\n            ans += 1\n            \n        out.append(ans)\n    return out\nprint ( colorTheArray ( 8 , [ [ 3 , 1 ] , [ 4 , 1 ] , [ 3 , 2 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 5 , 2 ] , [ 4 , 2 ] , [ 6 , 2 ] , [ 7 , 2 ] , [ 6 , 3 ] ] ) )",
    "execution_output": [
      0,
      1,
      0,
      1,
      2,
      2,
      4,
      5,
      6,
      4
    ]
  },
  {
    "id": 26,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i-1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i+1] and color[i] != 0:\n            ans -= 1\n        \n        color[i] = x\n        \n        if color[i] == color[i-1]:\n            ans += 1\n        if color[i] == color[i+1]:\n            ans += 1\n            \n        out.append(ans)\n    return out\nprint ( colorTheArray ( 12 , [ [ 5 , 1 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 7 , 2 ] , [ 6 , 2 ] , [ 5 , 2 ] , [ 6 , 3 ] , [ 6 , 3 ] , [ 5 , 3 ] , [ 4 , 3 ] , [ 7 , 3 ] , [ 8 , 3 ] ] ) )",
    "execution_output": [
      0,
      1,
      0,
      1,
      1,
      2,
      0,
      0,
      1,
      2,
      3,
      4
    ]
  },
  {
    "id": 27,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i-1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i+1] and color[i] != 0:\n            ans -= 1\n        \n        color[i] = x\n        \n        if color[i] == color[i-1]:\n            ans += 1\n        if color[i] == color[i+1]:\n            ans += 1\n            \n        out.append(ans)\n    return out\nprint ( colorTheArray ( 10 , [ [ 4 , 7 ] , [ 6 , 7 ] , [ 5 , 7 ] , [ 5 , 8 ] , [ 5 , 7 ] , [ 5 , 7 ] , [ 4 , 8 ] , [ 6 , 8 ] , [ 5 , 8 ] , [ 5 , 9 ] ] ) )",
    "execution_output": [
      0,
      0,
      2,
      0,
      2,
      2,
      1,
      0,
      2,
      0
    ]
  },
  {
    "id": 28,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i-1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i+1] and color[i] != 0:\n            ans -= 1\n        \n        color[i] = x\n        \n        if color[i] == color[i-1]:\n            ans += 1\n        if color[i] == color[i+1]:\n            ans += 1\n            \n        out.append(ans)\n    return out\nprint ( colorTheArray ( 15 , [ [ 3 , 5 ] , [ 4 , 5 ] , [ 10 , 7 ] , [ 11 , 7 ] , [ 5 , 5 ] , [ 6 , 5 ] , [ 7 , 5 ] , [ 8 , 5 ] , [ 9 , 5 ] , [ 10 , 5 ] , [ 11 , 5 ] , [ 12 , 5 ] , [ 7 , 9 ] , [ 7 , 5 ] , [ 6 , 7 ] , [ 6 , 5 ] ] ) )",
    "execution_output": [
      0,
      1,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      7,
      8,
      9,
      7,
      9,
      7,
      9
    ]
  },
  {
    "id": 29,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i-1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i+1] and color[i] != 0:\n            ans -= 1\n        \n        color[i] = x\n        \n        if color[i] == color[i-1]:\n            ans += 1\n        if color[i] == color[i+1]:\n            ans += 1\n            \n        out.append(ans)\n    return out\nprint ( colorTheArray ( 9 , [ [ 1 , 3 ] , [ 2 , 3 ] , [ 8 , 4 ] , [ 7 , 4 ] , [ 2 , 5 ] , [ 7 , 5 ] , [ 6 , 5 ] , [ 1 , 5 ] , [ 3 , 5 ] , [ 4 , 5 ] ] ) )",
    "execution_output": [
      0,
      1,
      1,
      2,
      1,
      0,
      1,
      2,
      3,
      4
    ]
  },
  {
    "id": 30,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == last:\n        return True\n    last = 1\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == (1 ^ last):\n        return True\n    return False\nprint ( doesValidArrayExist ( [ 1 , 0 , 1 , 0 , 1 , 1 ] ) )",
    "execution_output": true
  },
  {
    "id": 31,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == last:\n        return True\n    last = 1\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == (1 ^ last):\n        return True\n    return False\nprint ( doesValidArrayExist ( [ 2 , 3 , 5 , 7 , 11 ] ) )",
    "execution_output": false
  },
  {
    "id": 32,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == last:\n        return True\n    last = 1\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == (1 ^ last):\n        return True\n    return False\nprint ( doesValidArrayExist ( [ 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ] ) )",
    "execution_output": true
  },
  {
    "id": 33,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == last:\n        return True\n    last = 1\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == (1 ^ last):\n        return True\n    return False\nprint ( doesValidArrayExist ( [ 13 , 13 , 26 , 0 , 19 , 19 , 26 ] ) )",
    "execution_output": true
  },
  {
    "id": 34,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == last:\n        return True\n    last = 1\n    for i in range(n-1):\n        last = derived[i] ^ last\n    if derived[n-1] == (1 ^ last):\n        return True\n    return False\nprint ( doesValidArrayExist ( [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) )",
    "execution_output": false
  },
  {
    "id": 35,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint ( doesValidArrayExist ( [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 2 , 0 , 3 ] ) )",
    "execution_output": false
  },
  {
    "id": 36,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint ( doesValidArrayExist ( [ 1 , 0 , 0 , 2 , 0 , 0 , 3 , 0 , 4 , 0 , 0 , 5 ] ) )",
    "execution_output": false
  },
  {
    "id": 37,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint ( doesValidArrayExist ( [ 2 , - 3 , 0 , 0 , 4 , 0 , - 5 , 0 , 6 , 0 , 0 ] ) )",
    "execution_output": false
  },
  {
    "id": 38,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint ( doesValidArrayExist ( [ 1 , 1 , 0 , 2 , 2 , 0 , 3 , 3 ] ) )",
    "execution_output": true
  },
  {
    "id": 39,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint ( doesValidArrayExist ( [ 0 , 1 , 0 , 2 , 0 , 3 , 0 , 4 , 0 , 5 , 0 , 6 , 0 , 7 , 0 ] ) )",
    "execution_output": false
  },
  {
    "id": 40,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0]*n\n    for x in [0, 1]:\n        ans = [0]*n\n        ans[-1] = x\n        for i in range(n-2, -1, -1):\n            ans[i] = ans[i+1]^derived[i]\n        if ans[n-1]^ans[0] == derived[n-1]:\n            return True\n    return False\nprint ( doesValidArrayExist ( [ 5 , 1 , 4 , 1 , 5 , 4 ] ) )",
    "execution_output": true
  },
  {
    "id": 41,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0]*n\n    for x in [0, 1]:\n        ans = [0]*n\n        ans[-1] = x\n        for i in range(n-2, -1, -1):\n            ans[i] = ans[i+1]^derived[i]\n        if ans[n-1]^ans[0] == derived[n-1]:\n            return True\n    return False\nprint ( doesValidArrayExist ( [ 7 , 3 , 5 , 9 , 12 , 6 , 10 ] ) )",
    "execution_output": false
  },
  {
    "id": 42,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0]*n\n    for x in [0, 1]:\n        ans = [0]*n\n        ans[-1] = x\n        for i in range(n-2, -1, -1):\n            ans[i] = ans[i+1]^derived[i]\n        if ans[n-1]^ans[0] == derived[n-1]:\n            return True\n    return False\nprint ( doesValidArrayExist ( [ 1 , 2 , 3 , 0 , 1 , 2 , 3 , 0 ] ) )",
    "execution_output": true
  },
  {
    "id": 43,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0]*n\n    for x in [0, 1]:\n        ans = [0]*n\n        ans[-1] = x\n        for i in range(n-2, -1, -1):\n            ans[i] = ans[i+1]^derived[i]\n        if ans[n-1]^ans[0] == derived[n-1]:\n            return True\n    return False\nprint ( doesValidArrayExist ( [ 1024 , 512 , 256 , 1024 , 256 , 512 ] ) )",
    "execution_output": true
  },
  {
    "id": 44,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0]*n\n    for x in [0, 1]:\n        ans = [0]*n\n        ans[-1] = x\n        for i in range(n-2, -1, -1):\n            ans[i] = ans[i+1]^derived[i]\n        if ans[n-1]^ans[0] == derived[n-1]:\n            return True\n    return False\nprint ( doesValidArrayExist ( [ 3254323 , 234772 , 123456 , 789012 , 3254323 , 234772 , 123456 , 789012 ] ) )",
    "execution_output": true
  },
  {
    "id": 45,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    \n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0: return True\n    \n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1: return True\n    \n    return False\nprint ( doesValidArrayExist ( [ 3 , 5 , 7 , 3 , 5 , 7 ] ) )",
    "execution_output": true
  },
  {
    "id": 46,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    \n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0: return True\n    \n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1: return True\n    \n    return False\nprint ( doesValidArrayExist ( [ 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ] ) )",
    "execution_output": false
  },
  {
    "id": 47,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    \n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0: return True\n    \n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1: return True\n    \n    return False\nprint ( doesValidArrayExist ( [ - 10 , 20 , - 10 , 20 , 30 , 30 ] ) )",
    "execution_output": true
  },
  {
    "id": 48,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    \n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0: return True\n    \n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1: return True\n    \n    return False\nprint ( doesValidArrayExist ( [ 15 , 23 , 42 , 99 , 15 , 23 , 42 ] ) )",
    "execution_output": false
  },
  {
    "id": 49,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    \n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0: return True\n    \n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1: return True\n    \n    return False\nprint ( doesValidArrayExist ( [ 234772 , 3254323 , 7777777 , 8888888 , 234772 , 3254323 , 8888888 , 7777777 ] ) )",
    "execution_output": true
  },
  {
    "id": 50,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        \n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint ( doesValidArrayExist ( [ 1 , 0 , 1 , 1 , 0 , 1 , 0 ] ) )",
    "execution_output": true
  },
  {
    "id": 51,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        \n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint ( doesValidArrayExist ( [ 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 ] ) )",
    "execution_output": false
  },
  {
    "id": 52,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        \n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint ( doesValidArrayExist ( [ 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ] ) )",
    "execution_output": false
  },
  {
    "id": 53,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        \n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint ( doesValidArrayExist ( [ 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 ] ) )",
    "execution_output": true
  },
  {
    "id": 54,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        \n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint ( doesValidArrayExist ( [ 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 ] ) )",
    "execution_output": true
  },
  {
    "id": 55,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint ( doesValidArrayExist ( [ 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 ] ) )",
    "execution_output": true
  },
  {
    "id": 56,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint ( doesValidArrayExist ( [ 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 ] ) )",
    "execution_output": false
  },
  {
    "id": 57,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint ( doesValidArrayExist ( [ 2 , 3 , 5 , 9 , 12 , 6 , 7 ] ) )",
    "execution_output": true
  },
  {
    "id": 58,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint ( doesValidArrayExist ( [ 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ] ) )",
    "execution_output": true
  },
  {
    "id": 59,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint ( doesValidArrayExist ( [ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 ] ) )",
    "execution_output": false
  },
  {
    "id": 60,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    \n    return ans\nprint ( minimumCost ( \"010101010101010\" ) )",
    "execution_output": 56
  },
  {
    "id": 61,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    \n    return ans\nprint ( minimumCost ( \"00000111110000011111\" ) )",
    "execution_output": 20
  },
  {
    "id": 62,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    \n    return ans\nprint ( minimumCost ( \"111100001010101000011111\" ) )",
    "execution_output": 89
  },
  {
    "id": 63,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    \n    return ans\nprint ( minimumCost ( \"0001110111000\" ) )",
    "execution_output": 18
  },
  {
    "id": 64,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    \n    return ans\nprint ( minimumCost ( \"111110000011111\" ) )",
    "execution_output": 10
  },
  {
    "id": 65,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n    \n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min(l[i] + r[n - 1 - i] for i in range(n))\n    return ans\nprint ( minimumCost ( \"ababababababababababababab\" ) )",
    "execution_output": 169
  },
  {
    "id": 66,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n    \n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min(l[i] + r[n - 1 - i] for i in range(n))\n    return ans\nprint ( minimumCost ( \"aaaaabbbbbaaaaabbbbbaaaaabbbbb\" ) )",
    "execution_output": 45
  },
  {
    "id": 67,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n    \n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min(l[i] + r[n - 1 - i] for i in range(n))\n    return ans\nprint ( minimumCost ( \"abcddcbaabcddcbaabcddcba\" ) )",
    "execution_output": 108
  },
  {
    "id": 68,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n    \n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min(l[i] + r[n - 1 - i] for i in range(n))\n    return ans\nprint ( minimumCost ( \"aaaaaaaaaabaaaaaaaaaa\" ) )",
    "execution_output": 20
  },
  {
    "id": 69,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n    \n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min(l[i] + r[n - 1 - i] for i in range(n))\n    return ans\nprint ( minimumCost ( \"0011001110001111000011110000\" ) )",
    "execution_output": 57
  },
  {
    "id": 70,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min(x + y for x, y in zip(left, right))\nprint ( minimumCost ( \"010101010101010101010101010101\" ) )",
    "execution_output": 225
  },
  {
    "id": 71,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min(x + y for x, y in zip(left, right))\nprint ( minimumCost ( \"0000111100001111\" ) )",
    "execution_output": 16
  },
  {
    "id": 72,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min(x + y for x, y in zip(left, right))\nprint ( minimumCost ( \"ababaabbbaababaabbbaa\" ) )",
    "execution_output": 66
  },
  {
    "id": 73,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min(x + y for x, y in zip(left, right))\nprint ( minimumCost ( \"abcddcbaabcddcba\" ) )",
    "execution_output": 48
  },
  {
    "id": 74,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * (n)\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min(x + y for x, y in zip(left, right))\nprint ( minimumCost ( \"AaAaBBbb123321bBbBAa\" ) )",
    "execution_output": 79
  },
  {
    "id": 75,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint ( minimumCost ( \"0011100111001110\" ) )",
    "execution_output": 25
  },
  {
    "id": 76,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint ( minimumCost ( \"0101010010110101\" ) )",
    "execution_output": 52
  },
  {
    "id": 77,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint ( minimumCost ( \"aaaaabbbbcccccbbbbaaa\" ) )",
    "execution_output": 24
  },
  {
    "id": 78,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint ( minimumCost ( \"00000011110000001111\" ) )",
    "execution_output": 20
  },
  {
    "id": 79,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint ( minimumCost ( \"abcddcbaabcddcba\" ) )",
    "execution_output": 48
  },
  {
    "id": 80,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint ( minimumCost ( \"0101101001110\" ) )",
    "execution_output": 28
  },
  {
    "id": 81,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint ( minimumCost ( \"aaabbbababaabbba\" ) )",
    "execution_output": 42
  },
  {
    "id": 82,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint ( minimumCost ( \"abcabcabcabcabc\" ) )",
    "execution_output": 56
  },
  {
    "id": 83,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint ( minimumCost ( \"0011110001111000\" ) )",
    "execution_output": 18
  },
  {
    "id": 84,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint ( minimumCost ( \"a1!a1!a1!a1!a1!\" ) )",
    "execution_output": 56
  },
  {
    "id": 85,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            r += min(i+1, n-1-i)\n    return r\nprint ( minimumCost ( \"0001110011100\" ) )",
    "execution_output": 16
  },
  {
    "id": 86,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            r += min(i+1, n-1-i)\n    return r\nprint ( minimumCost ( \"0101011101010\" ) )",
    "execution_output": 30
  },
  {
    "id": 87,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            r += min(i+1, n-1-i)\n    return r\nprint ( minimumCost ( \"abccbaabccba\" ) )",
    "execution_output": 24
  },
  {
    "id": 88,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            r += min(i+1, n-1-i)\n    return r\nprint ( minimumCost ( \"abcabcabcabc\" ) )",
    "execution_output": 36
  },
  {
    "id": 89,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            r += min(i+1, n-1-i)\n    return r\nprint ( minimumCost ( \"111110101011111\" ) )",
    "execution_output": 36
  },
  {
    "id": 90,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == \"a\"*len(s):\n        return \"a\"*(len(s)-1)+\"z\"\n    r = \"\"\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == \"a\":\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i)-1)\n        elif p == 0:\n            if i == \"a\":\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i)-1)\n        else:\n            r += i\n    return r\nprint ( smallestString ( \"bcd\" ) )",
    "execution_output": "abc"
  },
  {
    "id": 91,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == \"a\"*len(s):\n        return \"a\"*(len(s)-1)+\"z\"\n    r = \"\"\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == \"a\":\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i)-1)\n        elif p == 0:\n            if i == \"a\":\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i)-1)\n        else:\n            r += i\n    return r\nprint ( smallestString ( \"aaabbbccdaa\" ) )",
    "execution_output": "aaaaaabbcaa"
  },
  {
    "id": 92,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == \"a\"*len(s):\n        return \"a\"*(len(s)-1)+\"z\"\n    r = \"\"\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == \"a\":\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i)-1)\n        elif p == 0:\n            if i == \"a\":\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i)-1)\n        else:\n            r += i\n    return r\nprint ( smallestString ( \"zazbz\" ) )",
    "execution_output": "yazbz"
  },
  {
    "id": 93,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == \"a\"*len(s):\n        return \"a\"*(len(s)-1)+\"z\"\n    r = \"\"\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == \"a\":\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i)-1)\n        elif p == 0:\n            if i == \"a\":\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i)-1)\n        else:\n            r += i\n    return r\nprint ( smallestString ( \"abcdeafgh\" ) )",
    "execution_output": "aabcdafgh"
  },
  {
    "id": 94,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == \"a\"*len(s):\n        return \"a\"*(len(s)-1)+\"z\"\n    r = \"\"\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == \"a\":\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i)-1)\n        elif p == 0:\n            if i == \"a\":\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i)-1)\n        else:\n            r += i\n    return r\nprint ( smallestString ( \"aaazzzaaa\" ) )",
    "execution_output": "aaayyyaaa"
  },
  {
    "id": 95,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a': return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint ( smallestString ( \"aabca\" ) )",
    "execution_output": "aaaba"
  },
  {
    "id": 96,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a': return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint ( smallestString ( \"zzzaaa\" ) )",
    "execution_output": "yyyaaa"
  },
  {
    "id": 97,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a': return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint ( smallestString ( \"bbaaaaccd\" ) )",
    "execution_output": "aaaaaaccd"
  },
  {
    "id": 98,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a': return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint ( smallestString ( \"abzazb\" ) )",
    "execution_output": "aayazb"
  },
  {
    "id": 99,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a': return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint ( smallestString ( \"cazbya\" ) )",
    "execution_output": "bazbya"
  },
  {
    "id": 100,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a': i += 1\n    if i == l: return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a': break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint ( smallestString ( 'aaabcdefgamnop' ) )",
    "execution_output": "aaaabcdefamnop"
  },
  {
    "id": 101,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a': i += 1\n    if i == l: return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a': break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint ( smallestString ( 'bcdefghijklmnopqrstuvwxyzaa' ) )",
    "execution_output": "abcdefghijklmnopqrstuvwxyaa"
  },
  {
    "id": 102,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a': i += 1\n    if i == l: return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a': break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint ( smallestString ( 'aaaaabaaaa' ) )",
    "execution_output": "aaaaaaaaaa"
  },
  {
    "id": 103,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a': i += 1\n    if i == l: return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a': break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint ( smallestString ( 'bbaaaacc' ) )",
    "execution_output": "aaaaaacc"
  },
  {
    "id": 104,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a': i += 1\n    if i == l: return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a': break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint ( smallestString ( 'azzzza' ) )",
    "execution_output": "ayyyya"
  },
  {
    "id": 105,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint ( smallestString ( 'bcdef' ) )",
    "execution_output": "abcde"
  },
  {
    "id": 106,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint ( smallestString ( 'aaabbb' ) )",
    "execution_output": "aaaaaa"
  },
  {
    "id": 107,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint ( smallestString ( 'bzaaaz' ) )",
    "execution_output": "ayaaaz"
  },
  {
    "id": 108,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint ( smallestString ( 'abacad' ) )",
    "execution_output": "aaacad"
  },
  {
    "id": 109,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint ( smallestString ( 'aaazzz' ) )",
    "execution_output": "aaayyy"
  },
  {
    "id": 110,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s) \n    s = list(s)\n    i = 0 \n    while i < n and s[i] == 'a':\n        i += 1 \n    if i == n: \n        s[-1] = 'z'\n        return ''.join(s) \n    for i in range(i,n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i])-1) \n        else : break \n    return ''.join(s)\nprint ( smallestString ( \"bcdefgh\" ) )",
    "execution_output": "abcdefg"
  },
  {
    "id": 111,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s) \n    s = list(s)\n    i = 0 \n    while i < n and s[i] == 'a':\n        i += 1 \n    if i == n: \n        s[-1] = 'z'\n        return ''.join(s) \n    for i in range(i,n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i])-1) \n        else : break \n    return ''.join(s)\nprint ( smallestString ( \"aaazzzbca\" ) )",
    "execution_output": "aaayyyaba"
  },
  {
    "id": 112,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s) \n    s = list(s)\n    i = 0 \n    while i < n and s[i] == 'a':\n        i += 1 \n    if i == n: \n        s[-1] = 'z'\n        return ''.join(s) \n    for i in range(i,n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i])-1) \n        else : break \n    return ''.join(s)\nprint ( smallestString ( \"bzaaz\" ) )",
    "execution_output": "ayaaz"
  },
  {
    "id": 113,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s) \n    s = list(s)\n    i = 0 \n    while i < n and s[i] == 'a':\n        i += 1 \n    if i == n: \n        s[-1] = 'z'\n        return ''.join(s) \n    for i in range(i,n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i])-1) \n        else : break \n    return ''.join(s)\nprint ( smallestString ( \"azbcdefa\" ) )",
    "execution_output": "ayabcdea"
  },
  {
    "id": 114,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s) \n    s = list(s)\n    i = 0 \n    while i < n and s[i] == 'a':\n        i += 1 \n    if i == n: \n        s[-1] = 'z'\n        return ''.join(s) \n    for i in range(i,n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i])-1) \n        else : break \n    return ''.join(s)\nprint ( smallestString ( \"abacabadabacaba\" ) )",
    "execution_output": "aaacabadabacaba"
  },
  {
    "id": 115,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        else:\n            if c:\n                break\n    if not c:\n        s[-1] = 'z'\n    return \"\".join(s)\nprint ( smallestString ( \"bbbzaaa\" ) )",
    "execution_output": "aaayaaa"
  },
  {
    "id": 116,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        else:\n            if c:\n                break\n    if not c:\n        s[-1] = 'z'\n    return \"\".join(s)\nprint ( smallestString ( \"xyz\" ) )",
    "execution_output": "wxy"
  },
  {
    "id": 117,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        else:\n            if c:\n                break\n    if not c:\n        s[-1] = 'z'\n    return \"\".join(s)\nprint ( smallestString ( \"aabccaa\" ) )",
    "execution_output": "aaabbaa"
  },
  {
    "id": 118,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        else:\n            if c:\n                break\n    if not c:\n        s[-1] = 'z'\n    return \"\".join(s)\nprint ( smallestString ( \"zaaabz\" ) )",
    "execution_output": "yaaabz"
  },
  {
    "id": 119,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        else:\n            if c:\n                break\n    if not c:\n        s[-1] = 'z'\n    return \"\".join(s)\nprint ( smallestString ( \"bcdefghijklmnopqrstuvwxyzabc\" ) )",
    "execution_output": "abcdefghijklmnopqrstuvwxyabc"
  },
  {
    "id": 120,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i+j)%n])\n            mns[j] += mn\n    return min(mns)\nprint ( minCost ( [ 9 , 1 , 8 , 2 , 7 , 3 , 6 , 4 ] , 7 ) )",
    "execution_output": 27
  },
  {
    "id": 121,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i+j)%n])\n            mns[j] += mn\n    return min(mns)\nprint ( minCost ( [ 50 , 60 , 10 , 70 , 20 , 80 , 30 , 90 , 40 , 100 , 5 , 55 ] , 12 ) )",
    "execution_output": 164
  },
  {
    "id": 122,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i+j)%n])\n            mns[j] += mn\n    return min(mns)\nprint ( minCost ( [ 100 , 90 , 80 , 70 , 60 , 50 , 40 , 30 , 20 , 10 ] , 5 ) )",
    "execution_output": 145
  },
  {
    "id": 123,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i+j)%n])\n            mns[j] += mn\n    return min(mns)\nprint ( minCost ( [ 3 , 100 , 4 , 99 , 5 , 98 , 6 , 97 , 7 , 96 , 8 , 95 , 9 , 94 ] , 20 ) )",
    "execution_output": 104
  },
  {
    "id": 124,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i+j)%n])\n            mns[j] += mn\n    return min(mns)\nprint ( minCost ( [ 100 , 100 , 100 , 100 , 100 , 1 , 100 , 100 , 100 , 100 , 100 , 2 , 100 , 100 , 3 , 100 ] , 15 ) )",
    "execution_output": 118
  },
  {
    "id": 125,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    \n    return min(y - x for x, y in zip(nums, nums[1:]))\nprint ( findValueOfPartition ( [ - 10 , - 3 , 4 , 5 , 12 , 20 , 18 , 0 , 2 ] ) )",
    "execution_output": 1
  },
  {
    "id": 126,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    \n    return min(y - x for x, y in zip(nums, nums[1:]))\nprint ( findValueOfPartition ( [ 100 , 97 , 94 , 91 , 88 , 85 , 82 , 79 ] ) )",
    "execution_output": 3
  },
  {
    "id": 127,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    \n    return min(y - x for x, y in zip(nums, nums[1:]))\nprint ( findValueOfPartition ( [ 100000 , - 99950 , 12345 , 67890 , 100002 , - 100000 , 54321 ] ) )",
    "execution_output": 2
  },
  {
    "id": 128,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    \n    return min(y - x for x, y in zip(nums, nums[1:]))\nprint ( findValueOfPartition ( [ 30 , 1 , 7 , 8 , 14 , 15 , 16 , 100 , 101 , 200 ] ) )",
    "execution_output": 1
  },
  {
    "id": 129,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    \n    return min(y - x for x, y in zip(nums, nums[1:]))\nprint ( findValueOfPartition ( [ 42 , 17 , 8 , 23 , 35 , 29 , 57 , 61 , 50 , 46 , 73 , 68 , 90 , 86 , 81 ] ) )",
    "execution_output": 4
  },
  {
    "id": 130,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    \n    nums.sort()\n    n = len(nums)\n    \n    ans = float('inf')\n    \n    for i in range(1,n):\n        gap = nums[i] - nums[i-1]\n        \n        ans = min(ans, gap)\n    \n    return ans\nprint ( findValueOfPartition ( [ 7 , - 5 , 2 , 50 , 101 , 1 , - 3 ] ) )",
    "execution_output": 1
  },
  {
    "id": 131,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    \n    nums.sort()\n    n = len(nums)\n    \n    ans = float('inf')\n    \n    for i in range(1,n):\n        gap = nums[i] - nums[i-1]\n        \n        ans = min(ans, gap)\n    \n    return ans\nprint ( findValueOfPartition ( [ 1000 , 1001 , 1003 , 1007 , 50000 , 1000000 ] ) )",
    "execution_output": 1
  },
  {
    "id": 132,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    \n    nums.sort()\n    n = len(nums)\n    \n    ans = float('inf')\n    \n    for i in range(1,n):\n        gap = nums[i] - nums[i-1]\n        \n        ans = min(ans, gap)\n    \n    return ans\nprint ( findValueOfPartition ( [ 5 , 3 , 8 , 3 , 12 , 13 , 5 ] ) )",
    "execution_output": 0
  },
  {
    "id": 133,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    \n    nums.sort()\n    n = len(nums)\n    \n    ans = float('inf')\n    \n    for i in range(1,n):\n        gap = nums[i] - nums[i-1]\n        \n        ans = min(ans, gap)\n    \n    return ans\nprint ( findValueOfPartition ( [ 20 , 10 , 7 , 3 , - 2 , - 5 ] ) )",
    "execution_output": 3
  },
  {
    "id": 134,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    \n    nums.sort()\n    n = len(nums)\n    \n    ans = float('inf')\n    \n    for i in range(1,n):\n        gap = nums[i] - nums[i-1]\n        \n        ans = min(ans, gap)\n    \n    return ans\nprint ( findValueOfPartition ( [ 30 , 1 , 2 , 100 , 101 , 102 , 500 , 700 , 701 , 702 , - 10 , - 9 , - 8 , 0 , 3 ] ) )",
    "execution_output": 1
  },
  {
    "id": 135,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint ( findValueOfPartition ( [ 17 , - 3 , 58 , 0 , 102 , - 45 , 16 , 200 , - 2 , 19 ] ) )",
    "execution_output": 1
  },
  {
    "id": 136,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint ( findValueOfPartition ( [ 100000 , 250000 , 500000 , 750000 , 100001 , 1250000 , - 500000 , - 499999 ] ) )",
    "execution_output": 1
  },
  {
    "id": 137,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint ( findValueOfPartition ( [ 90 , 20 , 40 , 10 , 50 , 0 , 30 , 60 , 80 , 100 , 31 , 70 ] ) )",
    "execution_output": 1
  },
  {
    "id": 138,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint ( findValueOfPartition ( [ 50 , 40 , 30 , 20 , 10 , 0 , - 10 ] ) )",
    "execution_output": 10
  },
  {
    "id": 139,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint ( findValueOfPartition ( [ 1000 , 1003 , 1007 , 1008 , - 1000 , - 1002 , - 1005 , - 1006 , 500 , 505 ] ) )",
    "execution_output": 1
  },
  {
    "id": 140,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    # 枚举最大的\n    for i in range(len(nums) - 1, 0, -1):\n        # 最大的是 nums[i]\n        # 最小的是 nums[i-1]\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint ( findValueOfPartition ( [ 7 , - 3 , 20 , - 10 , - 2 , 5 , 6 ] ) )",
    "execution_output": 1
  },
  {
    "id": 141,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    # 枚举最大的\n    for i in range(len(nums) - 1, 0, -1):\n        # 最大的是 nums[i]\n        # 最小的是 nums[i-1]\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint ( findValueOfPartition ( [ 1000 , 1001 , 1002 , 30000 , - 5000 , - 4999 , 700 , 702 ] ) )",
    "execution_output": 1
  },
  {
    "id": 142,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    # 枚举最大的\n    for i in range(len(nums) - 1, 0, -1):\n        # 最大的是 nums[i]\n        # 最小的是 nums[i-1]\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint ( findValueOfPartition ( [ 12 , 7 , 12 , 18 , 25 , 30 , 7 , 40 ] ) )",
    "execution_output": 0
  },
  {
    "id": 143,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    # 枚举最大的\n    for i in range(len(nums) - 1, 0, -1):\n        # 最大的是 nums[i]\n        # 最小的是 nums[i-1]\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint ( findValueOfPartition ( [ 234 , 1 , 999 , - 100 , 5000 , 503 , 502 , - 98 , 0 ] ) )",
    "execution_output": 1
  },
  {
    "id": 144,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    # 枚举最大的\n    for i in range(len(nums) - 1, 0, -1):\n        # 最大的是 nums[i]\n        # 最小的是 nums[i-1]\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint ( findValueOfPartition ( [ 50 , 40 , 30 , 25 , 24 , 10 , 0 ] ) )",
    "execution_output": 1
  },
  {
    "id": 145,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e99\n    for i in range(len(nums)-1) :\n        to_ret = min(to_ret, nums[i+1]-nums[i])\n    return to_ret\nprint ( findValueOfPartition ( [ - 10 , - 3 , 1 , 2 , 8 , 15 , - 1 ] ) )",
    "execution_output": 1
  },
  {
    "id": 146,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e99\n    for i in range(len(nums)-1) :\n        to_ret = min(to_ret, nums[i+1]-nums[i])\n    return to_ret\nprint ( findValueOfPartition ( [ 1000 , 5 , 7 , 20 , 200 , 6 , 3000 ] ) )",
    "execution_output": 1
  },
  {
    "id": 147,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e99\n    for i in range(len(nums)-1) :\n        to_ret = min(to_ret, nums[i+1]-nums[i])\n    return to_ret\nprint ( findValueOfPartition ( [ 3 , 10 , 20 , 21 , 30 , 31 , 45 ] ) )",
    "execution_output": 1
  },
  {
    "id": 148,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e99\n    for i in range(len(nums)-1) :\n        to_ret = min(to_ret, nums[i+1]-nums[i])\n    return to_ret\nprint ( findValueOfPartition ( [ 50 , 49 , 10 , 12 , 11 , 100 , 98 , 99 , 0 ] ) )",
    "execution_output": 1
  },
  {
    "id": 149,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e99\n    for i in range(len(nums)-1) :\n        to_ret = min(to_ret, nums[i+1]-nums[i])\n    return to_ret\nprint ( findValueOfPartition ( [ 234772 , 234780 , 3254323 , 3254325 , 5000000 , 234779 ] ) )",
    "execution_output": 1
  },
  {
    "id": 150,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint ( findValueOfPartition ( [ 8 , - 3 , 14 , 2 , 7 , - 1 , 9 , 15 ] ) )",
    "execution_output": 1
  },
  {
    "id": 151,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint ( findValueOfPartition ( [ 100 , 1 , 50 , 51 , 52 , 2 , 99 , 98 , 3 , 97 ] ) )",
    "execution_output": 1
  },
  {
    "id": 152,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint ( findValueOfPartition ( [ 5 , 12 , 6 , 20 , 13 , 7 , 21 , 8 ] ) )",
    "execution_output": 1
  },
  {
    "id": 153,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint ( findValueOfPartition ( [ 1000 , 2000 , 3000 , 4000 , 3001 , 5000 , 6000 ] ) )",
    "execution_output": 1
  },
  {
    "id": 154,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint ( findValueOfPartition ( [ 10 , 20 , 31 , 45 , 60 ] ) )",
    "execution_output": 10
  },
  {
    "id": 155,
    "q_id": "sample_75",
    "code": "from typing import *\n\nfrom math import *\n\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 1000 , 3 ) )",
    "execution_output": 7
  },
  {
    "id": 156,
    "q_id": "sample_75",
    "code": "from typing import *\n\nfrom math import *\n\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 12345 , 37 ) )",
    "execution_output": 8
  },
  {
    "id": 157,
    "q_id": "sample_75",
    "code": "from typing import *\n\nfrom math import *\n\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 1060921 , 1027 ) )",
    "execution_output": 7
  },
  {
    "id": 158,
    "q_id": "sample_75",
    "code": "from typing import *\n\nfrom math import *\n\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 1000999 , 255 ) )",
    "execution_output": 12
  },
  {
    "id": 159,
    "q_id": "sample_75",
    "code": "from typing import *\n\nfrom math import *\n\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 65535 , 123 ) )",
    "execution_output": 10
  },
  {
    "id": 160,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = num1, num2\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += (b%2 == 1)\n            cc += (b%2 == 1)*z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint ( makeTheIntegerZero ( 12345 , 37 ) )",
    "execution_output": 8
  },
  {
    "id": 161,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = num1, num2\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += (b%2 == 1)\n            cc += (b%2 == 1)*z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint ( makeTheIntegerZero ( 65535 , 255 ) )",
    "execution_output": 8
  },
  {
    "id": 162,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = num1, num2\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += (b%2 == 1)\n            cc += (b%2 == 1)*z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint ( makeTheIntegerZero ( 99991 , 97 ) )",
    "execution_output": 6
  },
  {
    "id": 163,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = num1, num2\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += (b%2 == 1)\n            cc += (b%2 == 1)*z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint ( makeTheIntegerZero ( 50000 , 73 ) )",
    "execution_output": 7
  },
  {
    "id": 164,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = num1, num2\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += (b%2 == 1)\n            cc += (b%2 == 1)*z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint ( makeTheIntegerZero ( 100000 , 123 ) )",
    "execution_output": 7
  },
  {
    "id": 165,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint ( makeTheIntegerZero ( 31 , 3 ) )",
    "execution_output": 3
  },
  {
    "id": 166,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint ( makeTheIntegerZero ( 100 , 7 ) )",
    "execution_output": 4
  },
  {
    "id": 167,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint ( makeTheIntegerZero ( 123 , 5 ) )",
    "execution_output": 5
  },
  {
    "id": 168,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint ( makeTheIntegerZero ( 500 , 13 ) )",
    "execution_output": 4
  },
  {
    "id": 169,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint ( makeTheIntegerZero ( 1024 , 33 ) )",
    "execution_output": 6
  },
  {
    "id": 170,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        # print(num, x, k)\n        return x >= k and num1 - x * num2 >= x\n    \n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 3254323 , 234772 ) )",
    "execution_output": 11
  },
  {
    "id": 171,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        # print(num, x, k)\n        return x >= k and num1 - x * num2 >= x\n    \n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 123456 , 789 ) )",
    "execution_output": 8
  },
  {
    "id": 172,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        # print(num, x, k)\n        return x >= k and num1 - x * num2 >= x\n    \n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 1000003 , 33 ) )",
    "execution_output": 9
  },
  {
    "id": 173,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        # print(num, x, k)\n        return x >= k and num1 - x * num2 >= x\n    \n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 65535 , 255 ) )",
    "execution_output": 8
  },
  {
    "id": 174,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        # print(num, x, k)\n        return x >= k and num1 - x * num2 >= x\n    \n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint ( makeTheIntegerZero ( 1000 , 3 ) )",
    "execution_output": 7
  },
  {
    "id": 175,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint ( makeTheIntegerZero ( 10 , 3 ) )",
    "execution_output": 2
  },
  {
    "id": 176,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint ( makeTheIntegerZero ( 31 , 6 ) )",
    "execution_output": 3
  },
  {
    "id": 177,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint ( makeTheIntegerZero ( 100 , 7 ) )",
    "execution_output": 4
  },
  {
    "id": 178,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint ( makeTheIntegerZero ( 57 , 10 ) )",
    "execution_output": 4
  },
  {
    "id": 179,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint ( makeTheIntegerZero ( 1000 , 63 ) )",
    "execution_output": 6
  },
  {
    "id": 180,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100) :\n        num1 -= num2\n        if num1 < to_ret :\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        # print(num1, s1)\n        if to_ret >= s1 :\n            return to_ret\n    return -1\nprint ( makeTheIntegerZero ( 39 , 5 ) )",
    "execution_output": 3
  },
  {
    "id": 181,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100) :\n        num1 -= num2\n        if num1 < to_ret :\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        # print(num1, s1)\n        if to_ret >= s1 :\n            return to_ret\n    return -1\nprint ( makeTheIntegerZero ( 100 , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 182,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100) :\n        num1 -= num2\n        if num1 < to_ret :\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        # print(num1, s1)\n        if to_ret >= s1 :\n            return to_ret\n    return -1\nprint ( makeTheIntegerZero ( 1000000 , 12345 ) )",
    "execution_output": 10
  },
  {
    "id": 183,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100) :\n        num1 -= num2\n        if num1 < to_ret :\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        # print(num1, s1)\n        if to_ret >= s1 :\n            return to_ret\n    return -1\nprint ( makeTheIntegerZero ( 257 , 17 ) )",
    "execution_output": 5
  },
  {
    "id": 184,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100) :\n        num1 -= num2\n        if num1 < to_ret :\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        # print(num1, s1)\n        if to_ret >= s1 :\n            return to_ret\n    return -1\nprint ( makeTheIntegerZero ( 15 , - 2 ) )",
    "execution_output": 3
  },
  {
    "id": 185,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx,v in enumerate(nums):\n        if v==1:\n            tmp.append(idx)\n    # print(tmp)\n    if len(tmp)==0:return 0\n    if len(tmp)==1:return 1\n    res = 1\n    mod = 10**9+7\n    for a,b in pairwise(tmp):\n        res = res*(b-a)% mod\n    return res\nprint ( numberOfGoodSubarraySplits ( [ 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 ] ) )",
    "execution_output": 24
  },
  {
    "id": 186,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx,v in enumerate(nums):\n        if v==1:\n            tmp.append(idx)\n    # print(tmp)\n    if len(tmp)==0:return 0\n    if len(tmp)==1:return 1\n    res = 1\n    mod = 10**9+7\n    for a,b in pairwise(tmp):\n        res = res*(b-a)% mod\n    return res\nprint ( numberOfGoodSubarraySplits ( [ 2 , 1 , 0 , 1 , 3 , 1 , 0 , 0 , 1 ] ) )",
    "execution_output": 12
  },
  {
    "id": 187,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx,v in enumerate(nums):\n        if v==1:\n            tmp.append(idx)\n    # print(tmp)\n    if len(tmp)==0:return 0\n    if len(tmp)==1:return 1\n    res = 1\n    mod = 10**9+7\n    for a,b in pairwise(tmp):\n        res = res*(b-a)% mod\n    return res\nprint ( numberOfGoodSubarraySplits ( [ 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 ] ) )",
    "execution_output": 30
  },
  {
    "id": 188,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx,v in enumerate(nums):\n        if v==1:\n            tmp.append(idx)\n    # print(tmp)\n    if len(tmp)==0:return 0\n    if len(tmp)==1:return 1\n    res = 1\n    mod = 10**9+7\n    for a,b in pairwise(tmp):\n        res = res*(b-a)% mod\n    return res\nprint ( numberOfGoodSubarraySplits ( [ 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 ] ) )",
    "execution_output": 24
  },
  {
    "id": 189,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx,v in enumerate(nums):\n        if v==1:\n            tmp.append(idx)\n    # print(tmp)\n    if len(tmp)==0:return 0\n    if len(tmp)==1:return 1\n    res = 1\n    mod = 10**9+7\n    for a,b in pairwise(tmp):\n        res = res*(b-a)% mod\n    return res\nprint ( numberOfGoodSubarraySplits ( [ 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ] ) )",
    "execution_output": 80
  },
  {
    "id": 190,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10**9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1,len(indexs)):\n        ans *= (indexs[i] - indexs[i-1])\n        ans %= Mod\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 2 , 1 , 0 , 0 , 0 , 3 , 1 , 0 , 4 , 0 , 1 , 0 , 5 ] ) )",
    "execution_output": 20
  },
  {
    "id": 191,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10**9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1,len(indexs)):\n        ans *= (indexs[i] - indexs[i-1])\n        ans %= Mod\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 ] ) )",
    "execution_output": 3125
  },
  {
    "id": 192,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10**9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1,len(indexs)):\n        ans *= (indexs[i] - indexs[i-1])\n        ans %= Mod\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ) )",
    "execution_output": 24
  },
  {
    "id": 193,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10**9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1,len(indexs)):\n        ans *= (indexs[i] - indexs[i-1])\n        ans %= Mod\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 999999 , 0 , 1 , 0 , - 42 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 7 , 0 , 0 , 1 ] ) )",
    "execution_output": 90
  },
  {
    "id": 194,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10**9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1,len(indexs)):\n        ans *= (indexs[i] - indexs[i-1])\n        ans %= Mod\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 ] ) )",
    "execution_output": 180
  },
  {
    "id": 195,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = (ans * (i - l)) % base\n            l = i\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 ] ) )",
    "execution_output": 24
  },
  {
    "id": 196,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = (ans * (i - l)) % base\n            l = i\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 ] ) )",
    "execution_output": 16
  },
  {
    "id": 197,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = (ans * (i - l)) % base\n            l = i\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 3 , 0 ] ) )",
    "execution_output": 8
  },
  {
    "id": 198,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = (ans * (i - l)) % base\n            l = i\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ] ) )",
    "execution_output": 32
  },
  {
    "id": 199,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = (ans * (i - l)) % base\n            l = i\n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 ] ) )",
    "execution_output": 1008
  },
  {
    "id": 200,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t==0 for t in nums]) :\n        return 0\n    ttt = 10**9+7\n    base = 1\n    tmp = -1\n    for c in nums :\n        if c == 1 :\n            if tmp > 0 :\n                base = (base * tmp) % ttt\n            tmp = 1\n        elif tmp >= 0 :\n            tmp += 1\n    return base\nprint ( numberOfGoodSubarraySplits ( [ 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 ] ) )",
    "execution_output": 30
  },
  {
    "id": 201,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t==0 for t in nums]) :\n        return 0\n    ttt = 10**9+7\n    base = 1\n    tmp = -1\n    for c in nums :\n        if c == 1 :\n            if tmp > 0 :\n                base = (base * tmp) % ttt\n            tmp = 1\n        elif tmp >= 0 :\n            tmp += 1\n    return base\nprint ( numberOfGoodSubarraySplits ( [ 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 ] ) )",
    "execution_output": 6
  },
  {
    "id": 202,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t==0 for t in nums]) :\n        return 0\n    ttt = 10**9+7\n    base = 1\n    tmp = -1\n    for c in nums :\n        if c == 1 :\n            if tmp > 0 :\n                base = (base * tmp) % ttt\n            tmp = 1\n        elif tmp >= 0 :\n            tmp += 1\n    return base\nprint ( numberOfGoodSubarraySplits ( [ 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 ] ) )",
    "execution_output": 6
  },
  {
    "id": 203,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t==0 for t in nums]) :\n        return 0\n    ttt = 10**9+7\n    base = 1\n    tmp = -1\n    for c in nums :\n        if c == 1 :\n            if tmp > 0 :\n                base = (base * tmp) % ttt\n            tmp = 1\n        elif tmp >= 0 :\n            tmp += 1\n    return base\nprint ( numberOfGoodSubarraySplits ( [ 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 ] ) )",
    "execution_output": 144
  },
  {
    "id": 204,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t==0 for t in nums]) :\n        return 0\n    ttt = 10**9+7\n    base = 1\n    tmp = -1\n    for c in nums :\n        if c == 1 :\n            if tmp > 0 :\n                base = (base * tmp) % ttt\n            tmp = 1\n        elif tmp >= 0 :\n            tmp += 1\n    return base\nprint ( numberOfGoodSubarraySplits ( [ 1 , 2 , 3 , 0 , 1 , 4 , 5 , 1 , 6 , 1 ] ) )",
    "execution_output": 24
  },
  {
    "id": 205,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    \n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    \n    for i in range(1, len(ones)):\n        ans = (ans * (ones[i] - ones[i - 1])) % MOD\n    \n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 2 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 5 , 0 , 0 , 1 ] ) )",
    "execution_output": 168
  },
  {
    "id": 206,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    \n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    \n    for i in range(1, len(ones)):\n        ans = (ans * (ones[i] - ones[i - 1])) % MOD\n    \n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 0 , 1 , - 5 , 0 , 0 , 1 , 234772 , 0 , 1 , 2 ] ) )",
    "execution_output": 12
  },
  {
    "id": 207,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    \n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    \n    for i in range(1, len(ones)):\n        ans = (ans * (ones[i] - ones[i - 1])) % MOD\n    \n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 2 , 2 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 ] ) )",
    "execution_output": 6
  },
  {
    "id": 208,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    \n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    \n    for i in range(1, len(ones)):\n        ans = (ans * (ones[i] - ones[i - 1])) % MOD\n    \n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 ] ) )",
    "execution_output": 60
  },
  {
    "id": 209,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    \n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    \n    for i in range(1, len(ones)):\n        ans = (ans * (ones[i] - ones[i - 1])) % MOD\n    \n    return ans\nprint ( numberOfGoodSubarraySplits ( [ 3 , 1 , 99 , 99 , 0 , 0 , 1 , - 7 , - 7 , - 7 , 0 , 1 , 0 , 0 , 2 ] ) )",
    "execution_output": 25
  },
  {
    "id": 210,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint ( numberOfGoodSubarraySplits ( [ 0 , 2 , 0 , 0 , - 3 , 0 , 5 , 0 , 0 , 1 ] ) )",
    "execution_output": 18
  },
  {
    "id": 211,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint ( numberOfGoodSubarraySplits ( [ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ] ) )",
    "execution_output": 32
  },
  {
    "id": 212,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint ( numberOfGoodSubarraySplits ( [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ) )",
    "execution_output": 40
  },
  {
    "id": 213,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint ( numberOfGoodSubarraySplits ( [ 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 ] ) )",
    "execution_output": 6
  },
  {
    "id": 214,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint ( numberOfGoodSubarraySplits ( [ 234772 , 0 , 0 , 3254323 , 0 , 1 , 0 , 0 , 0 , 2 ] ) )",
    "execution_output": 24
  },
  {
    "id": 215,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint ( continuousSubarrays ( [ 5 , 6 , 7 , 6 , 5 , 4 , 5 , 6 , 7 , 8 , 7 , 6 , 5 , 6 , 7 , 9 , 8 , 7 ] ) )",
    "execution_output": 63
  },
  {
    "id": 216,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint ( continuousSubarrays ( [ - 1 , 0 , 1 , 2 , 3 , 1 , 0 , - 1 , 2 , 3 , 4 , 2 , 1 , 0 , - 1 , 1 , 2 ] ) )",
    "execution_output": 45
  },
  {
    "id": 217,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint ( continuousSubarrays ( [ 100 , 101 , 102 , 101 , 100 , 99 , 100 , 101 , 103 , 102 , 101 , 100 , 99 , 98 , 99 , 100 ] ) )",
    "execution_output": 54
  },
  {
    "id": 218,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint ( continuousSubarrays ( [ 10 , 12 , 11 , 10 , 9 , 11 , 13 , 12 , 11 , 10 , 12 , 14 , 13 , 12 , 10 , 9 , 8 , 9 , 10 ] ) )",
    "execution_output": 58
  },
  {
    "id": 219,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint ( continuousSubarrays ( [ 0 , 2 , 1 , 3 , 2 , 4 , 2 , 1 , 3 , 5 , 4 , 3 , 2 , 1 , 0 , 2 , 4 ] ) )",
    "execution_output": 49
  },
  {
    "id": 220,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i-2]+h[i-1]+h[i]+h[i+1]+h[i+2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint ( continuousSubarrays ( [ 1 , 2 , 3 , 2 , 1 , 0 , 1 , 2 , 3 , 2 , 1 ] ) )",
    "execution_output": 39
  },
  {
    "id": 221,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i-2]+h[i-1]+h[i]+h[i+1]+h[i+2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint ( continuousSubarrays ( [ 5 , 5 , 6 , 5 , 4 , 5 , 6 , 6 , 5 , 4 , 4 , 5 ] ) )",
    "execution_output": 78
  },
  {
    "id": 222,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i-2]+h[i-1]+h[i]+h[i+1]+h[i+2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint ( continuousSubarrays ( [ 1 , 4 , 1 , 4 , 1 , 4 , 2 , 3 , 5 , 2 , 3 ] ) )",
    "execution_output": 16
  },
  {
    "id": 223,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i-2]+h[i-1]+h[i]+h[i+1]+h[i+2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint ( continuousSubarrays ( [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) )",
    "execution_output": 30
  },
  {
    "id": 224,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i-2]+h[i-1]+h[i]+h[i+1]+h[i+2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint ( continuousSubarrays ( [ - 2 , - 1 , 0 , 1 , 2 , 1 , 0 , - 1 , - 2 , - 1 , 0 , 3 , 0 , - 1 ] ) )",
    "execution_output": 40
  },
  {
    "id": 225,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = 0, 0\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0: del cnt[nums[l]]\n        l += 1\n    return ans\nprint ( continuousSubarrays ( [ 1 , 2 , 3 , 6 , 7 , 8 , 5 , 4 , 6 , 9 , 11 , 10 ] ) )",
    "execution_output": 24
  },
  {
    "id": 226,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = 0, 0\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0: del cnt[nums[l]]\n        l += 1\n    return ans\nprint ( continuousSubarrays ( [ 5 , 7 , 5 , 7 , 6 , 5 , 7 , 6 , 5 , 7 ] ) )",
    "execution_output": 55
  },
  {
    "id": 227,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = 0, 0\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0: del cnt[nums[l]]\n        l += 1\n    return ans\nprint ( continuousSubarrays ( [ 10 , 12 , 14 , 13 , 11 , 9 , 10 , 12 , 15 , 13 ] ) )",
    "execution_output": 20
  },
  {
    "id": 228,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = 0, 0\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0: del cnt[nums[l]]\n        l += 1\n    return ans\nprint ( continuousSubarrays ( [ - 2 , - 1 , 0 , 2 , 1 , 3 , 0 , - 1 , 1 ] ) )",
    "execution_output": 20
  },
  {
    "id": 229,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = 0, 0\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0: del cnt[nums[l]]\n        l += 1\n    return ans\nprint ( continuousSubarrays ( [ 100 , 100 , 100 , 101 , 101 , 102 , 103 , 103 , 104 , 104 , 102 , 101 , 100 ] ) )",
    "execution_output": 50
  },
  {
    "id": 230,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i +1\n    return ans\nprint ( continuousSubarrays ( [ 3 , 3 , 4 , 5 , 7 , 6 , 5 , 4 , 3 , 2 , 4 , 6 ] ) )",
    "execution_output": 34
  },
  {
    "id": 231,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i +1\n    return ans\nprint ( continuousSubarrays ( [ - 1 , 0 , 1 , 2 , 1 , 0 , - 1 , - 2 , - 1 , 0 , 2 , - 1 ] ) )",
    "execution_output": 36
  },
  {
    "id": 232,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i +1\n    return ans\nprint ( continuousSubarrays ( [ 10 , 11 , 11 , 12 , 13 , 13 , 12 , 11 , 10 , 9 , 10 , 11 , 14 , 13 ] ) )",
    "execution_output": 50
  },
  {
    "id": 233,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i +1\n    return ans\nprint ( continuousSubarrays ( [ 1000 , 1001 , 1002 , 1003 , 1002 , 1001 , 1000 , 2000 , 1001 , 1000 , 999 , 998 , 1000 ] ) )",
    "execution_output": 35
  },
  {
    "id": 234,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i +1\n    return ans\nprint ( continuousSubarrays ( [ 5 , 6 , 7 , 6 , 5 , 6 , 7 , 8 , 7 , 6 , 5 , 4 , 5 ] ) )",
    "execution_output": 50
  },
  {
    "id": 235,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1]*len(nums)\n    dp[0] = 0\n    for i in range(1,len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j]-nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j]+1 else dp[j]+1\n    return dp[-1]\nprint ( maximumJumps ( [ 1 , 3 , 6 , 4 , 7 , 10 , 8 , 12 ] , 3 ) )",
    "execution_output": 6
  },
  {
    "id": 236,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1]*len(nums)\n    dp[0] = 0\n    for i in range(1,len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j]-nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j]+1 else dp[j]+1\n    return dp[-1]\nprint ( maximumJumps ( [ 5 , 5 , 5 , 6 , 6 , 7 , 7 , 8 , 8 ] , 1 ) )",
    "execution_output": 8
  },
  {
    "id": 237,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1]*len(nums)\n    dp[0] = 0\n    for i in range(1,len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j]-nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j]+1 else dp[j]+1\n    return dp[-1]\nprint ( maximumJumps ( [ - 5 , - 3 , - 1 , 0 , 2 , 5 , 9 , 10 ] , 3 ) )",
    "execution_output": -1
  },
  {
    "id": 238,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1]*len(nums)\n    dp[0] = 0\n    for i in range(1,len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j]-nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j]+1 else dp[j]+1\n    return dp[-1]\nprint ( maximumJumps ( [ 10 , 7 , 13 , 9 , 12 , 8 , 11 , 15 , 14 ] , 4 ) )",
    "execution_output": 7
  },
  {
    "id": 239,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1]*len(nums)\n    dp[0] = 0\n    for i in range(1,len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j]-nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j]+1 else dp[j]+1\n    return dp[-1]\nprint ( maximumJumps ( [ 0 , 3 , 7 , 12 , 11 , 15 , 14 , 18 , 17 , 21 ] , 4 ) )",
    "execution_output": 8
  },
  {
    "id": 240,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1]*n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i+1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i]+1)\n    return dp[-1]\nprint ( maximumJumps ( [ 1 , 10 , 2 , 9 , 3 , 8 , 4 , 7 , 5 , 6 ] , 3 ) )",
    "execution_output": 6
  },
  {
    "id": 241,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1]*n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i+1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i]+1)\n    return dp[-1]\nprint ( maximumJumps ( [ 5 , 1 , 4 , 2 , 3 , 7 , 6 , 8 , 5 , 9 ] , 2 ) )",
    "execution_output": 4
  },
  {
    "id": 242,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1]*n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i+1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i]+1)\n    return dp[-1]\nprint ( maximumJumps ( [ - 5 , - 2 , - 4 , 0 , - 1 , 2 , 1 , 3 , 5 , 4 ] , 3 ) )",
    "execution_output": 8
  },
  {
    "id": 243,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1]*n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i+1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i]+1)\n    return dp[-1]\nprint ( maximumJumps ( [ 100 , 100 , 103 , 106 , 107 , 110 , 110 , 111 , 115 , 120 , 120 , 121 ] , 4 ) )",
    "execution_output": -1
  },
  {
    "id": 244,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1]*n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i+1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i]+1)\n    return dp[-1]\nprint ( maximumJumps ( [ 0 , 5 , 15 , 25 , 35 , 45 , 60 , 49 , 50 ] , 10 ) )",
    "execution_output": 7
  },
  {
    "id": 245,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint ( maximumJumps ( [ 5 , 8 , 6 , 9 , 7 , 10 , 8 , 11 , 9 , 12 ] , 2 ) )",
    "execution_output": -1
  },
  {
    "id": 246,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint ( maximumJumps ( [ - 5 , - 2 , - 4 , - 1 , 1 , 0 , 2 , 4 , 3 , 5 ] , 3 ) )",
    "execution_output": 9
  },
  {
    "id": 247,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint ( maximumJumps ( [ 0 , 3 , 1 , 4 , 2 , 5 , 3 , 6 , 4 , 7 , 5 ] , 2 ) )",
    "execution_output": 5
  },
  {
    "id": 248,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint ( maximumJumps ( [ 10 , 10 , 11 , 9 , 10 , 12 , 8 , 10 , 13 , 7 , 10 ] , 2 ) )",
    "execution_output": 7
  },
  {
    "id": 249,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint ( maximumJumps ( [ 1 , 3 , 5 , 7 , 9 , 12 , 15 , 18 , 22 , 27 ] , 2 ) )",
    "execution_output": -1
  },
  {
    "id": 250,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint ( maximumJumps ( [ 1 , 3 , 6 , 7 , 2 , 9 , 10 , 13 , 4 , 5 ] , 3 ) )",
    "execution_output": 5
  },
  {
    "id": 251,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint ( maximumJumps ( [ 5 , 5 , 5 , 5 , 5 , 5 ] , 0 ) )",
    "execution_output": 5
  },
  {
    "id": 252,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint ( maximumJumps ( [ - 10 , - 8 , - 6 , - 3 , 0 , 2 , 5 , 9 ] , 4 ) )",
    "execution_output": 7
  },
  {
    "id": 253,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint ( maximumJumps ( [ 0 , 10 , 1 , 11 , 2 , 12 , 3 , 13 , 4 ] , 2 ) )",
    "execution_output": 4
  },
  {
    "id": 254,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint ( maximumJumps ( [ 2 , 6 , 50 , 9 , 1 , 12 , 30 , 16 , 0 , 20 , 1000 , 23 ] , 4 ) )",
    "execution_output": 6
  },
  {
    "id": 255,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint ( maximumJumps ( [ 10 , 13 , 7 , 14 , 9 , 12 , 8 , 15 , 11 ] , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 256,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint ( maximumJumps ( [ - 5 , - 1 , - 4 , 2 , - 2 , 1 , 3 , - 3 , 0 , 4 ] , 3 ) )",
    "execution_output": 5
  },
  {
    "id": 257,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint ( maximumJumps ( [ 1 , 100 , 2 , 99 , 3 , 98 , 4 , 97 , 5 , 96 ] , 3 ) )",
    "execution_output": -1
  },
  {
    "id": 258,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint ( maximumJumps ( [ 5 , 9 , 1 , 6 , 2 , 7 , 3 , 12 , 4 , 8 , 10 , 11 ] , 4 ) )",
    "execution_output": 8
  },
  {
    "id": 259,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint ( maximumJumps ( [ 50 , 47 , 53 , 49 , 55 , 51 , 58 , 54 , 60 , 57 , 61 ] , 3 ) )",
    "execution_output": 5
  },
  {
    "id": 260,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint ( maximumJumps ( [ 2 , 5 , 4 , 6 , 7 , 3 , 5 , 8 ] , 2 ) )",
    "execution_output": 4
  },
  {
    "id": 261,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint ( maximumJumps ( [ 10 , 1 , 9 , 2 , 8 , 3 , 7 , 4 , 6 , 5 ] , 3 ) )",
    "execution_output": 6
  },
  {
    "id": 262,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint ( maximumJumps ( [ - 4 , - 1 , 2 , 0 , 3 , - 2 , 5 ] , 3 ) )",
    "execution_output": 5
  },
  {
    "id": 263,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint ( maximumJumps ( [ 100 , 98 , 95 , 97 , 96 , 99 , 101 , 100 ] , 2 ) )",
    "execution_output": 5
  },
  {
    "id": 264,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint ( maximumJumps ( [ 0 , 5 , 10 , 6 , 11 , 7 , 12 , 8 , 13 ] , 4 ) )",
    "execution_output": -1
  },
  {
    "id": 265,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (\n            max(a + 1 if nums1[i] >= nums1[i - 1] else 1,\n                b + 1 if nums1[i] >= nums2[i - 1] else 1),\n            max(a + 1 if nums2[i] >= nums1[i - 1] else 1,\n                b + 1 if nums2[i] >= nums2[i - 1] else 1),\n        )\n        y = max(y, a, b)\n    return y\nprint ( maxNonDecreasingLength ( [ 1 , 5 , 2 , 6 , 3 , 7 , 4 , 8 ] , [ 2 , 1 , 6 , 5 , 7 , 3 , 8 , 4 ] ) )",
    "execution_output": 8
  },
  {
    "id": 266,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (\n            max(a + 1 if nums1[i] >= nums1[i - 1] else 1,\n                b + 1 if nums1[i] >= nums2[i - 1] else 1),\n            max(a + 1 if nums2[i] >= nums1[i - 1] else 1,\n                b + 1 if nums2[i] >= nums2[i - 1] else 1),\n        )\n        y = max(y, a, b)\n    return y\nprint ( maxNonDecreasingLength ( [ 3 , 3 , 2 , 2 , 4 , 4 , 5 , 5 , 5 ] , [ 2 , 3 , 3 , 2 , 4 , 5 , 4 , 5 , 6 ] ) )",
    "execution_output": 7
  },
  {
    "id": 267,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (\n            max(a + 1 if nums1[i] >= nums1[i - 1] else 1,\n                b + 1 if nums1[i] >= nums2[i - 1] else 1),\n            max(a + 1 if nums2[i] >= nums1[i - 1] else 1,\n                b + 1 if nums2[i] >= nums2[i - 1] else 1),\n        )\n        y = max(y, a, b)\n    return y\nprint ( maxNonDecreasingLength ( [ 4 , 1 , 5 , 2 , 6 , 3 , 7 , 0 , 8 , 9 ] , [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 7 , 8 , 10 ] ) )",
    "execution_output": 10
  },
  {
    "id": 268,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (\n            max(a + 1 if nums1[i] >= nums1[i - 1] else 1,\n                b + 1 if nums1[i] >= nums2[i - 1] else 1),\n            max(a + 1 if nums2[i] >= nums1[i - 1] else 1,\n                b + 1 if nums2[i] >= nums2[i - 1] else 1),\n        )\n        y = max(y, a, b)\n    return y\nprint ( maxNonDecreasingLength ( [ 5 , 7 , 1 , 4 , 6 , 2 , 3 , 8 , 9 ] , [ 6 , 5 , 2 , 7 , 1 , 4 , 9 , 3 , 10 ] ) )",
    "execution_output": 5
  },
  {
    "id": 269,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (\n            max(a + 1 if nums1[i] >= nums1[i - 1] else 1,\n                b + 1 if nums1[i] >= nums2[i - 1] else 1),\n            max(a + 1 if nums2[i] >= nums1[i - 1] else 1,\n                b + 1 if nums2[i] >= nums2[i - 1] else 1),\n        )\n        y = max(y, a, b)\n    return y\nprint ( maxNonDecreasingLength ( [ 2 , 4 , 3 , 5 , 7 , 6 , 8 , 10 , 9 , 11 ] , [ 3 , 2 , 5 , 4 , 6 , 8 , 7 , 9 , 10 , 12 ] ) )",
    "execution_output": 10
  },
  {
    "id": 270,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = x, y, t1, t2\n    return ans\nprint ( maxNonDecreasingLength ( [ 1 , 5 , 3 , 7 , 9 , 10 , 2 , 6 , 8 , 12 ] , [ 2 , 3 , 4 , 8 , 6 , 11 , 5 , 7 , 9 , 13 ] ) )",
    "execution_output": 6
  },
  {
    "id": 271,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = x, y, t1, t2\n    return ans\nprint ( maxNonDecreasingLength ( [ 4 , 4 , 1 , 2 , 3 , 3 , 5 , 5 , 6 , 1 ] , [ 3 , 4 , 2 , 2 , 4 , 5 , 5 , 6 , 7 , 2 ] ) )",
    "execution_output": 7
  },
  {
    "id": 272,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = x, y, t1, t2\n    return ans\nprint ( maxNonDecreasingLength ( [ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0 ] , [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) )",
    "execution_output": 10
  },
  {
    "id": 273,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = x, y, t1, t2\n    return ans\nprint ( maxNonDecreasingLength ( [ 10 , 1 , 10 , 1 , 10 , 1 , 10 , 1 , 10 , 1 ] , [ 1 , 10 , 1 , 10 , 1 , 10 , 1 , 10 , 1 , 10 ] ) )",
    "execution_output": 10
  },
  {
    "id": 274,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = x, y, t1, t2\n    return ans\nprint ( maxNonDecreasingLength ( [ - 1 , 2 , - 2 , 3 , - 3 , 4 , - 4 , 5 , - 5 , 6 ] , [ 0 , 1 , 0 , 2 , 0 , 3 , 0 , 4 , 0 , 5 ] ) )",
    "execution_output": 2
  },
  {
    "id": 275,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint ( checkArray ( [ 1 , 1 , 3 , 3 , 3 , 4 , 3 , 4 , 1 , 1 ] , 3 ) )",
    "execution_output": true
  },
  {
    "id": 276,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint ( checkArray ( [ 2 , 2 , 3 , 6 , 4 , 4 , 5 , 3 , 3 , 3 , 1 , 0 ] , 4 ) )",
    "execution_output": true
  },
  {
    "id": 277,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint ( checkArray ( [ 1 , 2 , 3 , 4 , 5 , 1 , 0 , 2 , 1 ] , 4 ) )",
    "execution_output": false
  },
  {
    "id": 278,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint ( checkArray ( [ 2 , 3 , 1 , 2 , 0 , 1 , 4 ] , 3 ) )",
    "execution_output": false
  },
  {
    "id": 279,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint ( checkArray ( [ 1 , 1 , 3 , 4 , 1 , 2 , 2 , 1 , 1 ] , 2 ) )",
    "execution_output": true
  },
  {
    "id": 280,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint ( checkArray ( [ 1 , 1 , 3 , 3 , 3 , 4 , 3 , 4 , 1 , 1 ] , 3 ) )",
    "execution_output": true
  },
  {
    "id": 281,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint ( checkArray ( [ 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 2 ] , 4 ) )",
    "execution_output": false
  },
  {
    "id": 282,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint ( checkArray ( [ 3 , 3 , 2 , 3 , 1 , 4 , 6 , 2 , 0 , 1 , 6 , 5 ] , 2 ) )",
    "execution_output": true
  },
  {
    "id": 283,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint ( checkArray ( [ 0 , 2 , 3 , 3 , 6 , 6 , 6 , 7 , 7 , 5 , 9 , 7 , 5 , 5 , 4 ] , 5 ) )",
    "execution_output": true
  },
  {
    "id": 284,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint ( checkArray ( [ 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ] , 3 ) )",
    "execution_output": false
  },
  {
    "id": 285,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n        \n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        \n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    \n    n = len(set(queue))\n    return n == 1\nprint ( checkArray ( [ 1 , 2 , 3 , 4 , 3 , 2 ] , 3 ) )",
    "execution_output": true
  },
  {
    "id": 286,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n        \n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        \n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    \n    n = len(set(queue))\n    return n == 1\nprint ( checkArray ( [ - 1 , 5 , 6 , 7 , 1 , 2 , 3 ] , 4 ) )",
    "execution_output": false
  },
  {
    "id": 287,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n        \n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        \n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    \n    n = len(set(queue))\n    return n == 1\nprint ( checkArray ( [ 1 , 2 , 3 , - 10 , 100 , 1000 , 0 ] , 3 ) )",
    "execution_output": false
  },
  {
    "id": 288,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n        \n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        \n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    \n    n = len(set(queue))\n    return n == 1\nprint ( checkArray ( [ 0 , 1 , 1 , 2 , 3 , 5 , 4 , 4 , 3 , 2 ] , 5 ) )",
    "execution_output": true
  },
  {
    "id": 289,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n        \n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        \n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    \n    n = len(set(queue))\n    return n == 1\nprint ( checkArray ( [ 1 , 5 , - 10 , 0 , 0 ] , 2 ) )",
    "execution_output": false
  },
  {
    "id": 290,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint ( checkArray ( [ 1 , 1 , 3 , 3 , 3 , 4 , 3 , 3 ] , 3 ) )",
    "execution_output": true
  },
  {
    "id": 291,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint ( checkArray ( [ 0 , 0 , 0 , 0 , 0 , 1 , 1 ] , 3 ) )",
    "execution_output": false
  },
  {
    "id": 292,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint ( checkArray ( [ 0 , 5 , 6 , 6 , 9 , 6 , 5 , 5 , 2 , 0 ] , 4 ) )",
    "execution_output": true
  },
  {
    "id": 293,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint ( checkArray ( [ 2 , 5 , 5 , 5 , 5 , 3 ] , 5 ) )",
    "execution_output": true
  },
  {
    "id": 294,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint ( checkArray ( [ 2 , 0 , 1 , 0 , 2 ] , 3 ) )",
    "execution_output": false
  },
  {
    "id": 295,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0]*(len(nums)+1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i+k >= len(nums)+1:\n                return False\n            diff[i+k] -= nums[i]-curr\n            curr = nums[i]\n    return True\nprint ( checkArray ( [ 1 , 3 , 3 , 5 , 4 , 4 , 3 , 2 , 2 , 0 ] , 3 ) )",
    "execution_output": true
  },
  {
    "id": 296,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0]*(len(nums)+1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i+k >= len(nums)+1:\n                return False\n            diff[i+k] -= nums[i]-curr\n            curr = nums[i]\n    return True\nprint ( checkArray ( [ 2 , 2 , 3 , 6 , 5 , 5 , 4 , 2 ] , 4 ) )",
    "execution_output": false
  },
  {
    "id": 297,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0]*(len(nums)+1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i+k >= len(nums)+1:\n                return False\n            diff[i+k] -= nums[i]-curr\n            curr = nums[i]\n    return True\nprint ( checkArray ( [ 1 , 1 , 3 , 5 , 2 , 1 , 1 , 0 , 2 , 2 ] , 2 ) )",
    "execution_output": true
  },
  {
    "id": 298,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0]*(len(nums)+1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i+k >= len(nums)+1:\n                return False\n            diff[i+k] -= nums[i]-curr\n            curr = nums[i]\n    return True\nprint ( checkArray ( [ 1 , 3 , 3 , 5 , 2 , 4 , 3 , 2 , 2 , 0 ] , 3 ) )",
    "execution_output": false
  },
  {
    "id": 299,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0]*(len(nums)+1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i+k >= len(nums)+1:\n                return False\n            diff[i+k] -= nums[i]-curr\n            curr = nums[i]\n    return True\nprint ( checkArray ( [ 1 , 1 , 3 , 4 , 4 , 6 , 7 , 5 , 4 , 4 , 1 , 0 ] , 5 ) )",
    "execution_output": true
  },
  {
    "id": 300,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    \n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        \n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        \n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n            \n    return max(nums) == 0\nprint ( checkArray ( [ 2 , 2 , 3 , 4 , 4 , 5 , 2 , 2 ] , 3 ) )",
    "execution_output": true
  },
  {
    "id": 301,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    \n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        \n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        \n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n            \n    return max(nums) == 0\nprint ( checkArray ( [ 1 , 2 , 1 , 2 , 1 , 2 , 1 ] , 3 ) )",
    "execution_output": false
  },
  {
    "id": 302,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    \n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        \n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        \n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n            \n    return max(nums) == 0\nprint ( checkArray ( [ 1 , 1 , 1 , 0 , 1 ] , 3 ) )",
    "execution_output": false
  },
  {
    "id": 303,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    \n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        \n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        \n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n            \n    return max(nums) == 0\nprint ( checkArray ( [ 3 , 3 , 1 , 3 , 6 , 4 ] , 2 ) )",
    "execution_output": true
  },
  {
    "id": 304,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    \n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        \n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        \n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n            \n    return max(nums) == 0\nprint ( checkArray ( [ 2 , 3 , 3 , 6 , 6 , 6 , 6 , 3 , 1 ] , 4 ) )",
    "execution_output": true
  },
  {
    "id": 305,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint ( maximumBeauty ( [ 1 , 4 , 6 , 7 , 8 , 12 , 13 , 14 , 20 , 21 , 22 , 35 ] , 4 ) )",
    "execution_output": 6
  },
  {
    "id": 306,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint ( maximumBeauty ( [ - 15 , - 10 , - 3 , - 2 , 0 , 1 , 5 , 9 , 11 , 12 ] , 5 ) )",
    "execution_output": 5
  },
  {
    "id": 307,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint ( maximumBeauty ( [ 10 , 10 , 10 , 10 , 11 , 12 , 20 , 20 , 21 , 22 , 22 , 22 , 23 ] , 1 ) )",
    "execution_output": 6
  },
  {
    "id": 308,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint ( maximumBeauty ( [ 100 , 102 , 103 , 150 , 151 , 152 , 153 , 200 , 201 , 205 , 206 , 207 , 300 ] , 2 ) )",
    "execution_output": 4
  },
  {
    "id": 309,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint ( maximumBeauty ( [ 1 , 2 , 3 , 50 , 51 , 52 , 53 , 54 , 100 , 101 , 102 , 103 , 104 , 200 , 202 , 204 ] , 3 ) )",
    "execution_output": 5
  },
  {
    "id": 310,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint ( maximumBeauty ( [ 1 , 2 , 2 , 3 , 10 , 11 , 12 , 13 , 20 , 21 , 23 , 24 , 24 , 30 , 31 , 31 , 33 ] , 5 ) )",
    "execution_output": 7
  },
  {
    "id": 311,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint ( maximumBeauty ( [ 0 , 5 , 10 , 16 , 21 , 27 , 32 , 48 , 49 ] , 8 ) )",
    "execution_output": 4
  },
  {
    "id": 312,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint ( maximumBeauty ( [ - 15 , - 14 , - 10 , - 9 , - 1 , 0 , 1 , 7 , 8 , 9 , 20 ] , 5 ) )",
    "execution_output": 6
  },
  {
    "id": 313,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint ( maximumBeauty ( [ 100 , 100 , 100 , 100 , 100 , 100 , 100 , 101 , 101 , 101 , 101 , 101 , 102 , 102 , 102 , 300 , 301 , 1000 ] , 1 ) )",
    "execution_output": 15
  },
  {
    "id": 314,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint ( maximumBeauty ( [ 234700 , 234720 , 234772 , 234800 , 500000 , 500010 , 999999 , 1000100 , 3254300 , 3254323 , 3254500 ] , 150 ) )",
    "execution_output": 4
  },
  {
    "id": 315,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint ( maximumBeauty ( [ 10 , 1 , 14 , 3 , 8 , 20 , 2 , 9 , 15 , 7 , 13 , 4 , 6 , 12 , 5 , 11 , 16 , 19 , 18 , 17 ] , 2 ) )",
    "execution_output": 5
  },
  {
    "id": 316,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint ( maximumBeauty ( [ - 2000 , - 1000 , - 999 , - 998 , - 997 , - 996 , - 995 , 3000 , 1000 , 1001 , 1002 , 1003 , 1004 , 1005 ] , 3 ) )",
    "execution_output": 6
  },
  {
    "id": 317,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint ( maximumBeauty ( [ 5 , 5 , 5 , 6 , 6 , 7 , 7 , 100 , 101 , 102 , 103 , 104 , 104 , 104 , 200 , 200 , 201 , 202 ] , 3 ) )",
    "execution_output": 7
  },
  {
    "id": 318,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint ( maximumBeauty ( [ 0 , 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 ] , 15 ) )",
    "execution_output": 4
  },
  {
    "id": 319,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint ( maximumBeauty ( [ - 10 , - 8 , - 7 , - 3 , 0 , 2 , 5 , 9 , 12 ] , 4 ) )",
    "execution_output": 4
  },
  {
    "id": 320,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i]-nums[i0] > 2*k:\n            i0+=1\n        answer = max(answer, i-i0+1)\n    return answer\nprint ( maximumBeauty ( [ - 10 , - 5 , - 3 , 0 , 1 , 4 , 7 , 8 , 12 , 13 ] , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 321,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i]-nums[i0] > 2*k:\n            i0+=1\n        answer = max(answer, i-i0+1)\n    return answer\nprint ( maximumBeauty ( [ 5 , 5 , 5 , 6 , 7 , 9 , 10 , 10 , 11 , 12 , 14 , 14 , 15 , 16 , 18 , 18 , 19 ] , 2 ) )",
    "execution_output": 6
  },
  {
    "id": 322,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i]-nums[i0] > 2*k:\n            i0+=1\n        answer = max(answer, i-i0+1)\n    return answer\nprint ( maximumBeauty ( [ 0 , 3 , 6 , 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 , 36 , 39 , 42 , 45 , 48 , 51 , 54 , 57 ] , 2 ) )",
    "execution_output": 2
  },
  {
    "id": 323,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i]-nums[i0] > 2*k:\n            i0+=1\n        answer = max(answer, i-i0+1)\n    return answer\nprint ( maximumBeauty ( [ 1 , 100 , 2 , 99 , 3 , 98 , 4 , 97 , 5 , 96 , 6 , 95 , 7 , 94 , 8 , 93 , 9 , 92 , 10 , 91 ] , 2 ) )",
    "execution_output": 5
  },
  {
    "id": 324,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i]-nums[i0] > 2*k:\n            i0+=1\n        answer = max(answer, i-i0+1)\n    return answer\nprint ( maximumBeauty ( [ 100 , 101 , 102 , 103 , 104 , 105 , 300 , 1000 , 1001 , 1002 , 1003 , 1004 , 1500 , 1501 , 1502 , 1503 , 1504 ] , 3 ) )",
    "execution_output": 6
  },
  {
    "id": 325,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint ( maximumBeauty ( [ 12 , 1 , 14 , 7 , 9 , 20 , 19 , 18 , 17 , 16 , 15 ] , 2 ) )",
    "execution_output": 5
  },
  {
    "id": 326,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint ( maximumBeauty ( [ 5 , 5 , 5 , 5 , 6 , 6 , 7 , 7 , 8 , 8 , 9 , 10 , 10 , 11 , 12 ] , 1 ) )",
    "execution_output": 8
  },
  {
    "id": 327,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint ( maximumBeauty ( [ - 4 , - 2 , - 1 , 0 , 1 , 3 , 4 ] , 2 ) )",
    "execution_output": 4
  },
  {
    "id": 328,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint ( maximumBeauty ( [ 1 , 2 , 3 , 4 , 100 , 101 , 102 , 103 , 104 , 105 ] , 50 ) )",
    "execution_output": 6
  },
  {
    "id": 329,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint ( maximumBeauty ( [ 2 , 9 , 4 , 1 , 8 , 3 , 7 , 6 , 5 , 10 , 13 , 12 , 11 ] , 3 ) )",
    "execution_output": 7
  },
  {
    "id": 330,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    \n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2*k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint ( maximumBeauty ( [ - 10 , - 7 , - 3 , - 1 , 2 , 5 , 8 , 13 , 14 ] , 4 ) )",
    "execution_output": 4
  },
  {
    "id": 331,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    \n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2*k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint ( maximumBeauty ( [ 5 , 5 , 5 , 6 , 7 , 7 , 10 , 10 , 10 , 11 , 12 ] , 2 ) )",
    "execution_output": 6
  },
  {
    "id": 332,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    \n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2*k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint ( maximumBeauty ( [ 1 , 10 , 2 , 11 , 3 , 12 , 4 , 13 ] , 4 ) )",
    "execution_output": 4
  },
  {
    "id": 333,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    \n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2*k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint ( maximumBeauty ( [ 100 , 102 , 105 , 115 , 117 , 120 , 130 , 131 , 133 ] , 7 ) )",
    "execution_output": 4
  },
  {
    "id": 334,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    \n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2*k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint ( maximumBeauty ( [ 1 , 4 , 7 , 10 , 13 , 16 , 19 , 22 , 25 , 28 , 31 , 34 , 37 , 40 , 43 , 46 , 49 , 52 , 55 , 58 ] , 5 ) )",
    "execution_output": 4
  },
  {
    "id": 335,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key = lambda y: counts[y])\n    \n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        \n        left = i + 1\n        right = len(nums) - i - 1\n        \n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n        \n    return -1\nprint ( minimumIndex ( [ 1 , 2 , 7 , 1 , 7 , 7 , 7 , 7 , 3 , 7 ] ) )",
    "execution_output": 6
  },
  {
    "id": 336,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key = lambda y: counts[y])\n    \n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        \n        left = i + 1\n        right = len(nums) - i - 1\n        \n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n        \n    return -1\nprint ( minimumIndex ( [ 1 , 5 , 5 , 5 , 2 , 5 , 3 , 5 ] ) )",
    "execution_output": 2
  },
  {
    "id": 337,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key = lambda y: counts[y])\n    \n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        \n        left = i + 1\n        right = len(nums) - i - 1\n        \n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n        \n    return -1\nprint ( minimumIndex ( [ 2 , 1 , 2 , 2 , 3 , 2 , 4 , 2 , 5 ] ) )",
    "execution_output": -1
  },
  {
    "id": 338,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key = lambda y: counts[y])\n    \n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        \n        left = i + 1\n        right = len(nums) - i - 1\n        \n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n        \n    return -1\nprint ( minimumIndex ( [ 9 , 8 , 9 , 8 , 9 , 8 , 9 , 8 , 9 , 8 ] ) )",
    "execution_output": -1
  },
  {
    "id": 339,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key = lambda y: counts[y])\n    \n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        \n        left = i + 1\n        right = len(nums) - i - 1\n        \n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n        \n    return -1\nprint ( minimumIndex ( [ - 1 , 0 , 0 , 0 , - 2 , 0 , 0 , 3 , 0 ] ) )",
    "execution_output": 2
  },
  {
    "id": 340,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = 0, 0\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint ( minimumIndex ( [ 5 , 5 , 5 , 1 , 2 , 2 , 1 , 5 , 5 , 5 ] ) )",
    "execution_output": 0
  },
  {
    "id": 341,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = 0, 0\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint ( minimumIndex ( [ 9 , 9 , 1 , 2 , 2 , 9 , 9 , 9 ] ) )",
    "execution_output": 0
  },
  {
    "id": 342,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = 0, 0\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint ( minimumIndex ( [ 4 , - 1 , 4 , 4 , 2 , 4 , - 3 , 4 , 4 ] ) )",
    "execution_output": 0
  },
  {
    "id": 343,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = 0, 0\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint ( minimumIndex ( [ 2 , 2 , 2 , 2 , 1 , 3 , 4 , 5 , 2 , 2 , 2 ] ) )",
    "execution_output": 0
  },
  {
    "id": 344,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = 0, 0\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint ( minimumIndex ( [ 1 , 9 , 9 , 9 , 9 , 3 , 4 ] ) )",
    "execution_output": -1
  },
  {
    "id": 345,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > (n - i - 1):\n            return i\n    return -1\nprint ( minimumIndex ( [ 1 , 2 , 1 , 1 , 3 , 1 , 4 ] ) )",
    "execution_output": -1
  },
  {
    "id": 346,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > (n - i - 1):\n            return i\n    return -1\nprint ( minimumIndex ( [ 2 , 2 , 3 , 2 , 4 , 2 , 5 , 2 , 2 ] ) )",
    "execution_output": 0
  },
  {
    "id": 347,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > (n - i - 1):\n            return i\n    return -1\nprint ( minimumIndex ( [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 ] ) )",
    "execution_output": -1
  },
  {
    "id": 348,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > (n - i - 1):\n            return i\n    return -1\nprint ( minimumIndex ( [ 5 , 6 , 5 , 6 , 5 , 7 , 5 , 8 , 5 ] ) )",
    "execution_output": -1
  },
  {
    "id": 349,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > (n - i - 1):\n            return i\n    return -1\nprint ( minimumIndex ( [ - 1 , - 1 , 0 , - 1 , 2 , - 1 , 3 , - 1 ] ) )",
    "execution_output": 0
  },
  {
    "id": 350,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max((v, k) for k, v in c.items())[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    \n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0: return i\n    return -1\nprint ( minimumIndex ( [ 3 , 3 , 1 , 3 , 2 , 3 , 3 , 4 , 3 ] ) )",
    "execution_output": 0
  },
  {
    "id": 351,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max((v, k) for k, v in c.items())[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    \n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0: return i\n    return -1\nprint ( minimumIndex ( [ 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 ] ) )",
    "execution_output": 10
  },
  {
    "id": 352,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max((v, k) for k, v in c.items())[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    \n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0: return i\n    return -1\nprint ( minimumIndex ( [ - 2 , - 1 , - 1 , - 3 , - 1 , 4 , - 1 , - 1 , 5 , - 1 , - 1 ] ) )",
    "execution_output": 2
  },
  {
    "id": 353,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max((v, k) for k, v in c.items())[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    \n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0: return i\n    return -1\nprint ( minimumIndex ( [ 99 , 234772 , 5 , 234772 , 7 , 234772 , 9 , 234772 , 234772 , 234772 , 11 , 234772 , 13 , 234772 ] ) )",
    "execution_output": 8
  },
  {
    "id": 354,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max((v, k) for k, v in c.items())[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    \n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0: return i\n    return -1\nprint ( minimumIndex ( [ 7 , 7 , 7 , 7 , 7 , 1 , 2 , 3 , 4 ] ) )",
    "execution_output": -1
  },
  {
    "id": 355,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i]*2>len(nums):dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums)-upto\n        if other[dom]*2>upto and dct[dom]*2>la:return upto-1\n    return -1\nprint ( minimumIndex ( [ 7 , 7 , 7 , 7 , 7 , 1 , 2 , 3 , 4 , 7 , 7 , 7 ] ) )",
    "execution_output": 0
  },
  {
    "id": 356,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i]*2>len(nums):dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums)-upto\n        if other[dom]*2>upto and dct[dom]*2>la:return upto-1\n    return -1\nprint ( minimumIndex ( [ 1 , 2 , 3 , 4 , 5 , 9 , 6 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 8 ] ) )",
    "execution_output": -1
  },
  {
    "id": 357,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i]*2>len(nums):dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums)-upto\n        if other[dom]*2>upto and dct[dom]*2>la:return upto-1\n    return -1\nprint ( minimumIndex ( [ 5 , 5 , 1 , 2 , 5 , 3 , 5 , 4 , 5 , 6 , 5 , 7 , 5 ] ) )",
    "execution_output": -1
  },
  {
    "id": 358,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i]*2>len(nums):dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums)-upto\n        if other[dom]*2>upto and dct[dom]*2>la:return upto-1\n    return -1\nprint ( minimumIndex ( [ 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 2 ] ) )",
    "execution_output": 0
  },
  {
    "id": 359,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i]*2>len(nums):dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums)-upto\n        if other[dom]*2>upto and dct[dom]*2>la:return upto-1\n    return -1\nprint ( minimumIndex ( [ 234772 , 1 , 234772 , 2 , 234772 , 3 , 234772 , 4 , 234772 , 234772 ] ) )",
    "execution_output": 0
  },
  {
    "id": 360,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums) \n    C = Counter(nums)\n    m = max(C.values()) \n\n    if n >= m * 2: return -1\n    x = 0\n    for t in C: \n        if C[t] == m: x = t \n    print(n,m,x)\n    c = 0 \n    for i,y in enumerate(nums):\n        c += y == x \n        if c * 2 > i + 1:\n            if (C[x]-c) * 2 > n - (i+1):\n                return i \n    return -1\nprint ( minimumIndex ( [ 1 , 3 , 2 , 3 , 3 , 1 , 3 , 2 , 3 , 3 ] ) )",
    "execution_output": 4
  },
  {
    "id": 361,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums) \n    C = Counter(nums)\n    m = max(C.values()) \n\n    if n >= m * 2: return -1\n    x = 0\n    for t in C: \n        if C[t] == m: x = t \n    print(n,m,x)\n    c = 0 \n    for i,y in enumerate(nums):\n        c += y == x \n        if c * 2 > i + 1:\n            if (C[x]-c) * 2 > n - (i+1):\n                return i \n    return -1\nprint ( minimumIndex ( [ - 1 , 0 , - 1 , 2 , - 1 , - 1 , 3 , - 1 , 4 ] ) )",
    "execution_output": -1
  },
  {
    "id": 362,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums) \n    C = Counter(nums)\n    m = max(C.values()) \n\n    if n >= m * 2: return -1\n    x = 0\n    for t in C: \n        if C[t] == m: x = t \n    print(n,m,x)\n    c = 0 \n    for i,y in enumerate(nums):\n        c += y == x \n        if c * 2 > i + 1:\n            if (C[x]-c) * 2 > n - (i+1):\n                return i \n    return -1\nprint ( minimumIndex ( [ 1 , 9 , 9 , 2 , 9 , 3 , 9 , 4 , 9 , 9 , 9 ] ) )",
    "execution_output": 2
  },
  {
    "id": 363,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums) \n    C = Counter(nums)\n    m = max(C.values()) \n\n    if n >= m * 2: return -1\n    x = 0\n    for t in C: \n        if C[t] == m: x = t \n    print(n,m,x)\n    c = 0 \n    for i,y in enumerate(nums):\n        c += y == x \n        if c * 2 > i + 1:\n            if (C[x]-c) * 2 > n - (i+1):\n                return i \n    return -1\nprint ( minimumIndex ( [ 5 , 0 , 0 , 0 , 1 , 0 , 2 , 0 , 0 ] ) )",
    "execution_output": 2
  },
  {
    "id": 364,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums) \n    C = Counter(nums)\n    m = max(C.values()) \n\n    if n >= m * 2: return -1\n    x = 0\n    for t in C: \n        if C[t] == m: x = t \n    print(n,m,x)\n    c = 0 \n    for i,y in enumerate(nums):\n        c += y == x \n        if c * 2 > i + 1:\n            if (C[x]-c) * 2 > n - (i+1):\n                return i \n    return -1\nprint ( minimumIndex ( [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ] ) )",
    "execution_output": -1
  },
  {
    "id": 365,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = 0, 0\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint ( maxIncreasingGroups ( [ 2 , 1 , 3 , 2 , 4 , 1 ] ) )",
    "execution_output": 4
  },
  {
    "id": 366,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = 0, 0\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint ( maxIncreasingGroups ( [ 5 , 1 , 2 , 10 , 2 , 3 , 6 ] ) )",
    "execution_output": 6
  },
  {
    "id": 367,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = 0, 0\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint ( maxIncreasingGroups ( [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 5 ] ) )",
    "execution_output": 6
  },
  {
    "id": 368,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = 0, 0\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint ( maxIncreasingGroups ( [ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ] ) )",
    "execution_output": 9
  },
  {
    "id": 369,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = 0, 0\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint ( maxIncreasingGroups ( [ 2 , 2 , 2 , 3 , 3 , 5 , 8 , 13 ] ) )",
    "execution_output": 7
  },
  {
    "id": 370,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n\n        a = (total * 2 // k - k - 1) // 2\n        while ((a + 1) + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint ( maxIncreasingGroups ( [ 3 , 1 , 2 , 2 , 5 , 7 , 1 , 4 , 6 , 3 , 2 ] ) )",
    "execution_output": 8
  },
  {
    "id": 371,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n\n        a = (total * 2 // k - k - 1) // 2\n        while ((a + 1) + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint ( maxIncreasingGroups ( [ 1 , 1 , 2 , 2 , 2 , 5 , 5 , 9 , 9 , 10 , 10 , 10 , 15 , 20 , 25 , 30 ] ) )",
    "execution_output": 14
  },
  {
    "id": 372,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n\n        a = (total * 2 // k - k - 1) // 2\n        while ((a + 1) + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint ( maxIncreasingGroups ( [ 2 , 2 , 2 , 2 , 1 , 1 , 1 , 3 , 3 , 3 , 4 , 4 , 5 , 6 , 7 , 8 , 9 ] ) )",
    "execution_output": 10
  },
  {
    "id": 373,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n\n        a = (total * 2 // k - k - 1) // 2\n        while ((a + 1) + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint ( maxIncreasingGroups ( [ 10 , 9 , 9 , 8 , 8 , 7 , 7 , 6 , 6 , 5 , 5 , 4 , 4 , 3 , 3 , 2 , 2 , 1 , 1 ] ) )",
    "execution_output": 13
  },
  {
    "id": 374,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n\n        a = (total * 2 // k - k - 1) // 2\n        while ((a + 1) + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint ( maxIncreasingGroups ( [ 1 , 3 , 4 , 6 , 7 , 9 , 10 , 12 , 13 , 15 , 16 , 18 , 20 , 21 , 23 , 24 , 27 , 28 ] ) )",
    "execution_output": 18
  },
  {
    "id": 375,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint ( maxIncreasingGroups ( [ 3 , 1 , 2 , 2 , 5 , 5 , 7 , 8 , 13 , 21 , 34 , 34 ] ) )",
    "execution_output": 11
  },
  {
    "id": 376,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint ( maxIncreasingGroups ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) )",
    "execution_output": 10
  },
  {
    "id": 377,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint ( maxIncreasingGroups ( [ 100 , 1 , 99 , 2 , 98 , 3 , 97 , 4 , 96 , 5 , 95 , 6 ] ) )",
    "execution_output": 12
  },
  {
    "id": 378,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint ( maxIncreasingGroups ( [ 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 ] ) )",
    "execution_output": 12
  },
  {
    "id": 379,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint ( maxIncreasingGroups ( [ 12 , 3 , 25 , 7 , 14 , 9 , 18 , 3 , 11 , 20 , 6 , 17 , 4 , 15 , 10 ] ) )",
    "execution_output": 15
  },
  {
    "id": 380,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = 1, len(usageLimits)\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint ( maxIncreasingGroups ( [ 5 , 3 , 9 , 1 , 4 , 7 , 2 , 6 , 8 , 5 , 11 , 13 , 12 , 10 , 14 ] ) )",
    "execution_output": 14
  },
  {
    "id": 381,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = 1, len(usageLimits)\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint ( maxIncreasingGroups ( [ 10 , 10 , 10 , 9 , 9 , 8 , 8 , 8 , 7 , 7 , 7 , 6 , 6 , 5 , 5 , 5 , 4 , 3 , 3 , 2 , 2 , 1 , 1 ] ) )",
    "execution_output": 16
  },
  {
    "id": 382,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = 1, len(usageLimits)\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint ( maxIncreasingGroups ( [ 1 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 5 , 5 , 6 , 7 , 8 ] ) )",
    "execution_output": 10
  },
  {
    "id": 383,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = 1, len(usageLimits)\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint ( maxIncreasingGroups ( [ 20 , 0 , 15 , 0 , 10 , 5 , 0 , 25 , 0 , 5 , 12 , 0 , 7 , 3 , 9 ] ) )",
    "execution_output": 10
  },
  {
    "id": 384,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = 1, len(usageLimits)\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint ( maxIncreasingGroups ( [ 6 , 5 , 5 , 4 , 4 , 4 , 3 , 3 , 3 , 3 , 2 , 2 , 2 , 2 , 2 ] ) )",
    "execution_output": 9
  },
  {
    "id": 385,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    \n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n        \n    ans = 0\n    \n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n            \n    return ans\nprint ( maxIncreasingGroups ( [ 3 , 1 , 2 , 5 , 2 , 4 , 1 ] ) )",
    "execution_output": 5
  },
  {
    "id": 386,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    \n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n        \n    ans = 0\n    \n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n            \n    return ans\nprint ( maxIncreasingGroups ( [ 10 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ) )",
    "execution_output": 4
  },
  {
    "id": 387,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    \n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n        \n    ans = 0\n    \n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n            \n    return ans\nprint ( maxIncreasingGroups ( [ 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 ] ) )",
    "execution_output": 8
  },
  {
    "id": 388,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    \n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n        \n    ans = 0\n    \n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n            \n    return ans\nprint ( maxIncreasingGroups ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) )",
    "execution_output": 9
  },
  {
    "id": 389,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    \n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n        \n    ans = 0\n    \n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n            \n    return ans\nprint ( maxIncreasingGroups ( [ 2 , 2 , 2 , 100 , 1 , 1 , 1 ] ) )",
    "execution_output": 4
  },
  {
    "id": 390,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint ( countCompleteSubarrays ( [ 1 , 2 , 1 , 3 , 2 , 3 ] ) )",
    "execution_output": 8
  },
  {
    "id": 391,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint ( countCompleteSubarrays ( [ 4 , 1 , 2 , 1 , 4 , 3 , 2 , 3 , 1 ] ) )",
    "execution_output": 16
  },
  {
    "id": 392,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint ( countCompleteSubarrays ( [ - 1 , - 2 , - 1 , 0 , - 2 , 0 , - 1 ] ) )",
    "execution_output": 13
  },
  {
    "id": 393,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint ( countCompleteSubarrays ( [ 5 , 1 , 5 , 2 , 3 , 2 , 4 , 5 ] ) )",
    "execution_output": 4
  },
  {
    "id": 394,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint ( countCompleteSubarrays ( [ 1 , 2 , 3 , 1 , 2 , 3 , 1 ] ) )",
    "execution_output": 15
  },
  {
    "id": 395,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint ( countCompleteSubarrays ( [ 2 , 1 , 2 , 3 , 1 , 4 , 3 , 2 , 4 , 1 ] ) )",
    "execution_output": 23
  },
  {
    "id": 396,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint ( countCompleteSubarrays ( [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 1 ] ) )",
    "execution_output": 36
  },
  {
    "id": 397,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint ( countCompleteSubarrays ( [ 9 , 9 , 1 , 9 , 2 , 9 , 3 , 9 , 1 , 2 , 3 ] ) )",
    "execution_output": 26
  },
  {
    "id": 398,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint ( countCompleteSubarrays ( [ 0 , - 1 , 234772 , 0 , - 1 , 234772 , 5 , - 1 , 0 ] ) )",
    "execution_output": 14
  },
  {
    "id": 399,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint ( countCompleteSubarrays ( [ 10 , 20 , 30 , 40 , 10 , 20 , 50 , 60 , 50 , 60 , 70 ] ) )",
    "execution_output": 3
  },
  {
    "id": 400,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)) :\n        set_t = set()\n        for j in range(i, len(nums)) :\n            set_t.add(nums[j])\n            if len(set_t) == setn :\n                to_ret += 1\n    return to_ret\nprint ( countCompleteSubarrays ( [ 1 , 2 , 1 , 3 , 2 , 3 ] ) )",
    "execution_output": 8
  },
  {
    "id": 401,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)) :\n        set_t = set()\n        for j in range(i, len(nums)) :\n            set_t.add(nums[j])\n            if len(set_t) == setn :\n                to_ret += 1\n    return to_ret\nprint ( countCompleteSubarrays ( [ 4 , 5 , 4 , 6 , 7 , 5 , 6 , 7 , 4 ] ) )",
    "execution_output": 17
  },
  {
    "id": 402,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)) :\n        set_t = set()\n        for j in range(i, len(nums)) :\n            set_t.add(nums[j])\n            if len(set_t) == setn :\n                to_ret += 1\n    return to_ret\nprint ( countCompleteSubarrays ( [ 2 , 2 , 3 , 1 , 3 , 2 , 1 , 2 ] ) )",
    "execution_output": 18
  },
  {
    "id": 403,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)) :\n        set_t = set()\n        for j in range(i, len(nums)) :\n            set_t.add(nums[j])\n            if len(set_t) == setn :\n                to_ret += 1\n    return to_ret\nprint ( countCompleteSubarrays ( [ 1 , 2 , 3 , 4 , 5 , 1 , 2 , 3 , 4 , 5 ] ) )",
    "execution_output": 21
  },
  {
    "id": 404,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)) :\n        set_t = set()\n        for j in range(i, len(nums)) :\n            set_t.add(nums[j])\n            if len(set_t) == setn :\n                to_ret += 1\n    return to_ret\nprint ( countCompleteSubarrays ( [ - 1 , 0 , 1 , - 1 , 2 , 0 , 2 ] ) )",
    "execution_output": 8
  },
  {
    "id": 405,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i,n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint ( countCompleteSubarrays ( [ 1 , 2 , 1 , 3 , 2 , 4 , 1 , 5 , 2 , 3 , 4 , 5 , 1 ] ) )",
    "execution_output": 37
  },
  {
    "id": 406,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i,n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint ( countCompleteSubarrays ( [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 1 ] ) )",
    "execution_output": 36
  },
  {
    "id": 407,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i,n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint ( countCompleteSubarrays ( [ 4 , 4 , 4 , 5 , 5 , 1 , 4 , 5 , 1 , 1 , 5 , 4 , 1 ] ) )",
    "execution_output": 56
  },
  {
    "id": 408,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i,n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint ( countCompleteSubarrays ( [ - 3 , - 1 , - 3 , 2 , - 1 , 2 , - 3 , 2 , - 1 ] ) )",
    "execution_output": 25
  },
  {
    "id": 409,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i,n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint ( countCompleteSubarrays ( [ 0 , 1 , 0 , 2 , 0 , 3 , 0 , 1 , 2 , 3 , 0 ] ) )",
    "execution_output": 29
  },
  {
    "id": 410,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint ( countCompleteSubarrays ( [ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ] ) )",
    "execution_output": 36
  },
  {
    "id": 411,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint ( countCompleteSubarrays ( [ 7 , 7 , 7 , 8 , 9 , 7 , 8 , 9 , 7 , 8 , 9 ] ) )",
    "execution_output": 42
  },
  {
    "id": 412,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint ( countCompleteSubarrays ( [ 4 , 5 , 4 , 6 , 7 , 5 , 6 , 7 , 4 , 6 ] ) )",
    "execution_output": 23
  },
  {
    "id": 413,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint ( countCompleteSubarrays ( [ - 3 , 1 , - 3 , 2 , 1 , 2 , - 3 , 2 , 1 , 1 ] ) )",
    "execution_output": 32
  },
  {
    "id": 414,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint ( countCompleteSubarrays ( [ 10 , 10 , 20 , 30 , 20 , 10 , 30 , 40 , 20 , 40 , 10 ] ) )",
    "execution_output": 24
  },
  {
    "id": 415,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint ( countCompleteSubarrays ( [ 1 , 2 , 1 , 3 , 2 , 3 , 4 , 1 , 2 , 4 ] ) )",
    "execution_output": 20
  },
  {
    "id": 416,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint ( countCompleteSubarrays ( [ 5 , 5 , 5 , 1 , 2 , 1 , 2 , 1 , 2 , 3 ] ) )",
    "execution_output": 3
  },
  {
    "id": 417,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint ( countCompleteSubarrays ( [ 7 , 8 , 7 , 8 , 9 , 9 , 7 , 8 , 10 , 9 , 10 ] ) )",
    "execution_output": 20
  },
  {
    "id": 418,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint ( countCompleteSubarrays ( [ 0 , - 1 , 0 , - 1 , 0 , - 1 , 2 , 2 , - 1 , 0 ] ) )",
    "execution_output": 23
  },
  {
    "id": 419,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint ( countCompleteSubarrays ( [ 100 , 200 , 300 , 100 , 200 , 400 , 300 , 500 , 400 , 500 , 100 ] ) )",
    "execution_output": 17
  },
  {
    "id": 420,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 4 , 1 , 2 , 3 , 5 ] , 8 ) )",
    "execution_output": true
  },
  {
    "id": 421,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 5 , 1 , 1 , 1 , 1 ] , 7 ) )",
    "execution_output": false
  },
  {
    "id": 422,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 2 , 7 , 1 , 8 , 2 , 8 ] , 10 ) )",
    "execution_output": true
  },
  {
    "id": 423,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 10 , - 3 , 4 , - 2 , 6 , - 1 ] , 7 ) )",
    "execution_output": true
  },
  {
    "id": 424,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 0 , 3 , 4 , 0 , 2 , 1 ] , 8 ) )",
    "execution_output": false
  },
  {
    "id": 425,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1]+i)\n    @lru_cache(None)\n    def dp(i,j):\n        if j-i==1:\n            return True\n        for k in range(i+1,j):\n            if k!=j-1 and sums[j]-sums[k]<m:\n                continue\n            if k!=i+1 and sums[k]-sums[i]<m:\n                continue\n            if dp(i,k) and dp(k,j):return True\n        return False\n    return dp(0,len(nums))\nprint ( canSplitArray ( [ 2 , 7 , 1 , 8 , 2 , 8 , 1 , 8 , 2 , 8 ] , 10 ) )",
    "execution_output": true
  },
  {
    "id": 426,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1]+i)\n    @lru_cache(None)\n    def dp(i,j):\n        if j-i==1:\n            return True\n        for k in range(i+1,j):\n            if k!=j-1 and sums[j]-sums[k]<m:\n                continue\n            if k!=i+1 and sums[k]-sums[i]<m:\n                continue\n            if dp(i,k) and dp(k,j):return True\n        return False\n    return dp(0,len(nums))\nprint ( canSplitArray ( [ - 1 , 3 , 5 , - 2 , 4 , - 1 , 6 ] , 6 ) )",
    "execution_output": true
  },
  {
    "id": 427,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1]+i)\n    @lru_cache(None)\n    def dp(i,j):\n        if j-i==1:\n            return True\n        for k in range(i+1,j):\n            if k!=j-1 and sums[j]-sums[k]<m:\n                continue\n            if k!=i+1 and sums[k]-sums[i]<m:\n                continue\n            if dp(i,k) and dp(k,j):return True\n        return False\n    return dp(0,len(nums))\nprint ( canSplitArray ( [ 5 , 5 , 5 , 5 , 5 , 5 ] , 10 ) )",
    "execution_output": true
  },
  {
    "id": 428,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1]+i)\n    @lru_cache(None)\n    def dp(i,j):\n        if j-i==1:\n            return True\n        for k in range(i+1,j):\n            if k!=j-1 and sums[j]-sums[k]<m:\n                continue\n            if k!=i+1 and sums[k]-sums[i]<m:\n                continue\n            if dp(i,k) and dp(k,j):return True\n        return False\n    return dp(0,len(nums))\nprint ( canSplitArray ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] , 15 ) )",
    "execution_output": true
  },
  {
    "id": 429,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1]+i)\n    @lru_cache(None)\n    def dp(i,j):\n        if j-i==1:\n            return True\n        for k in range(i+1,j):\n            if k!=j-1 and sums[j]-sums[k]<m:\n                continue\n            if k!=i+1 and sums[k]-sums[i]<m:\n                continue\n            if dp(i,k) and dp(k,j):return True\n        return False\n    return dp(0,len(nums))\nprint ( canSplitArray ( [ 4 , 4 , 4 , 4 , 4 , 4 , 4 ] , 8 ) )",
    "execution_output": true
  },
  {
    "id": 430,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <3:\n        return True\n    for i,v in enumerate(nums):\n        if i+1 >= len(nums):\n            continue\n        if v + nums[i+1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 4 , - 1 , 2 , 6 , - 2 ] , 8 ) )",
    "execution_output": true
  },
  {
    "id": 431,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <3:\n        return True\n    for i,v in enumerate(nums):\n        if i+1 >= len(nums):\n            continue\n        if v + nums[i+1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 2 , 3 , 1 , 2 , 2 ] , 7 ) )",
    "execution_output": false
  },
  {
    "id": 432,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <3:\n        return True\n    for i,v in enumerate(nums):\n        if i+1 >= len(nums):\n            continue\n        if v + nums[i+1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 5 , 5 , 5 , 5 , 5 ] , 9 ) )",
    "execution_output": true
  },
  {
    "id": 433,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <3:\n        return True\n    for i,v in enumerate(nums):\n        if i+1 >= len(nums):\n            continue\n        if v + nums[i+1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 0 , - 1 , 4 , - 2 , 3 ] , 3 ) )",
    "execution_output": true
  },
  {
    "id": 434,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <3:\n        return True\n    for i,v in enumerate(nums):\n        if i+1 >= len(nums):\n            continue\n        if v + nums[i+1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 1 , 1 , 1 , 1 , 6 ] , 7 ) )",
    "execution_output": true
  },
  {
    "id": 435,
    "q_id": "sample_155",
    "code": "from typing import *\n\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <=2:\n        return True\n    for i in range(len(nums)-1):\n        if sum(nums[i:i+2]) >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 3 , 1 , 2 , 4 , 0 ] , 6 ) )",
    "execution_output": true
  },
  {
    "id": 436,
    "q_id": "sample_155",
    "code": "from typing import *\n\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <=2:\n        return True\n    for i in range(len(nums)-1):\n        if sum(nums[i:i+2]) >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 1 , 2 , 1 , 2 , 1 , 2 ] , 5 ) )",
    "execution_output": false
  },
  {
    "id": 437,
    "q_id": "sample_155",
    "code": "from typing import *\n\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <=2:\n        return True\n    for i in range(len(nums)-1):\n        if sum(nums[i:i+2]) >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ - 5 , 10 , - 3 , 1 , 2 ] , 7 ) )",
    "execution_output": true
  },
  {
    "id": 438,
    "q_id": "sample_155",
    "code": "from typing import *\n\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <=2:\n        return True\n    for i in range(len(nums)-1):\n        if sum(nums[i:i+2]) >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 2 , 2 , 3 , 1 , 0 ] , 5 ) )",
    "execution_output": true
  },
  {
    "id": 439,
    "q_id": "sample_155",
    "code": "from typing import *\n\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <=2:\n        return True\n    for i in range(len(nums)-1):\n        if sum(nums[i:i+2]) >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 4 , 3 , 3 , 3 , 3 ] , 8 ) )",
    "execution_output": false
  },
  {
    "id": 440,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 1 , 3 , 5 , 7 , 9 , 11 ] , 20 ) )",
    "execution_output": true
  },
  {
    "id": 441,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 16 , 0 , 16 , 0 , 16 , 0 , 16 ] , 15 ) )",
    "execution_output": true
  },
  {
    "id": 442,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 1 , 1 , 2 , 1 , 1 , 2 , 1 , 1 , 2 , 1 ] , 5 ) )",
    "execution_output": false
  },
  {
    "id": 443,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ - 100 , 50 , - 60 , 70 , 30 , - 5 ] , 80 ) )",
    "execution_output": true
  },
  {
    "id": 444,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 5 , 4 , 5 , 4 , 5 , 4 , 6 , 4 , 5 , 4 ] , 10 ) )",
    "execution_output": true
  },
  {
    "id": 445,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 2 , 5 , 1 , 4 , 6 , 1 , 2 ] , 9 ) )",
    "execution_output": true
  },
  {
    "id": 446,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 9 , 0 , 9 , 0 , 9 , 0 ] , 10 ) )",
    "execution_output": false
  },
  {
    "id": 447,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 1 , 9 , 2 , 8 , 3 , 7 ] , 10 ) )",
    "execution_output": true
  },
  {
    "id": 448,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ 3 , 3 , 3 , 3 , 3 , 3 ] , 7 ) )",
    "execution_output": false
  },
  {
    "id": 449,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint ( canSplitArray ( [ - 10 , 5 , - 3 , 4 , 7 ] , 10 ) )",
    "execution_output": true
  },
  {
    "id": 450,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i,c in enumerate(nums):\n        if i>=x:\n            bisect.insort(st,nums[i-x])\n            p = bisect.bisect_left(st,c) \n            if p>0:\n                ans = min(ans,c-st[p-1])\n            if p<len(st):\n                ans = min(ans,st[p]-c)\n    return ans\nprint ( minAbsoluteDifference ( [ 5 , - 2 , 13 , 7 , - 8 , 4 , 10 , - 1 , 6 , - 3 , 9 , - 5 ] , 3 ) )",
    "execution_output": 1
  },
  {
    "id": 451,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i,c in enumerate(nums):\n        if i>=x:\n            bisect.insort(st,nums[i-x])\n            p = bisect.bisect_left(st,c) \n            if p>0:\n                ans = min(ans,c-st[p-1])\n            if p<len(st):\n                ans = min(ans,st[p]-c)\n    return ans\nprint ( minAbsoluteDifference ( [ 1 , 2 , 3 , 100 , 101 , 102 , 103 , 200 , 201 , 202 , 203 , 204 , 300 , 400 , 401 ] , 5 ) )",
    "execution_output": 100
  },
  {
    "id": 452,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i,c in enumerate(nums):\n        if i>=x:\n            bisect.insort(st,nums[i-x])\n            p = bisect.bisect_left(st,c) \n            if p>0:\n                ans = min(ans,c-st[p-1])\n            if p<len(st):\n                ans = min(ans,st[p]-c)\n    return ans\nprint ( minAbsoluteDifference ( [ 50 , - 50 , 49 , - 49 , 48 , - 48 , 47 , - 47 , 46 , - 46 , 45 , - 45 ] , 3 ) )",
    "execution_output": 2
  },
  {
    "id": 453,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i,c in enumerate(nums):\n        if i>=x:\n            bisect.insort(st,nums[i-x])\n            p = bisect.bisect_left(st,c) \n            if p>0:\n                ans = min(ans,c-st[p-1])\n            if p<len(st):\n                ans = min(ans,st[p]-c)\n    return ans\nprint ( minAbsoluteDifference ( [ 7 , 7 , 7 , 20 , 20 , 5 , 5 , 5 , 30 , 30 , 7 , 5 , 20 , 20 , 5 ] , 4 ) )",
    "execution_output": 0
  },
  {
    "id": 454,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i,c in enumerate(nums):\n        if i>=x:\n            bisect.insort(st,nums[i-x])\n            p = bisect.bisect_left(st,c) \n            if p>0:\n                ans = min(ans,c-st[p-1])\n            if p<len(st):\n                ans = min(ans,st[p]-c)\n    return ans\nprint ( minAbsoluteDifference ( [ 901 , 3000 , 2000 , 1500 , 1200 , 1100 , 902 , 4000 , 100 , 903 , 904 , 905 ] , 6 ) )",
    "execution_output": 1
  },
  {
    "id": 455,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if (k - now) not in st:\n            st.add(now)\n            arr.append(now)\n        \n        now += 1\n    return sum(arr)\nprint ( minimumSum ( 5 , 5 ) )",
    "execution_output": 21
  },
  {
    "id": 456,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if (k - now) not in st:\n            st.add(now)\n            arr.append(now)\n        \n        now += 1\n    return sum(arr)\nprint ( minimumSum ( 8 , 10 ) )",
    "execution_output": 48
  },
  {
    "id": 457,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if (k - now) not in st:\n            st.add(now)\n            arr.append(now)\n        \n        now += 1\n    return sum(arr)\nprint ( minimumSum ( 10 , 12 ) )",
    "execution_output": 75
  },
  {
    "id": 458,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if (k - now) not in st:\n            st.add(now)\n            arr.append(now)\n        \n        now += 1\n    return sum(arr)\nprint ( minimumSum ( 12 , 7 ) )",
    "execution_output": 105
  },
  {
    "id": 459,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if (k - now) not in st:\n            st.add(now)\n            arr.append(now)\n        \n        now += 1\n    return sum(arr)\nprint ( minimumSum ( 15 , 3 ) )",
    "execution_output": 134
  },
  {
    "id": 460,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans)<n:\n        while k-cur in st:\n            cur+=1\n        ans.append(cur)\n        st.add(cur)\n        s+=cur\n        cur+=1\n    return s\nprint ( minimumSum ( 10 , 15 ) )",
    "execution_output": 76
  },
  {
    "id": 461,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans)<n:\n        while k-cur in st:\n            cur+=1\n        ans.append(cur)\n        st.add(cur)\n        s+=cur\n        cur+=1\n    return s\nprint ( minimumSum ( 12 , 20 ) )",
    "execution_output": 96
  },
  {
    "id": 462,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans)<n:\n        while k-cur in st:\n            cur+=1\n        ans.append(cur)\n        st.add(cur)\n        s+=cur\n        cur+=1\n    return s\nprint ( minimumSum ( 25 , 7 ) )",
    "execution_output": 391
  },
  {
    "id": 463,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans)<n:\n        while k-cur in st:\n            cur+=1\n        ans.append(cur)\n        st.add(cur)\n        s+=cur\n        cur+=1\n    return s\nprint ( minimumSum ( 40 , 41 ) )",
    "execution_output": 1220
  },
  {
    "id": 464,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans)<n:\n        while k-cur in st:\n            cur+=1\n        ans.append(cur)\n        st.add(cur)\n        s+=cur\n        cur+=1\n    return s\nprint ( minimumSum ( 50 , 75 ) )",
    "execution_output": 1756
  },
  {
    "id": 465,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k-x not in seen:\n            seen.add(x)\n    \n    return sum(seen)\nprint ( minimumSum ( 10 , 7 ) )",
    "execution_output": 76
  },
  {
    "id": 466,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k-x not in seen:\n            seen.add(x)\n    \n    return sum(seen)\nprint ( minimumSum ( 10 , 8 ) )",
    "execution_output": 73
  },
  {
    "id": 467,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k-x not in seen:\n            seen.add(x)\n    \n    return sum(seen)\nprint ( minimumSum ( 12 , 3 ) )",
    "execution_output": 89
  },
  {
    "id": 468,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k-x not in seen:\n            seen.add(x)\n    \n    return sum(seen)\nprint ( minimumSum ( 5 , 100 ) )",
    "execution_output": 15
  },
  {
    "id": 469,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k-x not in seen:\n            seen.add(x)\n    \n    return sum(seen)\nprint ( minimumSum ( 20 , 15 ) )",
    "execution_output": 301
  },
  {
    "id": 470,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    \n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint ( minimumSum ( 10 , 7 ) )",
    "execution_output": 76
  },
  {
    "id": 471,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    \n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint ( minimumSum ( 12 , 20 ) )",
    "execution_output": 96
  },
  {
    "id": 472,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    \n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint ( minimumSum ( 25 , 30 ) )",
    "execution_output": 465
  },
  {
    "id": 473,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    \n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint ( minimumSum ( 15 , 3 ) )",
    "execution_output": 134
  },
  {
    "id": 474,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    \n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint ( minimumSum ( 50 , 60 ) )",
    "execution_output": 1855
  },
  {
    "id": 475,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumSum ( 10 , 7 ) )",
    "execution_output": 76
  },
  {
    "id": 476,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumSum ( 12 , 8 ) )",
    "execution_output": 102
  },
  {
    "id": 477,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumSum ( 9 , 9 ) )",
    "execution_output": 65
  },
  {
    "id": 478,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumSum ( 15 , 13 ) )",
    "execution_output": 174
  },
  {
    "id": 479,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumSum ( 12 , 3 ) )",
    "execution_output": 89
  },
  {
    "id": 480,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint ( minimumSum ( 5 , 7 ) )",
    "execution_output": 21
  },
  {
    "id": 481,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint ( minimumSum ( 6 , 10 ) )",
    "execution_output": 25
  },
  {
    "id": 482,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint ( minimumSum ( 9 , 9 ) )",
    "execution_output": 65
  },
  {
    "id": 483,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint ( minimumSum ( 12 , 15 ) )",
    "execution_output": 113
  },
  {
    "id": 484,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint ( minimumSum ( 7 , 1000 ) )",
    "execution_output": 28
  },
  {
    "id": 485,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n\n    return max(f)\nprint ( maximizeTheProfit ( 10 , [ [ 0 , 3 , 5 ] , [ 2 , 5 , 11 ] , [ 4 , 7 , 10 ] , [ 6 , 9 , 12 ] , [ 0 , 1 , 3 ] , [ 2 , 2 , 4 ] , [ 8 , 9 , 5 ] , [ 3 , 4 , 6 ] , [ 5 , 5 , 5 ] ] ) )",
    "execution_output": 30
  },
  {
    "id": 486,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n\n    return max(f)\nprint ( maximizeTheProfit ( 8 , [ [ 0 , 2 , 4 ] , [ 1 , 2 , 5 ] , [ 2 , 2 , 3 ] , [ 0 , 5 , 10 ] , [ 3 , 5 , 7 ] , [ 4 , 5 , 6 ] , [ 6 , 7 , 8 ] , [ 5 , 7 , 9 ] , [ 0 , 7 , 12 ] ] ) )",
    "execution_output": 20
  },
  {
    "id": 487,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n\n    return max(f)\nprint ( maximizeTheProfit ( 12 , [ [ 0 , 3 , 9 ] , [ 4 , 6 , 9 ] , [ 7 , 9 , 9 ] , [ 10 , 11 , 9 ] , [ 2 , 10 , 15 ] , [ 0 , 11 , 22 ] , [ 3 , 3 , 2 ] , [ 6 , 6 , 2 ] , [ 9 , 9 , 2 ] ] ) )",
    "execution_output": 36
  },
  {
    "id": 488,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n\n    return max(f)\nprint ( maximizeTheProfit ( 15 , [ [ 0 , 0 , 1 ] , [ 1 , 3 , 7 ] , [ 2 , 4 , 6 ] , [ 3 , 5 , 8 ] , [ 4 , 6 , 7 ] , [ 5 , 7 , 9 ] , [ 6 , 8 , 8 ] , [ 7 , 9 , 9 ] , [ 1 , 9 , 20 ] , [ 10 , 14 , 15 ] , [ 9 , 14 , 16 ] , [ 11 , 11 , 3 ] , [ 12 , 12 , 3 ] , [ 13 , 13 , 3 ] , [ 14 , 14 , 3 ] ] ) )",
    "execution_output": 39
  },
  {
    "id": 489,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n\n    return max(f)\nprint ( maximizeTheProfit ( 6 , [ [ 0 , 0 , 2 ] , [ 1 , 1 , 2 ] , [ 2 , 2 , 2 ] , [ 3 , 3 , 2 ] , [ 4 , 4 , 2 ] , [ 5 , 5 , 2 ] , [ 0 , 2 , 5 ] , [ 3 , 5 , 5 ] , [ 1 , 3 , 4 ] , [ 2 , 5 , 6 ] ] ) )",
    "execution_output": 12
  },
  {
    "id": 490,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint ( maximizeTheProfit ( 10 , [ [ 0 , 2 , 10 ] , [ 1 , 3 , 9 ] , [ 3 , 5 , 12 ] , [ 4 , 6 , 14 ] , [ 6 , 9 , 18 ] , [ 0 , 1 , 3 ] , [ 2 , 4 , 7 ] , [ 5 , 7 , 8 ] , [ 8 , 9 , 5 ] , [ 7 , 9 , 11 ] ] ) )",
    "execution_output": 40
  },
  {
    "id": 491,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint ( maximizeTheProfit ( 8 , [ [ 0 , 0 , 5 ] , [ 0 , 1 , 6 ] , [ 1 , 2 , 4 ] , [ 2 , 4 , 10 ] , [ 3 , 3 , 3 ] , [ 4 , 5 , 7 ] , [ 5 , 7 , 12 ] , [ 6 , 6 , 6 ] , [ 2 , 2 , 2 ] , [ 1 , 4 , 8 ] ] ) )",
    "execution_output": 28
  },
  {
    "id": 492,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint ( maximizeTheProfit ( 12 , [ [ 0 , 4 , 10 ] , [ 5 , 8 , 9 ] , [ 9 , 11 , 8 ] , [ 0 , 11 , 20 ] , [ 2 , 3 , 6 ] , [ 4 , 7 , 7 ] , [ 7 , 10 , 10 ] , [ 8 , 9 , 4 ] , [ 1 , 5 , 7 ] , [ 3 , 6 , 9 ] , [ 6 , 6 , 5 ] ] ) )",
    "execution_output": 27
  },
  {
    "id": 493,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint ( maximizeTheProfit ( 9 , [ [ 0 , 2 , 5 ] , [ 1 , 2 , 7 ] , [ 0 , 3 , 8 ] , [ 2 , 3 , 4 ] , [ 1 , 4 , 10 ] , [ 3 , 4 , 6 ] , [ 0 , 5 , 12 ] , [ 2 , 5 , 9 ] , [ 4 , 5 , 5 ] , [ 5 , 6 , 3 ] , [ 6 , 8 , 7 ] , [ 7 , 8 , 4 ] ] ) )",
    "execution_output": 20
  },
  {
    "id": 494,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint ( maximizeTheProfit ( 15 , [ [ 0 , 1 , 2 ] , [ 1 , 3 , 5 ] , [ 2 , 4 , 6 ] , [ 3 , 5 , 7 ] , [ 4 , 6 , 8 ] , [ 5 , 7 , 9 ] , [ 6 , 8 , 10 ] , [ 7 , 9 , 11 ] , [ 8 , 10 , 12 ] , [ 9 , 11 , 13 ] , [ 10 , 12 , 14 ] , [ 11 , 14 , 18 ] , [ 0 , 4 , 9 ] , [ 2 , 7 , 15 ] , [ 5 , 13 , 20 ] , [ 0 , 14 , 25 ] , [ 12 , 14 , 7 ] , [ 1 , 14 , 24 ] , [ 4 , 10 , 16 ] , [ 3 , 12 , 17 ] ] ) )",
    "execution_output": 48
  },
  {
    "id": 495,
    "q_id": "sample_179",
    "code": "import heapq\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint ( maximizeTheProfit ( 10 , [ [ 0 , 2 , 6 ] , [ 1 , 3 , 4 ] , [ 3 , 5 , 5 ] , [ 4 , 6 , 5 ] , [ 6 , 9 , 7 ] , [ 2 , 4 , 7 ] , [ 5 , 7 , 4 ] , [ 8 , 9 , 3 ] ] ) )",
    "execution_output": 18
  },
  {
    "id": 496,
    "q_id": "sample_179",
    "code": "import heapq\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint ( maximizeTheProfit ( 8 , [ [ 0 , 1 , 3 ] , [ 0 , 2 , 4 ] , [ 0 , 3 , 10 ] , [ 3 , 3 , 5 ] , [ 4 , 5 , 6 ] , [ 6 , 7 , 5 ] ] ) )",
    "execution_output": 21
  },
  {
    "id": 497,
    "q_id": "sample_179",
    "code": "import heapq\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint ( maximizeTheProfit ( 7 , [ [ 0 , 5 , 10 ] , [ 0 , 1 , 6 ] , [ 2 , 3 , 6 ] , [ 4 , 5 , 6 ] ] ) )",
    "execution_output": 18
  },
  {
    "id": 498,
    "q_id": "sample_179",
    "code": "import heapq\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint ( maximizeTheProfit ( 7 , [ [ 0 , 2 , 4 ] , [ 1 , 2 , 5 ] , [ 3 , 4 , 3 ] , [ 5 , 6 , 7 ] , [ 2 , 2 , 1 ] ] ) )",
    "execution_output": 15
  },
  {
    "id": 499,
    "q_id": "sample_179",
    "code": "import heapq\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint ( maximizeTheProfit ( 12 , [ [ 0 , 3 , 8 ] , [ 1 , 4 , 7 ] , [ 3 , 6 , 9 ] , [ 4 , 7 , 10 ] , [ 6 , 9 , 12 ] , [ 8 , 11 , 11 ] , [ 10 , 11 , 5 ] , [ 0 , 0 , 1 ] , [ 2 , 2 , 2 ] , [ 5 , 5 , 4 ] , [ 7 , 7 , 3 ] ] ) )",
    "execution_output": 29
  },
  {
    "id": 500,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint ( maximizeTheProfit ( 8 , [ [ 0 , 2 , 10 ] , [ 1 , 3 , 15 ] , [ 3 , 5 , 20 ] , [ 4 , 7 , 25 ] , [ 6 , 6 , 8 ] , [ 0 , 7 , 40 ] ] ) )",
    "execution_output": 40
  },
  {
    "id": 501,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint ( maximizeTheProfit ( 9 , [ [ 0 , 1 , 5 ] , [ 0 , 2 , 6 ] , [ 0 , 3 , 7 ] , [ 3 , 4 , 8 ] , [ 5 , 8 , 20 ] , [ 2 , 2 , 4 ] , [ 4 , 6 , 9 ] , [ 7 , 8 , 10 ] ] ) )",
    "execution_output": 37
  },
  {
    "id": 502,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint ( maximizeTheProfit ( 6 , [ [ 0 , 5 , 12 ] , [ 0 , 1 , 5 ] , [ 1 , 4 , 7 ] , [ 2 , 3 , 4 ] , [ 4 , 5 , 6 ] ] ) )",
    "execution_output": 15
  },
  {
    "id": 503,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint ( maximizeTheProfit ( 10 , [ [ 0 , 2 , 10 ] , [ 3 , 3 , 8 ] , [ 4 , 6 , 12 ] , [ 7 , 9 , 25 ] , [ 3 , 9 , 30 ] , [ 0 , 6 , 18 ] , [ 6 , 6 , 7 ] ] ) )",
    "execution_output": 55
  },
  {
    "id": 504,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint ( maximizeTheProfit ( 12 , [ [ 0 , 0 , 3 ] , [ 1 , 2 , 5 ] , [ 3 , 5 , 9 ] , [ 6 , 8 , 10 ] , [ 9 , 11 , 12 ] , [ 0 , 5 , 14 ] , [ 6 , 11 , 15 ] , [ 2 , 9 , 13 ] , [ 4 , 4 , 4 ] , [ 5 , 5 , 3 ] ] ) )",
    "execution_output": 39
  },
  {
    "id": 505,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    \n    dp = [0]*(n+1)\n    offers.sort(key=lambda x:x[1])\n    m = len(offers)\n    po = 0\n    \n    for j in range(n):\n        dp[j]=max(dp[j],dp[j-1])\n        while po<m and offers[po][1]==j:\n            dp[j]=max(dp[j],dp[offers[po][0]-1]+offers[po][2])\n            po+=1\n    return dp[n-1]\nprint ( maximizeTheProfit ( 10 , [ [ 1 , 1 , 5 ] , [ 1 , 2 , 6 ] , [ 2 , 2 , 5 ] , [ 3 , 4 , 12 ] , [ 2 , 4 , 13 ] , [ 5 , 5 , 4 ] , [ 5 , 6 , 8 ] , [ 6 , 7 , 7 ] , [ 7 , 9 , 20 ] , [ 6 , 9 , 19 ] , [ 8 , 9 , 7 ] ] ) )",
    "execution_output": 50
  },
  {
    "id": 506,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    \n    dp = [0]*(n+1)\n    offers.sort(key=lambda x:x[1])\n    m = len(offers)\n    po = 0\n    \n    for j in range(n):\n        dp[j]=max(dp[j],dp[j-1])\n        while po<m and offers[po][1]==j:\n            dp[j]=max(dp[j],dp[offers[po][0]-1]+offers[po][2])\n            po+=1\n    return dp[n-1]\nprint ( maximizeTheProfit ( 12 , [ [ 1 , 5 , 5 ] , [ 2 , 5 , 9 ] , [ 3 , 5 , 7 ] , [ 4 , 5 , 8 ] , [ 6 , 8 , 6 ] , [ 7 , 8 , 5 ] , [ 6 , 11 , 20 ] , [ 7 , 11 , 18 ] , [ 8 , 11 , 22 ] , [ 9 , 11 , 17 ] ] ) )",
    "execution_output": 32
  },
  {
    "id": 507,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    \n    dp = [0]*(n+1)\n    offers.sort(key=lambda x:x[1])\n    m = len(offers)\n    po = 0\n    \n    for j in range(n):\n        dp[j]=max(dp[j],dp[j-1])\n        while po<m and offers[po][1]==j:\n            dp[j]=max(dp[j],dp[offers[po][0]-1]+offers[po][2])\n            po+=1\n    return dp[n-1]\nprint ( maximizeTheProfit ( 15 , [ [ 1 , 3 , 10 ] , [ 4 , 6 , 15 ] , [ 7 , 7 , 5 ] , [ 9 , 10 , 12 ] , [ 12 , 14 , 20 ] , [ 2 , 5 , 11 ] , [ 5 , 9 , 13 ] ] ) )",
    "execution_output": 62
  },
  {
    "id": 508,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    \n    dp = [0]*(n+1)\n    offers.sort(key=lambda x:x[1])\n    m = len(offers)\n    po = 0\n    \n    for j in range(n):\n        dp[j]=max(dp[j],dp[j-1])\n        while po<m and offers[po][1]==j:\n            dp[j]=max(dp[j],dp[offers[po][0]-1]+offers[po][2])\n            po+=1\n    return dp[n-1]\nprint ( maximizeTheProfit ( 8 , [ [ 1 , 2 , 5 ] , [ 3 , 5 , 9 ] , [ 6 , 6 , 5 ] , [ 1 , 7 , 10 ] , [ 2 , 7 , 12 ] , [ 3 , 7 , 14 ] , [ 4 , 7 , 16 ] , [ 5 , 7 , 15 ] , [ 6 , 7 , 7 ] ] ) )",
    "execution_output": 21
  },
  {
    "id": 509,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    \n    dp = [0]*(n+1)\n    offers.sort(key=lambda x:x[1])\n    m = len(offers)\n    po = 0\n    \n    for j in range(n):\n        dp[j]=max(dp[j],dp[j-1])\n        while po<m and offers[po][1]==j:\n            dp[j]=max(dp[j],dp[offers[po][0]-1]+offers[po][2])\n            po+=1\n    return dp[n-1]\nprint ( maximizeTheProfit ( 9 , [ [ 1 , 2 , 5 ] , [ 3 , 4 , 6 ] , [ 5 , 6 , 7 ] , [ 7 , 8 , 8 ] , [ 1 , 4 , 12 ] , [ 5 , 8 , 17 ] , [ 2 , 7 , 15 ] , [ 3 , 6 , 14 ] ] ) )",
    "execution_output": 29
  },
  {
    "id": 510,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    \n    prev = collections.defaultdict(list)\n    \n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n        \n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    # print(best)\n    return best[N]\nprint ( maximizeTheProfit ( 10 , [ [ 0 , 3 , 6 ] , [ 1 , 5 , 7 ] , [ 4 , 6 , 5 ] , [ 6 , 9 , 8 ] , [ 2 , 3 , 2 ] , [ 0 , 1 , 3 ] , [ 3 , 3 , 4 ] , [ 7 , 9 , 5 ] , [ 5 , 5 , 4 ] ] ) )",
    "execution_output": 19
  },
  {
    "id": 511,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    \n    prev = collections.defaultdict(list)\n    \n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n        \n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    # print(best)\n    return best[N]\nprint ( maximizeTheProfit ( 8 , [ [ 0 , 3 , 5 ] , [ 1 , 3 , 9 ] , [ 2 , 3 , 7 ] , [ 3 , 5 , 6 ] , [ 1 , 5 , 8 ] , [ 6 , 7 , 5 ] , [ 0 , 7 , 12 ] , [ 4 , 4 , 3 ] , [ 2 , 2 , 2 ] ] ) )",
    "execution_output": 17
  },
  {
    "id": 512,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    \n    prev = collections.defaultdict(list)\n    \n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n        \n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    # print(best)\n    return best[N]\nprint ( maximizeTheProfit ( 12 , [ [ 0 , 1 , 2 ] , [ 2 , 3 , 3 ] , [ 4 , 5 , 4 ] , [ 6 , 7 , 5 ] , [ 8 , 9 , 6 ] , [ 10 , 11 , 7 ] , [ 0 , 5 , 7 ] , [ 2 , 7 , 8 ] , [ 4 , 11 , 10 ] , [ 0 , 11 , 20 ] , [ 3 , 6 , 4 ] ] ) )",
    "execution_output": 27
  },
  {
    "id": 513,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    \n    prev = collections.defaultdict(list)\n    \n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n        \n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    # print(best)\n    return best[N]\nprint ( maximizeTheProfit ( 15 , [ [ 0 , 0 , 1 ] , [ 5 , 7 , 10 ] , [ 10 , 10 , 3 ] , [ 12 , 14 , 9 ] , [ 0 , 7 , 8 ] , [ 8 , 9 , 4 ] , [ 2 , 4 , 5 ] , [ 11 , 13 , 6 ] , [ 1 , 1 , 2 ] ] ) )",
    "execution_output": 34
  },
  {
    "id": 514,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    \n    prev = collections.defaultdict(list)\n    \n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n        \n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    # print(best)\n    return best[N]\nprint ( maximizeTheProfit ( 9 , [ [ 0 , 1 , 4 ] , [ 2 , 3 , 4 ] , [ 4 , 5 , 4 ] , [ 6 , 8 , 5 ] , [ 0 , 5 , 10 ] , [ 3 , 8 , 9 ] , [ 0 , 0 , 1 ] , [ 5 , 5 , 2 ] , [ 2 , 8 , 8 ] ] ) )",
    "execution_output": 17
  },
  {
    "id": 515,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 5 , 1 , 5 , 2 , 5 , 3 , 5 , 4 , 5 , 6 , 5 , 7 , 5 ] , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 516,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 2 , 3 , 2 , 3 , 2 , 3 , 2 , 3 , 3 , 3 , 2 , 2 , 2 , 3 , 2 , 3 ] , 2 ) )",
    "execution_output": 5
  },
  {
    "id": 517,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 1 , 4 , 1 , 4 , 1 , 2 , 2 , 2 , 1 , 4 , 1 , 3 , 3 , 1 , 4 ] , 1 ) )",
    "execution_output": 3
  },
  {
    "id": 518,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 9 , 8 , 7 , 9 , 6 , 5 , 9 , 4 , 3 , 9 , 2 , 1 , 9 , 0 , 9 ] , 4 ) )",
    "execution_output": 3
  },
  {
    "id": 519,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 10 , 10 , 20 , 30 , 10 , 40 , 10 , 50 , 10 , 60 , 70 , 10 , 80 , 10 , 90 ] , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 520,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n+1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n+1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed]-cs[i][st]+1-(ed-st+1) > k:\n                st += 1\n            ans = max(ans, ed-st+1)\n    return ans\nprint ( longestEqualSubarray ( [ 1 , 2 , 1 , 3 , 1 , 2 , 2 , 4 , 2 , 2 , 1 , 3 , 3 , 3 , 2 , 5 , 2 , 2 , 2 , 1 ] , 2 ) )",
    "execution_output": 4
  },
  {
    "id": 521,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n+1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n+1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed]-cs[i][st]+1-(ed-st+1) > k:\n                st += 1\n            ans = max(ans, ed-st+1)\n    return ans\nprint ( longestEqualSubarray ( [ 1 , 2 ] * 15 , 5 ) )",
    "execution_output": 6
  },
  {
    "id": 522,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n+1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n+1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed]-cs[i][st]+1-(ed-st+1) > k:\n                st += 1\n            ans = max(ans, ed-st+1)\n    return ans\nprint ( longestEqualSubarray ( [ 7 , 1 , 2 , 7 , 3 , 4 , 7 , 5 , 6 , 7 , 8 , 9 , 7 , 10 , 7 , 1 , 7 , 2 , 7 , 3 , 7 , 4 , 7 , 5 , 7 ] , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 523,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n+1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n+1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed]-cs[i][st]+1-(ed-st+1) > k:\n                st += 1\n            ans = max(ans, ed-st+1)\n    return ans\nprint ( longestEqualSubarray ( [ 4 , 4 , 4 , 2 , 4 , 4 , 3 , 4 , 4 , 4 , 5 , 4 , 4 , 4 , 6 , 4 , 4 , 4 , 4 , 1 ] , 1 ) )",
    "execution_output": 7
  },
  {
    "id": 524,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n+1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n+1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed]-cs[i][st]+1-(ed-st+1) > k:\n                st += 1\n            ans = max(ans, ed-st+1)\n    return ans\nprint ( longestEqualSubarray ( [ 10 , 9 , 10 , 8 , 10 , 7 , 10 , 6 , 10 , 5 ] , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 525,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j-i + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 1 , 3 , 1 , 2 , 1 , 3 , 2 , 1 , 4 , 1 , 5 , 1 , 2 , 1 , 3 , 1 , 2 , 6 , 1 , 2 , 1 ] , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 526,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j-i + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 7 , 8 , 7 , 9 , 7 , 8 , 7 , 10 , 7 , 8 , 7 , 11 , 7 , 8 , 7 , 12 , 7 , 13 , 7 , 14 ] , 2 ) )",
    "execution_output": 3
  },
  {
    "id": 527,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j-i + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 5 , 5 , 1 , 2 , 5 , 3 , 5 , 4 , 5 , 6 , 5 , 7 , 5 , 8 , 5 , 9 , 5 , 10 , 5 , 11 , 5 ] , 5 ) )",
    "execution_output": 6
  },
  {
    "id": 528,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j-i + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 2 , 2 , 3 , 3 , 2 , 3 , 2 , 3 , 2 , 3 , 4 , 4 , 4 , 2 , 3 , 2 , 3 , 2 , 3 , 4 , 4 , 4 ] , 4 ) )",
    "execution_output": 5
  },
  {
    "id": 529,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j-i + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 4 , 5 , 4 , 5 , 4 , 5 , 4 , 5 , 1 , 2 , 3 , 1 , 2 , 3 ] , 6 ) )",
    "execution_output": 4
  },
  {
    "id": 530,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    \n    n = len(nums)\n    can = n-k\n    \n    table = defaultdict(list)        \n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0    \n    \n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r]-lst[l]>=(r-l+1)+k:\n                l+=1\n            ans = max(ans,r-l+1)\n    return ans\nprint ( longestEqualSubarray ( [ 1 , 2 , 1 , 3 , 1 , 2 , 1 , 4 , 1 , 1 , 2 ] , 2 ) )",
    "execution_output": 4
  },
  {
    "id": 531,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    \n    n = len(nums)\n    can = n-k\n    \n    table = defaultdict(list)        \n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0    \n    \n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r]-lst[l]>=(r-l+1)+k:\n                l+=1\n            ans = max(ans,r-l+1)\n    return ans\nprint ( longestEqualSubarray ( [ 5 , 5 , 6 , 5 , 6 , 6 , 6 , 5 , 6 , 5 , 6 ] , 1 ) )",
    "execution_output": 4
  },
  {
    "id": 532,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    \n    n = len(nums)\n    can = n-k\n    \n    table = defaultdict(list)        \n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0    \n    \n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r]-lst[l]>=(r-l+1)+k:\n                l+=1\n            ans = max(ans,r-l+1)\n    return ans\nprint ( longestEqualSubarray ( [ 7 , 8 , 7 , 8 , 7 , 8 , 7 , 8 , 7 , 8 , 7 , 8 , 7 ] , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 533,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    \n    n = len(nums)\n    can = n-k\n    \n    table = defaultdict(list)        \n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0    \n    \n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r]-lst[l]>=(r-l+1)+k:\n                l+=1\n            ans = max(ans,r-l+1)\n    return ans\nprint ( longestEqualSubarray ( [ 9 , 0 , 0 , 9 , 0 , 9 , 0 , 0 , 0 , 9 , 0 , 0 , 9 , 0 , 0 , 0 , 0 , 9 , 0 , 9 ] , 4 ) )",
    "execution_output": 12
  },
  {
    "id": 534,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    \n    n = len(nums)\n    can = n-k\n    \n    table = defaultdict(list)        \n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0    \n    \n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r]-lst[l]>=(r-l+1)+k:\n                l+=1\n            ans = max(ans,r-l+1)\n    return ans\nprint ( longestEqualSubarray ( [ 3 , 3 , 2 , 3 , 2 , 2 , 3 , 2 , 3 , 3 , 2 , 3 , 2 , 3 , 2 , 3 , 2 , 3 ] , 2 ) )",
    "execution_output": 4
  },
  {
    "id": 535,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i-1] - 1\n            while cnt > k:\n                cnt -= l[j+1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 1 , 2 , 1 , 3 , 1 , 2 , 1 , 4 , 1 , 2 , 1 , 3 , 1 , 2 , 1 , 5 , 1 , 2 , 1 , 3 , 1 , 2 , 1 ] , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 536,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i-1] - 1\n            while cnt > k:\n                cnt -= l[j+1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 4 , 4 , 2 , 4 , 2 , 4 , 4 , 2 , 4 , 2 , 2 , 4 , 2 , 4 , 2 , 4 , 4 , 2 , 2 , 4 , 2 , 4 , 2 , 2 , 4 ] , 4 ) )",
    "execution_output": 6
  },
  {
    "id": 537,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i-1] - 1\n            while cnt > k:\n                cnt -= l[j+1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 5 , 3 , 3 , 5 , 4 , 4 , 4 , 5 , 6 , 6 , 5 , 7 , 7 , 7 , 5 , 8 , 8 , 8 , 8 , 5 , 9 , 9 , 5 , 5 , 10 , 10 , 10 , 5 , 11 , 11 , 11 , 11 , 11 , 5 , 12 , 12 , 5 , 13 , 5 ] , 6 ) )",
    "execution_output": 5
  },
  {
    "id": 538,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i-1] - 1\n            while cnt > k:\n                cnt -= l[j+1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ 2 , 1 , 2 , 3 , 2 , 4 , 2 , 5 , 2 , 1 , 2 , 3 , 2 , 4 , 2 , 5 , 3 , 2 , 1 , 2 , 4 , 2 , 3 , 2 , 5 , 2 , 4 , 2 , 1 , 2 , 6 , 2 , 7 , 2 , 8 , 2 ] , 7 ) )",
    "execution_output": 8
  },
  {
    "id": 539,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i-1] - 1\n            while cnt > k:\n                cnt -= l[j+1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint ( longestEqualSubarray ( [ - 1 , 2 , - 1 , 3 , - 1 , 2 , - 1 , 3 , - 1 , 2 , - 1 , 3 , - 1 , 2 , - 1 , 3 , - 1 , 4 , - 1 , 5 , - 1 ] , 2 ) )",
    "execution_output": 3
  },
  {
    "id": 540,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint ( minimumPossibleSum ( 50 , 97 ) )",
    "execution_output": 1371
  },
  {
    "id": 541,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint ( minimumPossibleSum ( 60 , 101 ) )",
    "execution_output": 2330
  },
  {
    "id": 542,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint ( minimumPossibleSum ( 32 , 64 ) )",
    "execution_output": 528
  },
  {
    "id": 543,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint ( minimumPossibleSum ( 45 , 70 ) )",
    "execution_output": 1375
  },
  {
    "id": 544,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint ( minimumPossibleSum ( 20 , 100 ) )",
    "execution_output": 210
  },
  {
    "id": 545,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target//2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumPossibleSum ( 5 , 9 ) )",
    "execution_output": 19
  },
  {
    "id": 546,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target//2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumPossibleSum ( 11 , 20 ) )",
    "execution_output": 75
  },
  {
    "id": 547,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target//2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumPossibleSum ( 8 , 8 ) )",
    "execution_output": 48
  },
  {
    "id": 548,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target//2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumPossibleSum ( 3 , 1000 ) )",
    "execution_output": 6
  },
  {
    "id": 549,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target//2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint ( minimumPossibleSum ( 10 , 7 ) )",
    "execution_output": 76
  },
  {
    "id": 550,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2] :\n        return (1+n) * n // 2\n    if n - 1 + n < target : \n        return (1+n) * n // 2\n    \n    not_used = list(range(target//2+1, target))\n    l = n + len(not_used)\n    to_ret = (1+l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint ( minimumPossibleSum ( 7 , 11 ) )",
    "execution_output": 38
  },
  {
    "id": 551,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2] :\n        return (1+n) * n // 2\n    if n - 1 + n < target : \n        return (1+n) * n // 2\n    \n    not_used = list(range(target//2+1, target))\n    l = n + len(not_used)\n    to_ret = (1+l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint ( minimumPossibleSum ( 10 , 18 ) )",
    "execution_output": 63
  },
  {
    "id": 552,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2] :\n        return (1+n) * n // 2\n    if n - 1 + n < target : \n        return (1+n) * n // 2\n    \n    not_used = list(range(target//2+1, target))\n    l = n + len(not_used)\n    to_ret = (1+l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint ( minimumPossibleSum ( 12 , 17 ) )",
    "execution_output": 110
  },
  {
    "id": 553,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2] :\n        return (1+n) * n // 2\n    if n - 1 + n < target : \n        return (1+n) * n // 2\n    \n    not_used = list(range(target//2+1, target))\n    l = n + len(not_used)\n    to_ret = (1+l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint ( minimumPossibleSum ( 8 , 13 ) )",
    "execution_output": 48
  },
  {
    "id": 554,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2] :\n        return (1+n) * n // 2\n    if n - 1 + n < target : \n        return (1+n) * n // 2\n    \n    not_used = list(range(target//2+1, target))\n    l = n + len(not_used)\n    to_ret = (1+l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint ( minimumPossibleSum ( 5 , 12 ) )",
    "execution_output": 15
  },
  {
    "id": 555,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint ( minimumPossibleSum ( 5 , 7 ) )",
    "execution_output": 21
  },
  {
    "id": 556,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint ( minimumPossibleSum ( 10 , 10 ) )",
    "execution_output": 75
  },
  {
    "id": 557,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint ( minimumPossibleSum ( 100 , 150 ) )",
    "execution_output": 6900
  },
  {
    "id": 558,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint ( minimumPossibleSum ( 500 , 501 ) )",
    "execution_output": 187750
  },
  {
    "id": 559,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint ( minimumPossibleSum ( 1000 , 3254323 ) )",
    "execution_output": 500500
  },
  {
    "id": 560,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    \n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    \n    return sum(arr)\nprint ( minimumPossibleSum ( 5 , 20 ) )",
    "execution_output": 15
  },
  {
    "id": 561,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    \n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    \n    return sum(arr)\nprint ( minimumPossibleSum ( 7 , 10 ) )",
    "execution_output": 36
  },
  {
    "id": 562,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    \n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    \n    return sum(arr)\nprint ( minimumPossibleSum ( 8 , 9 ) )",
    "execution_output": 52
  },
  {
    "id": 563,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    \n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    \n    return sum(arr)\nprint ( minimumPossibleSum ( 12 , 7 ) )",
    "execution_output": 105
  },
  {
    "id": 564,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    \n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    \n    return sum(arr)\nprint ( minimumPossibleSum ( 100 , 123 ) )",
    "execution_output": 7429
  },
  {
    "id": 565,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1,2*10**5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target-x)\n        if n == 0:\n            break\n    return curr_sum\nprint ( minimumPossibleSum ( 12 , 15 ) )",
    "execution_output": 113
  },
  {
    "id": 566,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1,2*10**5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target-x)\n        if n == 0:\n            break\n    return curr_sum\nprint ( minimumPossibleSum ( 510 , 1000 ) )",
    "execution_output": 135295
  },
  {
    "id": 567,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1,2*10**5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target-x)\n        if n == 0:\n            break\n    return curr_sum\nprint ( minimumPossibleSum ( 5000 , 3 ) )",
    "execution_output": 12507499
  },
  {
    "id": 568,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1,2*10**5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target-x)\n        if n == 0:\n            break\n    return curr_sum\nprint ( minimumPossibleSum ( 80000 , 150000 ) )",
    "execution_output": 3575035000
  },
  {
    "id": 569,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1,2*10**5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target-x)\n        if n == 0:\n            break\n    return curr_sum\nprint ( minimumPossibleSum ( 100000 , 200000 ) )",
    "execution_output": 5000050000
  },
  {
    "id": 570,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint ( minOperations ( [ 64 , 32 , 16 ] , 63 ) )",
    "execution_output": 6
  },
  {
    "id": 571,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint ( minOperations ( [ 50 , 30 , 20 , 15 , 10 ] , 55 ) )",
    "execution_output": 1
  },
  {
    "id": 572,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint ( minOperations ( [ 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 ] , 95 ) )",
    "execution_output": 1
  },
  {
    "id": 573,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint ( minOperations ( [ 40 , 33 , 25 , 10 , 7 ] , 59 ) )",
    "execution_output": 1
  },
  {
    "id": 574,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint ( minOperations ( [ 128 , 64 , 1 ] , 127 ) )",
    "execution_output": 6
  },
  {
    "id": 575,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums)<target:return -1\n    cnt=[0]*32\n    for a in nums:\n        l=a.bit_length()-1\n        cnt[l]+=1\n    ans=0\n    for k in range(31):\n        if target>>k&1:\n            i=k\n            while cnt[i]==0:i+=1\n            while i>k:\n                cnt[i]-=1\n                cnt[i-1]+=2\n                ans+=1\n                i-=1\n            cnt[k]-=1\n        cnt[k+1]+=cnt[k]//2\n    return ans\nprint ( minOperations ( [ 64 , 4 , 4 , 2 ] , 63 ) )",
    "execution_output": 5
  },
  {
    "id": 576,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums)<target:return -1\n    cnt=[0]*32\n    for a in nums:\n        l=a.bit_length()-1\n        cnt[l]+=1\n    ans=0\n    for k in range(31):\n        if target>>k&1:\n            i=k\n            while cnt[i]==0:i+=1\n            while i>k:\n                cnt[i]-=1\n                cnt[i-1]+=2\n                ans+=1\n                i-=1\n            cnt[k]-=1\n        cnt[k+1]+=cnt[k]//2\n    return ans\nprint ( minOperations ( [ 1 ] * 30 + [ 2 ] * 15 + [ 8 ] * 5 + [ 16 ] * 3 , 70 ) )",
    "execution_output": 0
  },
  {
    "id": 577,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums)<target:return -1\n    cnt=[0]*32\n    for a in nums:\n        l=a.bit_length()-1\n        cnt[l]+=1\n    ans=0\n    for k in range(31):\n        if target>>k&1:\n            i=k\n            while cnt[i]==0:i+=1\n            while i>k:\n                cnt[i]-=1\n                cnt[i-1]+=2\n                ans+=1\n                i-=1\n            cnt[k]-=1\n        cnt[k+1]+=cnt[k]//2\n    return ans\nprint ( minOperations ( [ 256 , 64 , 8 , 8 , 4 , 2 , 2 ] , 310 ) )",
    "execution_output": 1
  },
  {
    "id": 578,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums)<target:return -1\n    cnt=[0]*32\n    for a in nums:\n        l=a.bit_length()-1\n        cnt[l]+=1\n    ans=0\n    for k in range(31):\n        if target>>k&1:\n            i=k\n            while cnt[i]==0:i+=1\n            while i>k:\n                cnt[i]-=1\n                cnt[i-1]+=2\n                ans+=1\n                i-=1\n            cnt[k]-=1\n        cnt[k+1]+=cnt[k]//2\n    return ans\nprint ( minOperations ( [ 1024 , 128 , 32 , 2 , 2 , 2 , 2 , 1 ] , 999 ) )",
    "execution_output": 4
  },
  {
    "id": 579,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums)<target:return -1\n    cnt=[0]*32\n    for a in nums:\n        l=a.bit_length()-1\n        cnt[l]+=1\n    ans=0\n    for k in range(31):\n        if target>>k&1:\n            i=k\n            while cnt[i]==0:i+=1\n            while i>k:\n                cnt[i]-=1\n                cnt[i-1]+=2\n                ans+=1\n                i-=1\n            cnt[k]-=1\n        cnt[k+1]+=cnt[k]//2\n    return ans\nprint ( minOperations ( [ 512 , 512 , 16 , 16 , 16 , 8 ] , 777 ) )",
    "execution_output": 5
  },
  {
    "id": 580,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count(\"0\")\n    \n    a = [\"00\", \"25\", \"75\", \"50\"]\n    \n    for x in a:\n        \n        i = 1\n        j = n-1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0: continue\n        ans = min(ans, n - (j+3))\n    return ans\nprint ( minimumOperations ( \"8272501\" ) )",
    "execution_output": 1
  },
  {
    "id": 581,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count(\"0\")\n    \n    a = [\"00\", \"25\", \"75\", \"50\"]\n    \n    for x in a:\n        \n        i = 1\n        j = n-1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0: continue\n        ans = min(ans, n - (j+3))\n    return ans\nprint ( minimumOperations ( \"9090705\" ) )",
    "execution_output": 1
  },
  {
    "id": 582,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count(\"0\")\n    \n    a = [\"00\", \"25\", \"75\", \"50\"]\n    \n    for x in a:\n        \n        i = 1\n        j = n-1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0: continue\n        ans = min(ans, n - (j+3))\n    return ans\nprint ( minimumOperations ( \"1005002\" ) )",
    "execution_output": 1
  },
  {
    "id": 583,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count(\"0\")\n    \n    a = [\"00\", \"25\", \"75\", \"50\"]\n    \n    for x in a:\n        \n        i = 1\n        j = n-1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0: continue\n        ans = min(ans, n - (j+3))\n    return ans\nprint ( minimumOperations ( \"752251\" ) )",
    "execution_output": 1
  },
  {
    "id": 584,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count(\"0\")\n    \n    a = [\"00\", \"25\", \"75\", \"50\"]\n    \n    for x in a:\n        \n        i = 1\n        j = n-1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0: continue\n        ans = min(ans, n - (j+3))\n    return ans\nprint ( minimumOperations ( \"4060753\" ) )",
    "execution_output": 1
  },
  {
    "id": 585,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    \n    num = '00'+num\n    \n    ans = len(num)-2\n    n = len(num)\n    \n    for e in ends:\n        u, v = e[0], e[1]\n        \n        idx1 = n-1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1-1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n-2-idx2)\n        \n    return ans\nprint ( minimumOperations ( \"1234567890\" ) )",
    "execution_output": 4
  },
  {
    "id": 586,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    \n    num = '00'+num\n    \n    ans = len(num)-2\n    n = len(num)\n    \n    for e in ends:\n        u, v = e[0], e[1]\n        \n        idx1 = n-1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1-1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n-2-idx2)\n        \n    return ans\nprint ( minimumOperations ( \"70905264\" ) )",
    "execution_output": 5
  },
  {
    "id": 587,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    \n    num = '00'+num\n    \n    ans = len(num)-2\n    n = len(num)\n    \n    for e in ends:\n        u, v = e[0], e[1]\n        \n        idx1 = n-1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1-1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n-2-idx2)\n        \n    return ans\nprint ( minimumOperations ( \"1002003004005\" ) )",
    "execution_output": 1
  },
  {
    "id": 588,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    \n    num = '00'+num\n    \n    ans = len(num)-2\n    n = len(num)\n    \n    for e in ends:\n        u, v = e[0], e[1]\n        \n        idx1 = n-1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1-1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n-2-idx2)\n        \n    return ans\nprint ( minimumOperations ( \"7777555515\" ) )",
    "execution_output": 5
  },
  {
    "id": 589,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    \n    num = '00'+num\n    \n    ans = len(num)-2\n    n = len(num)\n    \n    for e in ends:\n        u, v = e[0], e[1]\n        \n        idx1 = n-1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1-1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n-2-idx2)\n        \n    return ans\nprint ( minimumOperations ( \"234772\" ) )",
    "execution_output": 6
  },
  {
    "id": 590,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    # 删空\n    ans = len(s)\n    # 留 1\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            # 00 25 50 75\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint ( minimumOperations ( \"7002501\" ) )",
    "execution_output": 1
  },
  {
    "id": 591,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    # 删空\n    ans = len(s)\n    # 留 1\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            # 00 25 50 75\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint ( minimumOperations ( \"17750\" ) )",
    "execution_output": 0
  },
  {
    "id": 592,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    # 删空\n    ans = len(s)\n    # 留 1\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            # 00 25 50 75\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint ( minimumOperations ( \"2525752\" ) )",
    "execution_output": 1
  },
  {
    "id": 593,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    # 删空\n    ans = len(s)\n    # 留 1\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            # 00 25 50 75\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint ( minimumOperations ( \"8649134689134689\" ) )",
    "execution_output": 16
  },
  {
    "id": 594,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    # 删空\n    ans = len(s)\n    # 留 1\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            # 00 25 50 75\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint ( minimumOperations ( \"1002003004\" ) )",
    "execution_output": 1
  },
  {
    "id": 595,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if \"0\" in num else len(num)\n    modes = [\"00\", \"25\", \"50\", \"75\"]\n    for mode in modes:\n        i, j = len(num) - 1, len(mode) - 1\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint ( minimumOperations ( \"9876543210\" ) )",
    "execution_output": 4
  },
  {
    "id": 596,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if \"0\" in num else len(num)\n    modes = [\"00\", \"25\", \"50\", \"75\"]\n    for mode in modes:\n        i, j = len(num) - 1, len(mode) - 1\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint ( minimumOperations ( \"12030507090\" ) )",
    "execution_output": 1
  },
  {
    "id": 597,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if \"0\" in num else len(num)\n    modes = [\"00\", \"25\", \"50\", \"75\"]\n    for mode in modes:\n        i, j = len(num) - 1, len(mode) - 1\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint ( minimumOperations ( \"2502501\" ) )",
    "execution_output": 1
  },
  {
    "id": 598,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if \"0\" in num else len(num)\n    modes = [\"00\", \"25\", \"50\", \"75\"]\n    for mode in modes:\n        i, j = len(num) - 1, len(mode) - 1\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint ( minimumOperations ( \"700052\" ) )",
    "execution_output": 2
  },
  {
    "id": 599,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if \"0\" in num else len(num)\n    modes = [\"00\", \"25\", \"50\", \"75\"]\n    for mode in modes:\n        i, j = len(num) - 1, len(mode) - 1\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint ( minimumOperations ( \"111125010\" ) )",
    "execution_output": 1
  },
  {
    "id": 600,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    \n    for i, c in enumerate(('00'+num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i-1\nprint ( minimumOperations ( \"3254323\" ) )",
    "execution_output": 4
  },
  {
    "id": 601,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    \n    for i, c in enumerate(('00'+num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i-1\nprint ( minimumOperations ( \"105845302\" ) )",
    "execution_output": 2
  },
  {
    "id": 602,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    \n    for i, c in enumerate(('00'+num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i-1\nprint ( minimumOperations ( \"7002501\" ) )",
    "execution_output": 1
  },
  {
    "id": 603,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    \n    for i, c in enumerate(('00'+num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i-1\nprint ( minimumOperations ( \"1234567890\" ) )",
    "execution_output": 4
  },
  {
    "id": 604,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    \n    for i, c in enumerate(('00'+num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i-1\nprint ( minimumOperations ( \"234772\" ) )",
    "execution_output": 6
  },
  {
    "id": 605,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint ( minimumOperations ( \"560123\" ) )",
    "execution_output": 4
  },
  {
    "id": 606,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint ( minimumOperations ( \"1023456789\" ) )",
    "execution_output": 6
  },
  {
    "id": 607,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint ( minimumOperations ( \"7005002\" ) )",
    "execution_output": 1
  },
  {
    "id": 608,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint ( minimumOperations ( \"9384756102\" ) )",
    "execution_output": 3
  },
  {
    "id": 609,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint ( minimumOperations ( \"42050076\" ) )",
    "execution_output": 2
  },
  {
    "id": 610,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] , 3 , 1 ) )",
    "execution_output": 25
  },
  {
    "id": 611,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 ] , 2 , 1 ) )",
    "execution_output": 36
  },
  {
    "id": 612,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 2 , 3 , 7 , 8 , 12 , 13 , 17 , 18 , 22 , 23 ] , 5 , 3 ) )",
    "execution_output": 10
  },
  {
    "id": 613,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 4 , 1 , 8 , 2 , 12 , 3 , 16 , 5 , 20 , 6 ] , 4 , 0 ) )",
    "execution_output": 11
  },
  {
    "id": 614,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 6 , 13 , 20 , 27 , 34 , 41 , 1 , 8 , 15 , 22 , 29 , 36 ] , 7 , 6 ) )",
    "execution_output": 7
  },
  {
    "id": 615,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo == k\n        s %= modulo\n        ans += cnt[(s-k)%modulo]\n        cnt[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 7 , - 3 , 12 , 5 , 2 , 9 , 17 , - 8 , 22 , 14 , 3 , - 12 , 27 , 6 , 18 , - 7 , 11 , 32 , - 13 , 0 , 4 , 19 , 23 , - 2 , 10 ] , 5 , 2 ) )",
    "execution_output": 81
  },
  {
    "id": 616,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo == k\n        s %= modulo\n        ans += cnt[(s-k)%modulo]\n        cnt[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 7 , 14 , 1 , 2 , 21 , 3 , 4 , 28 , 5 , 6 , 35 , 8 , 9 , 42 , 10 , 11 , 49 , 12 , 13 , 56 , 14 , 15 , 63 , 16 , 17 , 70 , 18 , 19 ] , 7 , 0 ) )",
    "execution_output": 53
  },
  {
    "id": 617,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo == k\n        s %= modulo\n        ans += cnt[(s-k)%modulo]\n        cnt[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 ] , 4 , 1 ) )",
    "execution_output": 152
  },
  {
    "id": 618,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo == k\n        s %= modulo\n        ans += cnt[(s-k)%modulo]\n        cnt[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 2 , 5 , 8 , 11 , 14 , 17 , 20 , 23 , 26 , 29 , 1 , 4 , 7 , 10 , 13 , 16 , 19 , 22 , 25 , 28 , 31 , 34 , 37 , 40 ] , 3 , 2 ) )",
    "execution_output": 60
  },
  {
    "id": 619,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a%modulo == k\n        s %= modulo\n        ans += cnt[(s-k)%modulo]\n        cnt[s] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 4 , 10 , 16 , - 2 , 7 , 13 , 19 , 25 , 31 , - 5 , 0 , 5 , 11 , 17 , 23 , 29 , 35 , 41 , - 11 , 6 , 12 , 18 , 24 , 30 , 36 , 42 , - 17 , 8 , 14 , 20 ] , 6 , 4 ) )",
    "execution_output": 27
  },
  {
    "id": 620,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if (nums[i] % m) == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    # (s - x + m) % m = k\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint ( countInterestingSubarrays ( [ 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 ] , 3 , 1 ) )",
    "execution_output": 126
  },
  {
    "id": 621,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if (nums[i] % m) == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    # (s - x + m) % m = k\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint ( countInterestingSubarrays ( [ 2 , 3 , 6 , 7 , 10 , 11 , 14 , 15 , 18 , 19 , 22 , 23 , 26 , 27 , 30 , 31 , 34 , 35 , 38 , 39 , 42 , 43 , 46 , 47 , 50 , 51 , 54 , 55 , 58 , 59 ] , 4 , 2 ) )",
    "execution_output": 120
  },
  {
    "id": 622,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if (nums[i] % m) == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    # (s - x + m) % m = k\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint ( countInterestingSubarrays ( [ 5 , 12 , 19 , 26 , 33 , 40 , 1 , 8 , 15 , 22 , 29 , 36 , 3 , 10 , 17 , 24 , 31 , 38 , 6 , 13 , 20 , 27 , 34 , 41 , 2 , 9 , 16 , 23 ] , 7 , 5 ) )",
    "execution_output": 24
  },
  {
    "id": 623,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if (nums[i] % m) == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    # (s - x + m) % m = k\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint ( countInterestingSubarrays ( [ 5 , 7 , 10 , 12 , 15 , 17 , 20 , 21 , 25 , 26 , 30 , 31 , 35 , 36 , 40 , 41 , 45 , 46 , 50 , 51 , 55 , 56 ] , 5 , 0 ) )",
    "execution_output": 43
  },
  {
    "id": 624,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if (nums[i] % m) == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    # (s - x + m) % m = k\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint ( countInterestingSubarrays ( [ 3 , 12 , 21 , 30 , 39 , 48 , 57 , 66 , 75 , 84 , 5 , 14 , 23 , 32 , 41 , 50 , 59 , 68 , 77 , 86 , 1 , 10 , 19 , 28 , 37 , 46 ] , 9 , 3 ) )",
    "execution_output": 24
  },
  {
    "id": 625,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0]=1\n    ans = 0\n    for c in nums:\n        if c%modulo==k:\n            s+=1\n            s%=modulo\n        ns = s-k\n        if ns<0:\n            ns+=modulo\n        if ns in cnt:\n            ans+=cnt[ns]\n        if s not in cnt:\n            cnt[s]=0\n        cnt[s]+=1\n    return ans\nprint ( countInterestingSubarrays ( [ 3 , 1 , 4 , 1 , 5 , 9 , 2 , 6 , 5 , 3 , 5 ] , 3 , 1 ) )",
    "execution_output": 11
  },
  {
    "id": 626,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0]=1\n    ans = 0\n    for c in nums:\n        if c%modulo==k:\n            s+=1\n            s%=modulo\n        ns = s-k\n        if ns<0:\n            ns+=modulo\n        if ns in cnt:\n            ans+=cnt[ns]\n        if s not in cnt:\n            cnt[s]=0\n        cnt[s]+=1\n    return ans\nprint ( countInterestingSubarrays ( [ 10 , 12 , 15 , 20 , 25 , 30 , 35 , 40 , 21 , 22 , 23 , 24 , 25 ] , 5 , 0 ) )",
    "execution_output": 20
  },
  {
    "id": 627,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0]=1\n    ans = 0\n    for c in nums:\n        if c%modulo==k:\n            s+=1\n            s%=modulo\n        ns = s-k\n        if ns<0:\n            ns+=modulo\n        if ns in cnt:\n            ans+=cnt[ns]\n        if s not in cnt:\n            cnt[s]=0\n        cnt[s]+=1\n    return ans\nprint ( countInterestingSubarrays ( [ - 8 , - 4 , 0 , 4 , 8 , - 1 , 3 , 7 , 11 , 15 , - 12 ] , 4 , 0 ) )",
    "execution_output": 23
  },
  {
    "id": 628,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0]=1\n    ans = 0\n    for c in nums:\n        if c%modulo==k:\n            s+=1\n            s%=modulo\n        ns = s-k\n        if ns<0:\n            ns+=modulo\n        if ns in cnt:\n            ans+=cnt[ns]\n        if s not in cnt:\n            cnt[s]=0\n        cnt[s]+=1\n    return ans\nprint ( countInterestingSubarrays ( [ 7 , 14 , 21 , 28 , 35 , 3 , 10 , 17 , 24 , 31 , 38 , 45 , 52 ] , 7 , 3 ) )",
    "execution_output": 11
  },
  {
    "id": 629,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0]=1\n    ans = 0\n    for c in nums:\n        if c%modulo==k:\n            s+=1\n            s%=modulo\n        ns = s-k\n        if ns<0:\n            ns+=modulo\n        if ns in cnt:\n            ans+=cnt[ns]\n        if s not in cnt:\n            cnt[s]=0\n        cnt[s]+=1\n    return ans\nprint ( countInterestingSubarrays ( [ 5 , 11 , 17 , 23 , 29 , 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 ] , 6 , 5 ) )",
    "execution_output": 11
  },
  {
    "id": 630,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n    def zero():\n        return 0\n    \n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    \n    for i in range(1, n + 1):\n        a[i] += a[i - 1] \n        \n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 ] , 3 , 1 ) )",
    "execution_output": 83
  },
  {
    "id": 631,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n    def zero():\n        return 0\n    \n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    \n    for i in range(1, n + 1):\n        a[i] += a[i - 1] \n        \n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 10 , 14 , 21 , 22 , 5 , 18 , 33 , 7 , 28 , 6 , 13 , 20 , 1 , 8 , 15 , 26 , 9 , 16 , 23 , 30 , 37 , 44 , 51 , 58 , 65 ] , 7 , 3 ) )",
    "execution_output": 0
  },
  {
    "id": 632,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n    def zero():\n        return 0\n    \n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    \n    for i in range(1, n + 1):\n        a[i] += a[i - 1] \n        \n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 21 , 22 , 25 , 26 , 27 ] , 2 , 1 ) )",
    "execution_output": 144
  },
  {
    "id": 633,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n    def zero():\n        return 0\n    \n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    \n    for i in range(1, n + 1):\n        a[i] += a[i - 1] \n        \n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 4 , 8 , 12 , 16 , 20 , 24 , 1 , 2 , 3 , 5 , 6 , 7 , 9 , 10 , 11 , 13 , 14 , 15 , 18 , 19 , 21 , 22 , 23 , 28 ] , 4 , 0 ) )",
    "execution_output": 174
  },
  {
    "id": 634,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n    def zero():\n        return 0\n    \n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    \n    for i in range(1, n + 1):\n        a[i] += a[i - 1] \n        \n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint ( countInterestingSubarrays ( [ 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 ] , 5 , 2 ) )",
    "execution_output": 55
  },
  {
    "id": 635,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt=0\n    ans=0\n    last=-1\n    c=Counter([0])\n    for x in nums:\n        if x%m==k:\n            cnt+=1\n        ans+=c[(cnt-k)%m]\n\n        \n        c[cnt%m]+=1\n\n        \n            # last=i\n        \n        \n    return ans\nprint ( countInterestingSubarrays ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 ] , 3 , 1 ) )",
    "execution_output": 51
  },
  {
    "id": 636,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt=0\n    ans=0\n    last=-1\n    c=Counter([0])\n    for x in nums:\n        if x%m==k:\n            cnt+=1\n        ans+=c[(cnt-k)%m]\n\n        \n        c[cnt%m]+=1\n\n        \n            # last=i\n        \n        \n    return ans\nprint ( countInterestingSubarrays ( [ 2 , 3 , 7 , 12 , 17 , 22 , 27 , 32 , 37 , 42 , 1 , 6 , 11 , 16 , 21 , 26 , 31 , 36 , 41 , 46 ] , 5 , 2 ) )",
    "execution_output": 33
  },
  {
    "id": 637,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt=0\n    ans=0\n    last=-1\n    c=Counter([0])\n    for x in nums:\n        if x%m==k:\n            cnt+=1\n        ans+=c[(cnt-k)%m]\n\n        \n        c[cnt%m]+=1\n\n        \n            # last=i\n        \n        \n    return ans\nprint ( countInterestingSubarrays ( [ 10 , 3 , 14 , 21 , 5 , 18 , 24 , 31 , 2 , 9 , 16 , 23 , 30 , 37 , 44 ] , 7 , 3 ) )",
    "execution_output": 9
  },
  {
    "id": 638,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt=0\n    ans=0\n    last=-1\n    c=Counter([0])\n    for x in nums:\n        if x%m==k:\n            cnt+=1\n        ans+=c[(cnt-k)%m]\n\n        \n        c[cnt%m]+=1\n\n        \n            # last=i\n        \n        \n    return ans\nprint ( countInterestingSubarrays ( [ 1 , 5 , 9 , 13 , 2 , 6 , 10 , 14 , 3 , 7 , 11 , 15 , 4 , 8 , 12 , 16 ] , 4 , 1 ) )",
    "execution_output": 16
  },
  {
    "id": 639,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt=0\n    ans=0\n    last=-1\n    c=Counter([0])\n    for x in nums:\n        if x%m==k:\n            cnt+=1\n        ans+=c[(cnt-k)%m]\n\n        \n        c[cnt%m]+=1\n\n        \n            # last=i\n        \n        \n    return ans\nprint ( countInterestingSubarrays ( [ 9 , 18 , 27 , 1 , 2 , 3 , 36 , 45 , 54 , 5 , 6 , 63 , 72 , 81 , 7 , 8 ] , 9 , 0 ) )",
    "execution_output": 15
  },
  {
    "id": 640,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n+1):\n        l = (g == 0) or g > nums[g-1]\n        r = (g == n) or g < nums[g]\n        c += l and r\n    return int(c)\nprint ( countWays ( [ 0 , 1 , 3 , 3 , 5 , 5 , 7 , 8 ] ) )",
    "execution_output": 3
  },
  {
    "id": 641,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n+1):\n        l = (g == 0) or g > nums[g-1]\n        r = (g == n) or g < nums[g]\n        c += l and r\n    return int(c)\nprint ( countWays ( [ 0 , 1 , 2 , 3 , 5 , 6 ] ) )",
    "execution_output": 1
  },
  {
    "id": 642,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n+1):\n        l = (g == 0) or g > nums[g-1]\n        r = (g == n) or g < nums[g]\n        c += l and r\n    return int(c)\nprint ( countWays ( [ - 3 , - 1 , 0 , 0 , 4 , 7 , 10 ] ) )",
    "execution_output": 1
  },
  {
    "id": 643,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n+1):\n        l = (g == 0) or g > nums[g-1]\n        r = (g == n) or g < nums[g]\n        c += l and r\n    return int(c)\nprint ( countWays ( [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 5 ] ) )",
    "execution_output": 2
  },
  {
    "id": 644,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n+1):\n        l = (g == 0) or g > nums[g-1]\n        r = (g == n) or g < nums[g]\n        c += l and r\n    return int(c)\nprint ( countWays ( [ - 5 , - 2 , - 1 , - 1 , 0 ] ) )",
    "execution_output": 1
  },
  {
    "id": 645,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-0x3f3f3f3f)\n    nums.append(0x3f3f3f3f)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint ( countWays ( [ 3 , - 1 , 2 , 2 , 7 , 0 , 5 , - 3 , 8 , 1 ] ) )",
    "execution_output": 1
  },
  {
    "id": 646,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-0x3f3f3f3f)\n    nums.append(0x3f3f3f3f)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint ( countWays ( [ - 5 , - 2 , 0 , 1 , 4 , 9 , 10 , 15 ] ) )",
    "execution_output": 1
  },
  {
    "id": 647,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-0x3f3f3f3f)\n    nums.append(0x3f3f3f3f)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint ( countWays ( [ 20 , 10 , 5 , 0 , - 5 , - 10 ] ) )",
    "execution_output": 1
  },
  {
    "id": 648,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-0x3f3f3f3f)\n    nums.append(0x3f3f3f3f)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint ( countWays ( [ 1 , 1 , 1 , 2 , 2 , 3 , 3 , 3 , 3 , 4 ] ) )",
    "execution_output": 2
  },
  {
    "id": 649,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-0x3f3f3f3f)\n    nums.append(0x3f3f3f3f)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint ( countWays ( [ 234772 , 5 , 12 , 9999 , - 100 , 3254323 , 50 , 77 , 123456 , - 250 ] ) )",
    "execution_output": 1
  },
  {
    "id": 650,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    \n    res = 1  # select all\n    \n    if nums.count(0) == 0:  # select none\n        res += 1\n    \n    for i,(x,y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            # print(x,i,y)\n            res += 1\n            \n    # print()\n    \n    return res\nprint ( countWays ( [ 1 , 2 , 2 , 4 , 6 , 9 ] ) )",
    "execution_output": 3
  },
  {
    "id": 651,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    \n    res = 1  # select all\n    \n    if nums.count(0) == 0:  # select none\n        res += 1\n    \n    for i,(x,y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            # print(x,i,y)\n            res += 1\n            \n    # print()\n    \n    return res\nprint ( countWays ( [ - 2 , - 1 , 0 , 2 , 4 , 7 ] ) )",
    "execution_output": 2
  },
  {
    "id": 652,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    \n    res = 1  # select all\n    \n    if nums.count(0) == 0:  # select none\n        res += 1\n    \n    for i,(x,y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            # print(x,i,y)\n            res += 1\n            \n    # print()\n    \n    return res\nprint ( countWays ( [ 1 , 1 , 3 , 5 , 7 , 9 , 12 , 15 ] ) )",
    "execution_output": 3
  },
  {
    "id": 653,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    \n    res = 1  # select all\n    \n    if nums.count(0) == 0:  # select none\n        res += 1\n    \n    for i,(x,y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            # print(x,i,y)\n            res += 1\n            \n    # print()\n    \n    return res\nprint ( countWays ( [ 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 ] ) )",
    "execution_output": 2
  },
  {
    "id": 654,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    \n    res = 1  # select all\n    \n    if nums.count(0) == 0:  # select none\n        res += 1\n    \n    for i,(x,y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            # print(x,i,y)\n            res += 1\n            \n    # print()\n    \n    return res\nprint ( countWays ( [ 5 , 0 , 3 , 8 , 1 , 9 , 2 , 7 ] ) )",
    "execution_output": 2
  },
  {
    "id": 655,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i-1] >= i: continue\n        if i < n and nums[i] <= i: continue\n        ans += 1\n    return ans\nprint ( countWays ( [ 3 , - 1 , 0 , 2 , 2 , 5 , - 2 , 4 ] ) )",
    "execution_output": 1
  },
  {
    "id": 656,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i-1] >= i: continue\n        if i < n and nums[i] <= i: continue\n        ans += 1\n    return ans\nprint ( countWays ( [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 4 , 6 , 6 , 7 ] ) )",
    "execution_output": 2
  },
  {
    "id": 657,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i-1] >= i: continue\n        if i < n and nums[i] <= i: continue\n        ans += 1\n    return ans\nprint ( countWays ( [ - 4 , - 1 , 0 , 2 , 2 , 2 , 5 , 9 , 9 , 10 ] ) )",
    "execution_output": 1
  },
  {
    "id": 658,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i-1] >= i: continue\n        if i < n and nums[i] <= i: continue\n        ans += 1\n    return ans\nprint ( countWays ( [ 0 , 0 , 3 , 4 , 5 , 12 , - 3 , - 2 , 8 , 9 , 10 ] ) )",
    "execution_output": 1
  },
  {
    "id": 659,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i-1] >= i: continue\n        if i < n and nums[i] <= i: continue\n        ans += 1\n    return ans\nprint ( countWays ( [ 10 , 9 , 8 , 1 , 1 , 2 , 2 , 3 , 5 , 7 ] ) )",
    "execution_output": 2
  },
  {
    "id": 660,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    # 都选\n    ans += n > nums[0]\n    \n    # 都不选\n    ans += 0 < nums[-1]\n    \n    for i in range(n - 1):\n        # 前面都不选，后面都选\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    \n    return ans\nprint ( countWays ( [ 5 , 3 , 3 , 3 , 2 , 2 , 1 , 0 , 5 , 5 , 4 , 4 , 6 ] ) )",
    "execution_output": 1
  },
  {
    "id": 661,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    # 都选\n    ans += n > nums[0]\n    \n    # 都不选\n    ans += 0 < nums[-1]\n    \n    for i in range(n - 1):\n        # 前面都不选，后面都选\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    \n    return ans\nprint ( countWays ( [ - 1 , 0 , 2 , 2 , 4 , 7 , 7 , 8 , 10 , 10 , 1 , 3 , 5 ] ) )",
    "execution_output": 1
  },
  {
    "id": 662,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    # 都选\n    ans += n > nums[0]\n    \n    # 都不选\n    ans += 0 < nums[-1]\n    \n    for i in range(n - 1):\n        # 前面都不选，后面都选\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    \n    return ans\nprint ( countWays ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) )",
    "execution_output": 1
  },
  {
    "id": 663,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    # 都选\n    ans += n > nums[0]\n    \n    # 都不选\n    ans += 0 < nums[-1]\n    \n    for i in range(n - 1):\n        # 前面都不选，后面都选\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    \n    return ans\nprint ( countWays ( [ 12 , 12 , 11 , 1 , 1 , 5 , 6 , 6 , 7 , 0 , 3 , 9 , 9 , 4 ] ) )",
    "execution_output": 1
  },
  {
    "id": 664,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    # 都选\n    ans += n > nums[0]\n    \n    # 都不选\n    ans += 0 < nums[-1]\n    \n    for i in range(n - 1):\n        # 前面都不选，后面都选\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    \n    return ans\nprint ( countWays ( [ 1000 , 999 , 500 , 500 , 250 , 250 , 250 , 10 , 9 , 9 , 8 , 1200 , 700 ] ) )",
    "execution_output": 1
  },
  {
    "id": 665,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i-1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint ( countWays ( [ 2 , 1 , 2 , 3 , 0 , 4 , 4 ] ) )",
    "execution_output": 1
  },
  {
    "id": 666,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i-1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint ( countWays ( [ 0 , 0 , 0 , 1 , 1 , 3 , 5 , 6 ] ) )",
    "execution_output": 1
  },
  {
    "id": 667,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i-1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint ( countWays ( [ 1 , 2 , 2 , 2 , 6 , 7 , 8 , 9 ] ) )",
    "execution_output": 3
  },
  {
    "id": 668,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i-1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint ( countWays ( [ 0 , 1 , 1 , 1 , 2 , 3 , 5 , 8 ] ) )",
    "execution_output": 2
  },
  {
    "id": 669,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i-1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint ( countWays ( [ 3 , 0 , 0 , 2 , 5 , 1 , 4 , 2 , 3 ] ) )",
    "execution_output": 1
  },
  {
    "id": 670,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0: return -1\n    dp0, dp1 = 0, 0\n    for i in range(1, len(idx)):\n        dp0, dp1 = dp1, min(dp1, dp0 + (idx[i] - idx[i-1] - x))\n    return len(idx) // 2 * x + dp1\nprint ( minOperations ( \"000000000000\" , \"011001000100\" , 3 ) )",
    "execution_output": 4
  },
  {
    "id": 671,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0: return -1\n    dp0, dp1 = 0, 0\n    for i in range(1, len(idx)):\n        dp0, dp1 = dp1, min(dp1, dp0 + (idx[i] - idx[i-1] - x))\n    return len(idx) // 2 * x + dp1\nprint ( minOperations ( \"000000000000\" , \"111111000000\" , 2 ) )",
    "execution_output": 3
  },
  {
    "id": 672,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0: return -1\n    dp0, dp1 = 0, 0\n    for i in range(1, len(idx)):\n        dp0, dp1 = dp1, min(dp1, dp0 + (idx[i] - idx[i-1] - x))\n    return len(idx) // 2 * x + dp1\nprint ( minOperations ( \"0000000000\" , \"1111111111\" , 5 ) )",
    "execution_output": 5
  },
  {
    "id": 673,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0: return -1\n    dp0, dp1 = 0, 0\n    for i in range(1, len(idx)):\n        dp0, dp1 = dp1, min(dp1, dp0 + (idx[i] - idx[i-1] - x))\n    return len(idx) // 2 * x + dp1\nprint ( minOperations ( \"aaaaaaaaaaaaaa\" , \"baabbababaaaab\" , 4 ) )",
    "execution_output": 7
  },
  {
    "id": 674,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0: return -1\n    dp0, dp1 = 0, 0\n    for i in range(1, len(idx)):\n        dp0, dp1 = dp1, min(dp1, dp0 + (idx[i] - idx[i-1] - x))\n    return len(idx) // 2 * x + dp1\nprint ( minOperations ( \"000000000000000\" , \"010010000010001\" , 3 ) )",
    "execution_output": 6
  },
  {
    "id": 675,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    \n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n    \n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        \n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n        \n    # print(mask, dp(tuple(mask)))\n    return dp(tuple(mask)) // 2\nprint ( minOperations ( \"010110\" , \"101001\" , 3 ) )",
    "execution_output": 3
  },
  {
    "id": 676,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    \n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n    \n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        \n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n        \n    # print(mask, dp(tuple(mask)))\n    return dp(tuple(mask)) // 2\nprint ( minOperations ( \"0000000000\" , \"0100010101\" , 4 ) )",
    "execution_output": 6
  },
  {
    "id": 677,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    \n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n    \n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        \n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n        \n    # print(mask, dp(tuple(mask)))\n    return dp(tuple(mask)) // 2\nprint ( minOperations ( \"00110011\" , \"11001100\" , 1 ) )",
    "execution_output": 4
  },
  {
    "id": 678,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    \n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n    \n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        \n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n        \n    # print(mask, dp(tuple(mask)))\n    return dp(tuple(mask)) // 2\nprint ( minOperations ( \"1010101010\" , \"0101010101\" , 10 ) )",
    "execution_output": 5
  },
  {
    "id": 679,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    \n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n    \n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        \n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n        \n    # print(mask, dp(tuple(mask)))\n    return dp(tuple(mask)) // 2\nprint ( minOperations ( \"011010011010\" , \"110001101100\" , 5 ) )",
    "execution_output": 5
  },
  {
    "id": 680,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j+1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return \"\" if ans is None else ans\nprint ( shortestBeautifulSubstring ( \"01100101\" , 2 ) )",
    "execution_output": "11"
  },
  {
    "id": 681,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j+1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return \"\" if ans is None else ans\nprint ( shortestBeautifulSubstring ( \"1000010000100001\" , 2 ) )",
    "execution_output": "100001"
  },
  {
    "id": 682,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j+1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return \"\" if ans is None else ans\nprint ( shortestBeautifulSubstring ( \"1101100110110\" , 3 ) )",
    "execution_output": "1011"
  },
  {
    "id": 683,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j+1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return \"\" if ans is None else ans\nprint ( shortestBeautifulSubstring ( \"0010111010011101\" , 4 ) )",
    "execution_output": "10111"
  },
  {
    "id": 684,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j+1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return \"\" if ans is None else ans\nprint ( shortestBeautifulSubstring ( \"10101011011010010101\" , 5 ) )",
    "execution_output": "1011011"
  },
  {
    "id": 685,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint ( shortestBeautifulSubstring ( \"1010011\" , 2 ) )",
    "execution_output": "11"
  },
  {
    "id": 686,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint ( shortestBeautifulSubstring ( \"1010011100\" * 10 , 7 ) )",
    "execution_output": "110010100111"
  },
  {
    "id": 687,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint ( shortestBeautifulSubstring ( \"1101101110\" , 6 ) )",
    "execution_output": "10110111"
  },
  {
    "id": 688,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint ( shortestBeautifulSubstring ( \"1\" + \"0\" * 20 + \"1\" + \"0\" * 15 + \"1\" + \"0\" * 10 + \"1\" , 3 ) )",
    "execution_output": "1000000000000000100000000001"
  },
  {
    "id": 689,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint ( shortestBeautifulSubstring ( \"01\" * 15 , 3 ) )",
    "execution_output": "10101"
  },
  {
    "id": 690,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'z' * 101\n\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n\n    return \"\" if min_len == inf else ans\nprint ( shortestBeautifulSubstring ( \"11011\" , 3 ) )",
    "execution_output": "1011"
  },
  {
    "id": 691,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'z' * 101\n\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n\n    return \"\" if min_len == inf else ans\nprint ( shortestBeautifulSubstring ( \"0010101010010110\" , 4 ) )",
    "execution_output": "1001011"
  },
  {
    "id": 692,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'z' * 101\n\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n\n    return \"\" if min_len == inf else ans\nprint ( shortestBeautifulSubstring ( \"10000100001\" , 2 ) )",
    "execution_output": "100001"
  },
  {
    "id": 693,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'z' * 101\n\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n\n    return \"\" if min_len == inf else ans\nprint ( shortestBeautifulSubstring ( \"01010100010101\" , 3 ) )",
    "execution_output": "10101"
  },
  {
    "id": 694,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'z' * 101\n\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n\n    return \"\" if min_len == inf else ans\nprint ( shortestBeautifulSubstring ( \"1010011100101\" , 3 ) )",
    "execution_output": "111"
  },
  {
    "id": 695,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = \"\"\n    n = len(s)\n    min_len = None\n    for ln in range(k, n+1):\n        for i in range(n-ln+1):\n            ss = s[i:i+ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint ( shortestBeautifulSubstring ( \"1101101\" , 3 ) )",
    "execution_output": "1011"
  },
  {
    "id": 696,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = \"\"\n    n = len(s)\n    min_len = None\n    for ln in range(k, n+1):\n        for i in range(n-ln+1):\n            ss = s[i:i+ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint ( shortestBeautifulSubstring ( \"11101110111\" , 4 ) )",
    "execution_output": "10111"
  },
  {
    "id": 697,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = \"\"\n    n = len(s)\n    min_len = None\n    for ln in range(k, n+1):\n        for i in range(n-ln+1):\n            ss = s[i:i+ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint ( shortestBeautifulSubstring ( \"00111011100\" , 5 ) )",
    "execution_output": "110111"
  },
  {
    "id": 698,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = \"\"\n    n = len(s)\n    min_len = None\n    for ln in range(k, n+1):\n        for i in range(n-ln+1):\n            ss = s[i:i+ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint ( shortestBeautifulSubstring ( \"010101010101\" , 4 ) )",
    "execution_output": "1010101"
  },
  {
    "id": 699,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = \"\"\n    n = len(s)\n    min_len = None\n    for ln in range(k, n+1):\n        for i in range(n-ln+1):\n            ss = s[i:i+ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint ( shortestBeautifulSubstring ( \"1001011001100101\" , 3 ) )",
    "execution_output": "1011"
  },
  {
    "id": 700,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), \"\")\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i : j + 1]))\n    return res[1]\nprint ( shortestBeautifulSubstring ( \"10110101\" , 3 ) )",
    "execution_output": "1011"
  },
  {
    "id": 701,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), \"\")\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i : j + 1]))\n    return res[1]\nprint ( shortestBeautifulSubstring ( \"1\" + \"0\" * 10 + \"1\" + \"0\" * 10 + \"1\" , 2 ) )",
    "execution_output": "100000000001"
  },
  {
    "id": 702,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), \"\")\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i : j + 1]))\n    return res[1]\nprint ( shortestBeautifulSubstring ( \"11010010101100101010\" , 9 ) )",
    "execution_output": "11010010101100101"
  },
  {
    "id": 703,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), \"\")\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i : j + 1]))\n    return res[1]\nprint ( shortestBeautifulSubstring ( \"0010110100110\" , 3 ) )",
    "execution_output": "1011"
  },
  {
    "id": 704,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), \"\")\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i : j + 1]))\n    return res[1]\nprint ( shortestBeautifulSubstring ( \"1110101110\" , 4 ) )",
    "execution_output": "10111"
  },
  {
    "id": 705,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i]=='1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n+1)])]\n    for i in range(k-1, len(ones)):\n        i1 = ones[i-k+1]\n        i2 = ones[i]\n        answer =  min(answer, [i2-i1, s[i1:i2+1]])\n    return answer[1]\nprint ( shortestBeautifulSubstring ( \"10101101\" , 3 ) )",
    "execution_output": "1011"
  },
  {
    "id": 706,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i]=='1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n+1)])]\n    for i in range(k-1, len(ones)):\n        i1 = ones[i-k+1]\n        i2 = ones[i]\n        answer =  min(answer, [i2-i1, s[i1:i2+1]])\n    return answer[1]\nprint ( shortestBeautifulSubstring ( \"100000100001000\" , 2 ) )",
    "execution_output": "100001"
  },
  {
    "id": 707,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i]=='1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n+1)])]\n    for i in range(k-1, len(ones)):\n        i1 = ones[i-k+1]\n        i2 = ones[i]\n        answer =  min(answer, [i2-i1, s[i1:i2+1]])\n    return answer[1]\nprint ( shortestBeautifulSubstring ( \"0011100101110\" , 3 ) )",
    "execution_output": "111"
  },
  {
    "id": 708,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i]=='1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n+1)])]\n    for i in range(k-1, len(ones)):\n        i1 = ones[i-k+1]\n        i2 = ones[i]\n        answer =  min(answer, [i2-i1, s[i1:i2+1]])\n    return answer[1]\nprint ( shortestBeautifulSubstring ( \"010111001010101\" , 4 ) )",
    "execution_output": "10111"
  },
  {
    "id": 709,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i]=='1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n+1)])]\n    for i in range(k-1, len(ones)):\n        i1 = ones[i-k+1]\n        i2 = ones[i]\n        answer =  min(answer, [i2-i1, s[i1:i2+1]])\n    return answer[1]\nprint ( shortestBeautifulSubstring ( \"0101010101\" , 5 ) )",
    "execution_output": "101010101"
  },
  {
    "id": 710,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0: break\n            res += freq[x] * v\n        else: ans = min(ans, res)\n    return ans\nprint ( minGroupsForValidAssignment ( [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 10 , 10 , 10 , 10 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 12 , 13 , 13 , 13 , 13 ] ) )",
    "execution_output": 9
  },
  {
    "id": 711,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0: break\n            res += freq[x] * v\n        else: ans = min(ans, res)\n    return ans\nprint ( minGroupsForValidAssignment ( [ 100 ] * 5 + [ 200 ] * 7 + [ 300 ] * 11 + [ 400 ] * 13 ) )",
    "execution_output": 14
  },
  {
    "id": 712,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0: break\n            res += freq[x] * v\n        else: ans = min(ans, res)\n    return ans\nprint ( minGroupsForValidAssignment ( [ 42 ] * 20 + [ 1 ] * 3 + [ 2 ] * 3 + [ 3 ] * 3 + [ 4 ] * 3 + [ 5 ] * 3 + [ 10 ] * 2 + [ 11 ] * 2 + [ 12 ] * 2 + [ 13 ] * 2 + [ 14 ] * 2 + [ 15 ] * 2 + [ 16 ] * 2 ) )",
    "execution_output": 19
  },
  {
    "id": 713,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0: break\n            res += freq[x] * v\n        else: ans = min(ans, res)\n    return ans\nprint ( minGroupsForValidAssignment ( [ 1000 , 1001 , 1002 , 1003 , 1004 , 1005 , 1006 , 1007 ] + [ 2000 ] * 2 + [ 2001 ] * 2 + [ 2002 ] * 2 + [ 2003 ] * 2 + [ 2004 ] * 2 + [ 2005 ] * 2 + [ 3000 ] * 3 + [ 3001 ] * 3 + [ 3002 ] * 3 + [ 3003 ] * 3 ) )",
    "execution_output": 22
  },
  {
    "id": 714,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0: break\n            res += freq[x] * v\n        else: ans = min(ans, res)\n    return ans\nprint ( minGroupsForValidAssignment ( [ - 1 ] * 6 + [ - 2 ] * 4 + [ - 3 ] * 3 + [ 0 ] * 5 + [ 7 ] * 4 + [ 9 ] * 6 ) )",
    "execution_output": 11
  },
  {
    "id": 715,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in  d]\n    s.sort()\n\n    def f(x,n):\n        b = x//(n-1)\n        if x%(n-1)==0: return True\n        a = x - (n-1) * b\n        if a <= b:return True\n    for i in range(s[0]+1,1,-1):\n\n        if all(f(j,i) for j in s):\n\n            return  sum([j//i+(j%i !=0)  for j in s])\nprint ( minGroupsForValidAssignment ( [ 1 ] * 4 + [ 2 ] * 5 + [ 3 ] * 6 + [ 4 ] * 7 + [ 5 ] * 8 + [ 6 ] * 9 + [ 7 ] * 10 ) )",
    "execution_output": 19
  },
  {
    "id": 716,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in  d]\n    s.sort()\n\n    def f(x,n):\n        b = x//(n-1)\n        if x%(n-1)==0: return True\n        a = x - (n-1) * b\n        if a <= b:return True\n    for i in range(s[0]+1,1,-1):\n\n        if all(f(j,i) for j in s):\n\n            return  sum([j//i+(j%i !=0)  for j in s])\nprint ( minGroupsForValidAssignment ( [ 10 ] * 9 + [ 20 ] * 10 + [ 30 ] * 11 + [ 40 ] * 12 + [ 50 ] * 13 ) )",
    "execution_output": 16
  },
  {
    "id": 717,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in  d]\n    s.sort()\n\n    def f(x,n):\n        b = x//(n-1)\n        if x%(n-1)==0: return True\n        a = x - (n-1) * b\n        if a <= b:return True\n    for i in range(s[0]+1,1,-1):\n\n        if all(f(j,i) for j in s):\n\n            return  sum([j//i+(j%i !=0)  for j in s])\nprint ( minGroupsForValidAssignment ( [ - 1 ] * 3 + [ - 2 ] * 5 + [ - 3 ] * 7 + [ 4 ] * 8 + [ 5 ] * 6 + [ 6 ] * 4 ) )",
    "execution_output": 13
  },
  {
    "id": 718,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in  d]\n    s.sort()\n\n    def f(x,n):\n        b = x//(n-1)\n        if x%(n-1)==0: return True\n        a = x - (n-1) * b\n        if a <= b:return True\n    for i in range(s[0]+1,1,-1):\n\n        if all(f(j,i) for j in s):\n\n            return  sum([j//i+(j%i !=0)  for j in s])\nprint ( minGroupsForValidAssignment ( [ ( 1 , 2 ) ] * 3 + [ ( 2 , 3 ) ] * 4 + [ 10 ] * 5 + [ 20 ] * 6 + [ ( 0 , 0 ) ] * 7 ) )",
    "execution_output": 10
  },
  {
    "id": 719,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in  d]\n    s.sort()\n\n    def f(x,n):\n        b = x//(n-1)\n        if x%(n-1)==0: return True\n        a = x - (n-1) * b\n        if a <= b:return True\n    for i in range(s[0]+1,1,-1):\n\n        if all(f(j,i) for j in s):\n\n            return  sum([j//i+(j%i !=0)  for j in s])\nprint ( minGroupsForValidAssignment ( [ 100 ] * 15 + [ 200 ] * 10 + [ 300 ] * 6 + [ 400 ] * 9 + [ 500 ] * 12 ) )",
    "execution_output": 15
  },
  {
    "id": 720,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _,v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0]+1,1,-1):\n        good = True\n        cnt = 0\n        for n in a:\n            q,r = divmod(n,sz)\n            if r!=0:\n                q+=1\n                r=sz-r\n            if r>q:\n                good=False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print(\"bad\")\n    return len(nums)\nprint ( minGroupsForValidAssignment ( [ 1 , 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 ] ) )",
    "execution_output": 5
  },
  {
    "id": 721,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _,v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0]+1,1,-1):\n        good = True\n        cnt = 0\n        for n in a:\n            q,r = divmod(n,sz)\n            if r!=0:\n                q+=1\n                r=sz-r\n            if r>q:\n                good=False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print(\"bad\")\n    return len(nums)\nprint ( minGroupsForValidAssignment ( [ 10 , 10 , 11 , 11 , 11 , 12 , 12 , 12 , 13 , 13 , 13 , 13 , 14 , 14 , 14 , 14 , 14 , 14 ] ) )",
    "execution_output": 7
  },
  {
    "id": 722,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _,v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0]+1,1,-1):\n        good = True\n        cnt = 0\n        for n in a:\n            q,r = divmod(n,sz)\n            if r!=0:\n                q+=1\n                r=sz-r\n            if r>q:\n                good=False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print(\"bad\")\n    return len(nums)\nprint ( minGroupsForValidAssignment ( [ 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 ] ) )",
    "execution_output": 9
  },
  {
    "id": 723,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _,v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0]+1,1,-1):\n        good = True\n        cnt = 0\n        for n in a:\n            q,r = divmod(n,sz)\n            if r!=0:\n                q+=1\n                r=sz-r\n            if r>q:\n                good=False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print(\"bad\")\n    return len(nums)\nprint ( minGroupsForValidAssignment ( [ 20 , 20 , 20 , 20 , 21 , 21 , 21 , 21 , 21 , 21 , 22 , 22 , 22 , 22 , 22 , 22 , 22 , 22 , 22 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 ] ) )",
    "execution_output": 9
  },
  {
    "id": 724,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _,v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0]+1,1,-1):\n        good = True\n        cnt = 0\n        for n in a:\n            q,r = divmod(n,sz)\n            if r!=0:\n                q+=1\n                r=sz-r\n            if r>q:\n                good=False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print(\"bad\")\n    return len(nums)\nprint ( minGroupsForValidAssignment ( [ 100 , 100 , 100 , 100 , 100 , 101 , 101 , 101 , 101 , 101 , 102 , 102 , 102 , 102 , 102 , 103 , 103 , 103 , 103 , 103 , 103 , 103 , 103 , 103 , 103 ] ) )",
    "execution_output": 5
  },
  {
    "id": 725,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n            \n    return m\nprint ( minGroupsForValidAssignment ( [ 1 ] * 6 + [ 2 ] * 7 + [ 3 ] * 8 + [ 4 ] * 9 + [ 5 ] * 10 ) )",
    "execution_output": 12
  },
  {
    "id": 726,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n            \n    return m\nprint ( minGroupsForValidAssignment ( [ 10 ] * 11 + [ 20 ] * 11 + [ 30 ] * 11 + [ 40 ] * 11 ) )",
    "execution_output": 4
  },
  {
    "id": 727,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n            \n    return m\nprint ( minGroupsForValidAssignment ( [ 0 ] * 50 + [ 1 ] * 33 + [ 2 ] * 33 + [ 3 ] * 4 + [ 4 ] * 4 + [ 5 ] * 4 ) )",
    "execution_output": 27
  },
  {
    "id": 728,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n            \n    return m\nprint ( minGroupsForValidAssignment ( [ 7 ] * 12 + [ 8 ] * 17 + [ 9 ] * 23 + [ 10 ] * 31 ) )",
    "execution_output": 15
  },
  {
    "id": 729,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n            \n    return m\nprint ( minGroupsForValidAssignment ( [ 1 ] * 5 + [ 2 ] * 5 + [ 3 ] * 6 + [ 4 ] * 7 + [ 5 ] * 8 + [ 6 ] * 9 + [ 7 ] * 10 ) )",
    "execution_output": 19
  },
  {
    "id": 730,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    \n    x = A[0]\n    @lru_cache(None)\n    def dp(y,x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y==x or y == x+1:\n            return 1\n        return 1+min(dp(y-x,x),dp(y-x-1,x))\n    \n    while x:\n        ans = sum(dp(y,x) for y in A)\n        if ans < math.inf:\n            return ans\n        x=x-1\nprint ( minGroupsForValidAssignment ( [ 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 ] ) )",
    "execution_output": 15
  },
  {
    "id": 731,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    \n    x = A[0]\n    @lru_cache(None)\n    def dp(y,x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y==x or y == x+1:\n            return 1\n        return 1+min(dp(y-x,x),dp(y-x-1,x))\n    \n    while x:\n        ans = sum(dp(y,x) for y in A)\n        if ans < math.inf:\n            return ans\n        x=x-1\nprint ( minGroupsForValidAssignment ( [ 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 ] ) )",
    "execution_output": 28
  },
  {
    "id": 732,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    \n    x = A[0]\n    @lru_cache(None)\n    def dp(y,x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y==x or y == x+1:\n            return 1\n        return 1+min(dp(y-x,x),dp(y-x-1,x))\n    \n    while x:\n        ans = sum(dp(y,x) for y in A)\n        if ans < math.inf:\n            return ans\n        x=x-1\nprint ( minGroupsForValidAssignment ( [ 100 , 100 , 100 , 100 , 101 , 101 , 101 , 101 , 101 , 101 , 102 , 102 , 102 , 102 , 102 , 102 , 102 , 102 , 102 , 103 , 103 , 103 , 103 , 103 , 103 , 103 , 103 , 103 , 103 , 103 , 103 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 ] ) )",
    "execution_output": 13
  },
  {
    "id": 733,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    \n    x = A[0]\n    @lru_cache(None)\n    def dp(y,x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y==x or y == x+1:\n            return 1\n        return 1+min(dp(y-x,x),dp(y-x-1,x))\n    \n    while x:\n        ans = sum(dp(y,x) for y in A)\n        if ans < math.inf:\n            return ans\n        x=x-1\nprint ( minGroupsForValidAssignment ( [ 21 , 21 , 21 , 21 , 21 , 22 , 22 , 22 , 22 , 22 , 22 , 22 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 23 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 24 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 , 25 ] ) )",
    "execution_output": 49
  },
  {
    "id": 734,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    \n    x = A[0]\n    @lru_cache(None)\n    def dp(y,x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y==x or y == x+1:\n            return 1\n        return 1+min(dp(y-x,x),dp(y-x-1,x))\n    \n    while x:\n        ans = sum(dp(y,x) for y in A)\n        if ans < math.inf:\n            return ans\n        x=x-1\nprint ( minGroupsForValidAssignment ( [ 1 , 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 ] ) )",
    "execution_output": 10
  },
  {
    "id": 735,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n        \n    counter, n = Counter(nums), len(nums)\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint ( minGroupsForValidAssignment ( [ 1 , 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 ] ) )",
    "execution_output": 7
  },
  {
    "id": 736,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n        \n    counter, n = Counter(nums), len(nums)\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint ( minGroupsForValidAssignment ( [ 1 ] * 7 + [ 2 ] * 9 + [ 3 ] * 10 + [ 4 ] * 13 ) )",
    "execution_output": 12
  },
  {
    "id": 737,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n        \n    counter, n = Counter(nums), len(nums)\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint ( minGroupsForValidAssignment ( [ 0 ] * 2 + [ 1 ] * 3 + [ 2 ] * 7 + [ 3 ] * 11 + [ 4 ] * 13 ) )",
    "execution_output": 14
  },
  {
    "id": 738,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n        \n    counter, n = Counter(nums), len(nums)\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint ( minGroupsForValidAssignment ( [ 10 ] * 8 + [ 20 ] * 8 + [ 30 ] * 8 + [ 40 ] * 8 + [ 50 ] * 8 ) )",
    "execution_output": 5
  },
  {
    "id": 739,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n        \n    counter, n = Counter(nums), len(nums)\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint ( minGroupsForValidAssignment ( [ 5 ] * 3 + [ 6 ] * 5 + [ 7 ] * 8 + [ 8 ] * 9 + [ 9 ] * 14 ) )",
    "execution_output": 14
  },
  {
    "id": 740,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    def f(nums):\n        return sum(max(1, x) for x in nums)\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = b, a\n        nums1, nums2 = nums2, nums1\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint ( minSum ( [ 2 , 3 , 4 ] , [ 5 , 1 , 3 ] ) )",
    "execution_output": 9
  },
  {
    "id": 741,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    def f(nums):\n        return sum(max(1, x) for x in nums)\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = b, a\n        nums1, nums2 = nums2, nums1\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint ( minSum ( [ 0 , - 1 , 2 ] , [ 5 , 0 ] ) )",
    "execution_output": 6
  },
  {
    "id": 742,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    def f(nums):\n        return sum(max(1, x) for x in nums)\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = b, a\n        nums1, nums2 = nums2, nums1\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint ( minSum ( [ 4 , 3 , 3 ] , [ 2 , 2 , 3 ] ) )",
    "execution_output": -1
  },
  {
    "id": 743,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    def f(nums):\n        return sum(max(1, x) for x in nums)\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = b, a\n        nums1, nums2 = nums2, nums1\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint ( minSum ( [ 0 , - 2 , 5 , 0 , 7 , - 3 , 2 , 1 , - 1 , 4 , 0 , 3 ] , [ 6 , 0 , - 5 , 2 , 8 , - 1 , 0 , 1 , 3 , - 4 , 0 , 2 ] ) )",
    "execution_output": 28
  },
  {
    "id": 744,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    def f(nums):\n        return sum(max(1, x) for x in nums)\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = b, a\n        nums1, nums2 = nums2, nums1\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint ( minSum ( [ 9 , 0 , 3 ] , [ 4 , 0 , 6 ] ) )",
    "execution_output": 13
  },
  {
    "id": 745,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        \n        return sum(nums1)\n                    \n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    \n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint ( minSum ( [ 10 , - 5 , 7 , - 2 , - 3 , 8 , - 1 , - 4 , 5 ] , [ 6 , 9 ] ) )",
    "execution_output": 15
  },
  {
    "id": 746,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        \n        return sum(nums1)\n                    \n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    \n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint ( minSum ( [ 4 , 3 , 3 ] , [ 5 , 3 , 0 , 0 , 0 ] ) )",
    "execution_output": -1
  },
  {
    "id": 747,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        \n        return sum(nums1)\n                    \n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    \n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint ( minSum ( [ 7 , 8 ] , [ 12 , 0 , 0 , 0 ] ) )",
    "execution_output": 15
  },
  {
    "id": 748,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        \n        return sum(nums1)\n                    \n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    \n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint ( minSum ( [ 0 , 2 , - 1 , 3 , 0 ] , [ 0 , - 2 , 5 , 0 , 1 ] ) )",
    "execution_output": 6
  },
  {
    "id": 749,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        \n        return sum(nums1)\n                    \n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    \n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint ( minSum ( [ 0 , 0 , 10 ] , [ 0 , 5 , 5 , 0 , 0 ] ) )",
    "execution_output": 13
  },
  {
    "id": 750,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint ( minSum ( [ 0 , 5 , 0 , 2 , 3 , 0 ] , [ 4 , 0 , 1 , 0 , 2 , 0 ] ) )",
    "execution_output": 13
  },
  {
    "id": 751,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint ( minSum ( [ 0 , 0 , 7 , 3 ] , [ 6 , 6 ] ) )",
    "execution_output": 12
  },
  {
    "id": 752,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint ( minSum ( [ 4 , 4 , 4 ] , [ 0 , 5 , 0 ] ) )",
    "execution_output": 12
  },
  {
    "id": 753,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint ( minSum ( [ 1 , 2 , 3 ] , [ 4 , 1 ] ) )",
    "execution_output": -1
  },
  {
    "id": 754,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint ( minSum ( [ 0 , 0 , 2 , 1 ] , [ 0 , 3 , 0 ] ) )",
    "execution_output": 5
  },
  {
    "id": 755,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    \n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint ( minSum ( [ 0 , 3 , 0 , 2 , 5 ] , [ 4 , 0 , 1 , 0 , 6 ] ) )",
    "execution_output": 13
  },
  {
    "id": 756,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    \n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint ( minSum ( [ 7 , 0 , 2 , 1 ] , [ 3 , 0 , 0 ] ) )",
    "execution_output": 11
  },
  {
    "id": 757,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    \n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint ( minSum ( [ 0 , 4 , 0 ] , [ 2 , 5 , 3 ] ) )",
    "execution_output": 10
  },
  {
    "id": 758,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    \n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint ( minSum ( [ 0 , 2 , 3 ] , [ 6 ] ) )",
    "execution_output": 6
  },
  {
    "id": 759,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    \n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint ( minSum ( [ 4 , 1 , 1 ] , [ 2 , 2 , 2 ] ) )",
    "execution_output": 6
  },
  {
    "id": 760,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    \n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    \n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    \n    \n    return max(s1+n1z,s2+n2z)\nprint ( minSum ( [ 4 , 0 , 2 , 0 , 5 ] , [ 1 , 3 , 0 , 7 ] ) )",
    "execution_output": 13
  },
  {
    "id": 761,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    \n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    \n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    \n    \n    return max(s1+n1z,s2+n2z)\nprint ( minSum ( [ 0 , 2 , 2 ] , [ 7 , 1 ] ) )",
    "execution_output": 8
  },
  {
    "id": 762,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    \n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    \n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    \n    \n    return max(s1+n1z,s2+n2z)\nprint ( minSum ( [ 10 , 0 , 0 , 1 ] , [ 4 , 4 , 0 , 0 ] ) )",
    "execution_output": 13
  },
  {
    "id": 763,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    \n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    \n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    \n    \n    return max(s1+n1z,s2+n2z)\nprint ( minSum ( [ 1 , 1 , 1 , 1 , 1 , 0 ] , [ 2 , 2 , 2 ] ) )",
    "execution_output": 6
  },
  {
    "id": 764,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    \n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    \n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    \n    \n    return max(s1+n1z,s2+n2z)\nprint ( minSum ( [ 3 , 0 ] , [ 1 , 0 , 2 ] ) )",
    "execution_output": 4
  },
  {
    "id": 765,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0) for x in nums1)\n    empty2 = sum((x == 0) for x in nums2)\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint ( minSum ( [ 0 , 2 , 3 , 0 , 5 ] , [ 1 , 0 , 4 , 0 , 2 ] ) )",
    "execution_output": 12
  },
  {
    "id": 766,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0) for x in nums1)\n    empty2 = sum((x == 0) for x in nums2)\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint ( minSum ( [ 1 , 1 ] , [ 0 , 0 , 1 ] ) )",
    "execution_output": -1
  },
  {
    "id": 767,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0) for x in nums1)\n    empty2 = sum((x == 0) for x in nums2)\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint ( minSum ( [ 0 , 0 , 1 ] , [ 1 , 1 ] ) )",
    "execution_output": -1
  },
  {
    "id": 768,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0) for x in nums1)\n    empty2 = sum((x == 0) for x in nums2)\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint ( minSum ( [ 2 , 3 ] , [ 1 , 4 ] ) )",
    "execution_output": 5
  },
  {
    "id": 769,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0) for x in nums1)\n    empty2 = sum((x == 0) for x in nums2)\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint ( minSum ( [ 0 , 0 , 10 , 0 , 5 , 0 ] , [ 0 , 7 , 0 , 3 , 0 , 2 ] ) )",
    "execution_output": 19
  },
  {
    "id": 770,
    "q_id": "sample_279",
    "code": "# output should be -1..\n\ndef min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]),\n        min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint ( minOperations ( [ 1 , 4 , 5 , 2 , 3 , 6 ] , [ 2 , 3 , 4 , 5 , 1 , 3 ] ) )",
    "execution_output": -1
  },
  {
    "id": 771,
    "q_id": "sample_279",
    "code": "# output should be -1..\n\ndef min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]),\n        min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint ( minOperations ( [ 2 , 1 , 3 , 9 , 4 , 10 ] , [ 1 , 2 , 3 , 1 , 1 , 2 ] ) )",
    "execution_output": -1
  },
  {
    "id": 772,
    "q_id": "sample_279",
    "code": "# output should be -1..\n\ndef min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]),\n        min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint ( minOperations ( [ 1 , 6 , 9 , 5 , 7 , 2 , 7 ] , [ 2 , 5 , 7 , 6 , 3 , 8 , 8 ] ) )",
    "execution_output": -1
  },
  {
    "id": 773,
    "q_id": "sample_279",
    "code": "# output should be -1..\n\ndef min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]),\n        min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint ( minOperations ( [ 20 , 90 , 60 , 40 , 80 , 100 ] , [ 10 , 50 , 70 , 50 , 30 , 50 ] ) )",
    "execution_output": -1
  },
  {
    "id": 774,
    "q_id": "sample_279",
    "code": "# output should be -1..\n\ndef min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]),\n        min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint ( minOperations ( [ 1 , 2 , 5 , 3 , 4 ] , [ 2 , 1 , 1 , 4 , 4 ] ) )",
    "execution_output": -1
  },
  {
    "id": 775,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    @cache\n    def f(idx, a, b):\n        if idx == n-1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx+1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx+1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10**9 else -1\nprint ( minOperations ( [ 7 , 10 , 9 , 8 , 10 , 9 ] , [ 8 , 8 , 9 , 10 , 9 , 10 ] ) )",
    "execution_output": 2
  },
  {
    "id": 776,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    @cache\n    def f(idx, a, b):\n        if idx == n-1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx+1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx+1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10**9 else -1\nprint ( minOperations ( [ 10 , 50 , 30 , 40 , 5 , 45 , 50 ] , [ 20 , 10 , 60 , 55 , 15 , 30 , 60 ] ) )",
    "execution_output": 0
  },
  {
    "id": 777,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    @cache\n    def f(idx, a, b):\n        if idx == n-1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx+1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx+1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10**9 else -1\nprint ( minOperations ( [ 50 , 45 , 60 , 70 , 40 ] , [ 30 , 35 , 20 , 10 , 70 ] ) )",
    "execution_output": 1
  },
  {
    "id": 778,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    @cache\n    def f(idx, a, b):\n        if idx == n-1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx+1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx+1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10**9 else -1\nprint ( minOperations ( [ 100 , 100 , 101 , 99 , 100 , 100 ] , [ 100 , 99 , 100 , 101 , 100 , 105 ] ) )",
    "execution_output": 1
  },
  {
    "id": 779,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n    @cache\n    def f(idx, a, b):\n        if idx == n-1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx+1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx+1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10**9 else -1\nprint ( minOperations ( [ 31 , 25 , 30 , 32 , 29 , 33 , 30 , 30 ] , [ 28 , 40 , 35 , 27 , 39 , 30 , 40 , 40 ] ) )",
    "execution_output": 3
  },
  {
    "id": 780,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n    def f():\n        ret = 0\n        aa, bb = a[:], b[:]\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = b[i], a[i]\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    \n    ans = f()\n    a[-1], b[-1] = b[-1], a[-1]\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint ( minOperations ( [ 1 , 2 , 2 , 3 , 4 , 5 ] , [ 1 , 1 , 2 , 3 , 3 , 5 ] ) )",
    "execution_output": 0
  },
  {
    "id": 781,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n    def f():\n        ret = 0\n        aa, bb = a[:], b[:]\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = b[i], a[i]\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    \n    ans = f()\n    a[-1], b[-1] = b[-1], a[-1]\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint ( minOperations ( [ 9 , 13 , 10 , 18 , 7 , 10 ] , [ 8 , 10 , 10 , 9 , 10 , 20 ] ) )",
    "execution_output": 1
  },
  {
    "id": 782,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n    def f():\n        ret = 0\n        aa, bb = a[:], b[:]\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = b[i], a[i]\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    \n    ans = f()\n    a[-1], b[-1] = b[-1], a[-1]\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint ( minOperations ( [ - 3 , 4 , 2 , 5 , 1 , 2 ] , [ 2 , 1 , 2 , 2 , 2 , 5 ] ) )",
    "execution_output": 1
  },
  {
    "id": 783,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n    def f():\n        ret = 0\n        aa, bb = a[:], b[:]\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = b[i], a[i]\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    \n    ans = f()\n    a[-1], b[-1] = b[-1], a[-1]\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint ( minOperations ( [ 5 , 11 , 9 , 10 , 3 , 10 ] , [ 3 , 9 , 10 , 6 , 10 , 12 ] ) )",
    "execution_output": 1
  },
  {
    "id": 784,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n    def f():\n        ret = 0\n        aa, bb = a[:], b[:]\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = b[i], a[i]\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    \n    ans = f()\n    a[-1], b[-1] = b[-1], a[-1]\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint ( minOperations ( [ 10 , 60 , 49 , 75 , 51 , 20 , 100 , 50 ] , [ 5 , 50 , 50 , 30 , 20 , 40 , 50 , 100 ] ) )",
    "execution_output": 1
  },
  {
    "id": 785,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint ( minOperations ( [ 3 , 6 , 5 , 2 , 6 , 5 ] , [ 5 , 4 , 6 , 6 , 4 , 6 ] ) )",
    "execution_output": 2
  },
  {
    "id": 786,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint ( minOperations ( [ 8 , 9 , 5 , 4 ] , [ 3 , 2 , 4 , 9 ] ) )",
    "execution_output": 1
  },
  {
    "id": 787,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint ( minOperations ( [ 1 , 4 , 2 , 6 ] , [ 3 , 2 , 5 , 7 ] ) )",
    "execution_output": 0
  },
  {
    "id": 788,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint ( minOperations ( [ 2 , 3 , 100 , 4 , 1 ] , [ 1 , 2 , 100 , 3 , 2 ] ) )",
    "execution_output": -1
  },
  {
    "id": 789,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint ( minOperations ( [ 4 , 5 , 3 , 6 , 4 , 2 ] , [ 7 , 2 , 7 , 1 , 7 , 3 ] ) )",
    "execution_output": -1
  },
  {
    "id": 790,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    \n    return ret\nprint ( minimumSteps ( \"10101010101010101010\" ) )",
    "execution_output": 55
  },
  {
    "id": 791,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    \n    return ret\nprint ( minimumSteps ( \"11111000000111100000\" ) )",
    "execution_output": 75
  },
  {
    "id": 792,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    \n    return ret\nprint ( minimumSteps ( \"00110101101100101011001101\" ) )",
    "execution_output": 76
  },
  {
    "id": 793,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    \n    return ret\nprint ( minimumSteps ( \"00011110000111100001111\" ) )",
    "execution_output": 48
  },
  {
    "id": 794,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    \n    return ret\nprint ( minimumSteps ( ( \"11110000\" * 12 ) + \"1010\" ) )",
    "execution_output": 1347
  },
  {
    "id": 795,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i]=='0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i-a[i])\n    return ans\nprint ( minimumSteps ( \"0101010101010101\" ) )",
    "execution_output": 28
  },
  {
    "id": 796,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i]=='0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i-a[i])\n    return ans\nprint ( minimumSteps ( \"11111000001111\" ) )",
    "execution_output": 25
  },
  {
    "id": 797,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i]=='0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i-a[i])\n    return ans\nprint ( minimumSteps ( \"101110010011\" ) )",
    "execution_output": 19
  },
  {
    "id": 798,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i]=='0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i-a[i])\n    return ans\nprint ( minimumSteps ( \"0010110100110\" ) )",
    "execution_output": 18
  },
  {
    "id": 799,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i]=='0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i-a[i])\n    return ans\nprint ( minimumSteps ( \"110010100111000\" ) )",
    "execution_output": 36
  },
  {
    "id": 800,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint ( minimumSteps ( \"1100101010110010\" ) )",
    "execution_output": 38
  },
  {
    "id": 801,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint ( minimumSteps ( \"0011011101001011010\" ) )",
    "execution_output": 45
  },
  {
    "id": 802,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint ( minimumSteps ( \"11100011010011100101\" ) )",
    "execution_output": 54
  },
  {
    "id": 803,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint ( minimumSteps ( \"10101111000010111001\" ) )",
    "execution_output": 54
  },
  {
    "id": 804,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint ( minimumSteps ( \"01011010111100010110\" ) )",
    "execution_output": 52
  },
  {
    "id": 805,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint ( minimumSteps ( \"1111100000\" ) )",
    "execution_output": 25
  },
  {
    "id": 806,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint ( minimumSteps ( \"1010101010101010\" ) )",
    "execution_output": 36
  },
  {
    "id": 807,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint ( minimumSteps ( \"11010011001010100101\" ) )",
    "execution_output": 56
  },
  {
    "id": 808,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint ( minimumSteps ( \"111001011011001010\" ) )",
    "execution_output": 51
  },
  {
    "id": 809,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint ( minimumSteps ( \"10011100101101001101\" ) )",
    "execution_output": 48
  },
  {
    "id": 810,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    \n    return sum(idx) - m * (m - 1) // 2\nprint ( minimumSteps ( \"1010101010\" ) )",
    "execution_output": 15
  },
  {
    "id": 811,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    \n    return sum(idx) - m * (m - 1) // 2\nprint ( minimumSteps ( \"1111000001111\" ) )",
    "execution_output": 20
  },
  {
    "id": 812,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    \n    return sum(idx) - m * (m - 1) // 2\nprint ( minimumSteps ( \"1000010001\" ) )",
    "execution_output": 10
  },
  {
    "id": 813,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    \n    return sum(idx) - m * (m - 1) // 2\nprint ( minimumSteps ( \"0011100101110\" ) )",
    "execution_output": 17
  },
  {
    "id": 814,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    \n    return sum(idx) - m * (m - 1) // 2\nprint ( minimumSteps ( \"111011010001011\" ) )",
    "execution_output": 33
  },
  {
    "id": 815,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1': b += 1\n        else: re += b;\n    return re\nprint ( minimumSteps ( \"1101001100101\" ) )",
    "execution_output": 24
  },
  {
    "id": 816,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1': b += 1\n        else: re += b;\n    return re\nprint ( minimumSteps ( \"0011010110110010\" ) )",
    "execution_output": 32
  },
  {
    "id": 817,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1': b += 1\n        else: re += b;\n    return re\nprint ( minimumSteps ( \"1110001011100101\" ) )",
    "execution_output": 35
  },
  {
    "id": 818,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1': b += 1\n        else: re += b;\n    return re\nprint ( minimumSteps ( \"1011110001010110\" ) )",
    "execution_output": 38
  },
  {
    "id": 819,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1': b += 1\n        else: re += b;\n    return re\nprint ( minimumSteps ( \"01011010011100101101\" ) )",
    "execution_output": 44
  },
  {
    "id": 820,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = 0, 0\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint ( beautifulSubstrings ( \"abababababababababab\" , 4 ) )",
    "execution_output": 45
  },
  {
    "id": 821,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = 0, 0\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint ( beautifulSubstrings ( \"aeioubcdfghjklmnpqrst\" , 3 ) )",
    "execution_output": 1
  },
  {
    "id": 822,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = 0, 0\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint ( beautifulSubstrings ( \"thequickbrownfoxjumpsover\" , 6 ) )",
    "execution_output": 0
  },
  {
    "id": 823,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = 0, 0\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint ( beautifulSubstrings ( \"zzzaaaeeeiiiooouuubbbccc\" , 5 ) )",
    "execution_output": 1
  },
  {
    "id": 824,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = 0, 0\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint ( beautifulSubstrings ( \"programmingisfunwithpython\" , 7 ) )",
    "execution_output": 0
  },
  {
    "id": 825,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint ( beautifulSubstrings ( \"abecidofug\" * 3 , 12 ) )",
    "execution_output": 26
  },
  {
    "id": 826,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint ( beautifulSubstrings ( \"aeiou\" * 5 + \"bcdfg\" * 5 , 7 ) )",
    "execution_output": 3
  },
  {
    "id": 827,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint ( beautifulSubstrings ( \"aBcDeFgHiJkLmNoP\" * 2 , 16 ) )",
    "execution_output": 0
  },
  {
    "id": 828,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint ( beautifulSubstrings ( ( \"xyz\" * 3 + \"aei\" ) * 4 , 9 ) )",
    "execution_output": 13
  },
  {
    "id": 829,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint ( beautifulSubstrings ( \"leetcodeisawesomeandchallenging\" , 25 ) )",
    "execution_output": 9
  },
  {
    "id": 830,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = \"aeiou\"\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = 0, 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and (numVowels * numCons) % k == 0:\n                res += 1\n    return res\nprint ( beautifulSubstrings ( 'ab' * 15 , 3 ) )",
    "execution_output": 65
  },
  {
    "id": 831,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = \"aeiou\"\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = 0, 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and (numVowels * numCons) % k == 0:\n                res += 1\n    return res\nprint ( beautifulSubstrings ( 'abcdefghijklmnopqrstuvwxyz' , 5 ) )",
    "execution_output": 0
  },
  {
    "id": 832,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = \"aeiou\"\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = 0, 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and (numVowels * numCons) % k == 0:\n                res += 1\n    return res\nprint ( beautifulSubstrings ( 'aeiobcdfgh' * 3 , 6 ) )",
    "execution_output": 7
  },
  {
    "id": 833,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = \"aeiou\"\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = 0, 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and (numVowels * numCons) % k == 0:\n                res += 1\n    return res\nprint ( beautifulSubstrings ( 'aaaabbbbccddeeiioouu' , 4 ) )",
    "execution_output": 10
  },
  {
    "id": 834,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = \"aeiou\"\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = 0, 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and (numVowels * numCons) % k == 0:\n                res += 1\n    return res\nprint ( beautifulSubstrings ( 'racecarenterelephantseal' , 7 ) )",
    "execution_output": 1
  },
  {
    "id": 835,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    \n    vowels = set('aeiou')\n    \n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n                \n            output += (diff == 0) and (count ** 2 % k == 0)\n            \n    return output\nprint ( beautifulSubstrings ( \"abababababaeio\" , 9 ) )",
    "execution_output": 6
  },
  {
    "id": 836,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    \n    vowels = set('aeiou')\n    \n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n                \n            output += (diff == 0) and (count ** 2 % k == 0)\n            \n    return output\nprint ( beautifulSubstrings ( \"leetcodeisawesome\" , 12 ) )",
    "execution_output": 4
  },
  {
    "id": 837,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    \n    vowels = set('aeiou')\n    \n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n                \n            output += (diff == 0) and (count ** 2 % k == 0)\n            \n    return output\nprint ( beautifulSubstrings ( \"rhythmsymphony\" , 5 ) )",
    "execution_output": 0
  },
  {
    "id": 838,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    \n    vowels = set('aeiou')\n    \n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n                \n            output += (diff == 0) and (count ** 2 % k == 0)\n            \n    return output\nprint ( beautifulSubstrings ( \"aeiobcdfghaeiouxyz\" , 8 ) )",
    "execution_output": 3
  },
  {
    "id": 839,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    \n    vowels = set('aeiou')\n    \n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n                \n            output += (diff == 0) and (count ** 2 % k == 0)\n            \n    return output\nprint ( beautifulSubstrings ( \"zzzaeiouzzzaeiouzzz\" , 7 ) )",
    "execution_output": 0
  },
  {
    "id": 840,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa=[]\n    for c in s:\n        if c in \"aiueo\":\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i=defaultdict(list)\n    a2i[0].append(0)\n    ans=s=0\n    for i,a in enumerate(aa):\n        s+=a\n        for j in a2i[s]:\n            if (((i+1-j)//2)**2)%k==0:\n                ans+=1\n        a2i[s].append(i+1)\n    return ans\nprint ( beautifulSubstrings ( \"ab\" * 20 , 4 ) )",
    "execution_output": 190
  },
  {
    "id": 841,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa=[]\n    for c in s:\n        if c in \"aiueo\":\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i=defaultdict(list)\n    a2i[0].append(0)\n    ans=s=0\n    for i,a in enumerate(aa):\n        s+=a\n        for j in a2i[s]:\n            if (((i+1-j)//2)**2)%k==0:\n                ans+=1\n        a2i[s].append(i+1)\n    return ans\nprint ( beautifulSubstrings ( ( \"a1\" * 15 ) + ( \"bc\" * 5 ) , 9 ) )",
    "execution_output": 65
  },
  {
    "id": 842,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa=[]\n    for c in s:\n        if c in \"aiueo\":\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i=defaultdict(list)\n    a2i[0].append(0)\n    ans=s=0\n    for i,a in enumerate(aa):\n        s+=a\n        for j in a2i[s]:\n            if (((i+1-j)//2)**2)%k==0:\n                ans+=1\n        a2i[s].append(i+1)\n    return ans\nprint ( beautifulSubstrings ( \"aB\" * 18 + \"XYZ\" , 5 ) )",
    "execution_output": 51
  },
  {
    "id": 843,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa=[]\n    for c in s:\n        if c in \"aiueo\":\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i=defaultdict(list)\n    a2i[0].append(0)\n    ans=s=0\n    for i,a in enumerate(aa):\n        s+=a\n        for j in a2i[s]:\n            if (((i+1-j)//2)**2)%k==0:\n                ans+=1\n        a2i[s].append(i+1)\n    return ans\nprint ( beautifulSubstrings ( \"aeioubcdfg\" * 6 , 25 ) )",
    "execution_output": 156
  },
  {
    "id": 844,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa=[]\n    for c in s:\n        if c in \"aiueo\":\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i=defaultdict(list)\n    a2i[0].append(0)\n    ans=s=0\n    for i,a in enumerate(aa):\n        s+=a\n        for j in a2i[s]:\n            if (((i+1-j)//2)**2)%k==0:\n                ans+=1\n        a2i[s].append(i+1)\n    return ans\nprint ( beautifulSubstrings ( \"az\" * 30 , 12 ) )",
    "execution_output": 125
  },
  {
    "id": 845,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k+1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod(x ** ((v + 1) // 2) for x, v in p.items())\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[(x, i%k)] += 1\n    return sum(v * (v-1) // 2 for v in m.values())\nprint ( beautifulSubstrings ( \"aeioubcdfghaeiouxyz\" , 6 ) )",
    "execution_output": 5
  },
  {
    "id": 846,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k+1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod(x ** ((v + 1) // 2) for x, v in p.items())\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[(x, i%k)] += 1\n    return sum(v * (v-1) // 2 for v in m.values())\nprint ( beautifulSubstrings ( \"zzzaaaabbbbccddeeiou\" , 12 ) )",
    "execution_output": 0
  },
  {
    "id": 847,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k+1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod(x ** ((v + 1) // 2) for x, v in p.items())\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[(x, i%k)] += 1\n    return sum(v * (v-1) // 2 for v in m.values())\nprint ( beautifulSubstrings ( \"leetcodeisgreat\" , 30 ) )",
    "execution_output": 0
  },
  {
    "id": 848,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k+1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod(x ** ((v + 1) // 2) for x, v in p.items())\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[(x, i%k)] += 1\n    return sum(v * (v-1) // 2 for v in m.values())\nprint ( beautifulSubstrings ( \"abracadabraabracadabra\" , 18 ) )",
    "execution_output": 5
  },
  {
    "id": 849,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k+1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod(x ** ((v + 1) // 2) for x, v in p.items())\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[(x, i%k)] += 1\n    return sum(v * (v-1) // 2 for v in m.values())\nprint ( beautifulSubstrings ( \"uoieaabcdefghijklmnopqrstuvwxyz\" , 90 ) )",
    "execution_output": 0
  },
  {
    "id": 850,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    \n    order = sorted(range(n), key = lambda x: nums[x])\n    \n    out = [-1] * n\n    \n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l: i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint ( lexicographicallySmallestArray ( [ 10 , - 5 , - 4 , - 3 , 2 , 4 , 9 , 15 , 16 , - 1 , - 2 , 30 ] , 2 ) )",
    "execution_output": [
      9,
      -5,
      -4,
      -3,
      2,
      4,
      10,
      15,
      16,
      -2,
      -1,
      30
    ]
  },
  {
    "id": 851,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    \n    order = sorted(range(n), key = lambda x: nums[x])\n    \n    out = [-1] * n\n    \n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l: i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint ( lexicographicallySmallestArray ( [ 3 , 1 , 3 , 2 , 2 , 4 , 4 , 5 , 1 , 0 ] , 1 ) )",
    "execution_output": [
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5
    ]
  },
  {
    "id": 852,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    \n    order = sorted(range(n), key = lambda x: nums[x])\n    \n    out = [-1] * n\n    \n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l: i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint ( lexicographicallySmallestArray ( [ 100 , 1 , 50 , 2 , 49 , 3 , 48 , 4 , 47 , 5 ] , 1 ) )",
    "execution_output": [
      100,
      1,
      47,
      2,
      48,
      3,
      49,
      4,
      50,
      5
    ]
  },
  {
    "id": 853,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    \n    order = sorted(range(n), key = lambda x: nums[x])\n    \n    out = [-1] * n\n    \n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l: i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint ( lexicographicallySmallestArray ( [ 1 , 3 , 6 , 7 , 10 , 12 , 13 ] , 2 ) )",
    "execution_output": [
      1,
      3,
      6,
      7,
      10,
      12,
      13
    ]
  },
  {
    "id": 854,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    \n    order = sorted(range(n), key = lambda x: nums[x])\n    \n    out = [-1] * n\n    \n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l: i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint ( lexicographicallySmallestArray ( [ 0 , - 2 , - 4 , - 1 , - 3 , 1 , 3 , 2 , 6 , 4 , 5 , 20 , 23 , 22 ] , 2 ) )",
    "execution_output": [
      -4,
      -3,
      -2,
      -1,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      20,
      22,
      23
    ]
  },
  {
    "id": 855,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = len(nums), len(nums[0])\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint ( matrixSum ( [ [ 3 , 1 , 9 , 7 , 5 ] , [ 8 , 4 , 2 , 6 , 0 ] , [ 5 , 5 , 5 , 5 , 5 ] ] ) )",
    "execution_output": 31
  },
  {
    "id": 856,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = len(nums), len(nums[0])\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint ( matrixSum ( [ [ - 1 , - 3 , 2 , 4 ] , [ 0 , - 2 , - 5 , 6 ] , [ 7 , - 8 , 1 , - 4 ] ] ) )",
    "execution_output": 9
  },
  {
    "id": 857,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = len(nums), len(nums[0])\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint ( matrixSum ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] , [ 10 , 11 , 12 ] ] ) )",
    "execution_output": 33
  },
  {
    "id": 858,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = len(nums), len(nums[0])\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint ( matrixSum ( [ [ 10 , 10 , 10 , 1 , 1 , 1 ] , [ 5 , 5 , 5 , 5 , 5 , 5 ] ] ) )",
    "execution_output": 45
  },
  {
    "id": 859,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = len(nums), len(nums[0])\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint ( matrixSum ( [ [ 100 , 3 , 50 , 7 ] , [ 6 , 60 , 8 , 90 ] , [ 20 , 1 , 2 , 3 ] , [ 55 , 54 , 53 , 52 ] , [ 9 , 99 , 10 , 11 ] ] ) )",
    "execution_output": 265
  },
  {
    "id": 860,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n        \n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint ( matrixSum ( [ [ 1 , 7 , 3 , 4 ] , [ 5 , 6 , 2 , 8 ] , [ 9 , 0 , 11 , 10 ] ] ) )",
    "execution_output": 32
  },
  {
    "id": 861,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n        \n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint ( matrixSum ( [ [ 10 , 20 , 15 , 25 , 5 ] , [ 3 , 50 , 40 , 30 , 35 ] , [ 45 , 2 , 60 , 55 , 1 ] ] ) )",
    "execution_output": 195
  },
  {
    "id": 862,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n        \n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint ( matrixSum ( [ [ - 5 , 3 , 0 , 2 ] , [ - 1 , - 4 , 7 , 6 ] , [ 8 , - 2 , 1 , 4 ] ] ) )",
    "execution_output": 15
  },
  {
    "id": 863,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n        \n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint ( matrixSum ( [ [ 100 , 100 , 50 , 50 ] , [ 75 , 75 , 75 , 75 ] , [ 25 , 25 , 200 , 200 ] ] ) )",
    "execution_output": 550
  },
  {
    "id": 864,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n        \n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint ( matrixSum ( [ [ 12 , 14 , 16 , 18 , 20 , 22 ] , [ 21 , 19 , 17 , 15 , 13 , 11 ] , [ 5 , 25 , 10 , 30 , 8 , 28 ] ] ) )",
    "execution_output": 125
  },
  {
    "id": 865,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint ( matrixSum ( [ [ 5 , 1 , 9 , 3 ] , [ 8 , 6 , 2 , 7 ] , [ 4 , 10 , 12 , 11 ] ] ) )",
    "execution_output": 37
  },
  {
    "id": 866,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint ( matrixSum ( [ [ 2 , 2 , 2 , 3 , 3 ] , [ 1 , 4 , 4 , 4 , 5 ] , [ 5 , 5 , 1 , 1 , 1 ] , [ 3 , 2 , 4 , 5 , 1 ] , [ 0 , 6 , 6 , 6 , 6 ] ] ) )",
    "execution_output": 26
  },
  {
    "id": 867,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint ( matrixSum ( [ [ - 5 , - 1 , - 3 ] , [ 2 , 0 , - 2 ] , [ 4 , - 4 , 3 ] , [ - 1 , 1 , - 6 ] ] ) )",
    "execution_output": 7
  },
  {
    "id": 868,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint ( matrixSum ( [ [ 100 , 1 , 50 , 2 , 75 , 3 ] , [ 4 , 200 , 5 , 150 , 6 , 125 ] ] ) )",
    "execution_output": 490
  },
  {
    "id": 869,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint ( matrixSum ( [ [ 7 , - 1 ] , [ 3 , 9 ] , [ 0 , 0 ] , [ - 5 , 2 ] , [ 10 , - 3 ] , [ 4 , 5 ] ] ) )",
    "execution_output": 14
  },
  {
    "id": 870,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = len(nums), len(nums[0])\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint ( matrixSum ( [ [ 3 , 1 , 2 , 5 ] , [ 9 , 7 , 3 , 4 ] , [ 6 , 8 , 2 , 1 ] ] ) )",
    "execution_output": 23
  },
  {
    "id": 871,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = len(nums), len(nums[0])\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint ( matrixSum ( [ [ 5 , 5 , 5 , 5 ] , [ 5 , 5 , 5 , 5 ] , [ 5 , 5 , 5 , 5 ] ] ) )",
    "execution_output": 20
  },
  {
    "id": 872,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = len(nums), len(nums[0])\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint ( matrixSum ( [ [ 10 , 20 , 30 , 40 ] , [ 40 , 30 , 20 , 10 ] , [ 25 , 35 , 15 , 45 ] , [ 5 , 50 , 0 , 60 ] ] ) )",
    "execution_output": 150
  },
  {
    "id": 873,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = len(nums), len(nums[0])\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint ( matrixSum ( [ [ 0 , 1 , 0 , 1 , 0 ] , [ 2 , 2 , 2 , 2 , 2 ] , [ 9 , 0 , 9 , 0 , 9 ] ] ) )",
    "execution_output": 31
  },
  {
    "id": 874,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = len(nums), len(nums[0])\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint ( matrixSum ( [ [ 100 , 200 , 300 ] , [ 300 , 200 , 100 ] , [ 150 , 150 , 150 ] ] ) )",
    "execution_output": 650
  },
  {
    "id": 875,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list(list(l) for l in zip(*matrix))\n    return sum(map(max,mat))\nprint ( matrixSum ( [ [ 5 , 1 , 9 , 3 ] , [ 8 , 2 , 7 , 4 ] , [ 6 , 10 , 0 , 11 ] ] ) )",
    "execution_output": 29
  },
  {
    "id": 876,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list(list(l) for l in zip(*matrix))\n    return sum(map(max,mat))\nprint ( matrixSum ( [ [ - 5 , 3 , 12 , - 1 , 7 ] , [ 0 , - 2 , 8 , 4 , - 9 ] , [ 6 , - 3 , 10 , 2 , - 7 ] ] ) )",
    "execution_output": 16
  },
  {
    "id": 877,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list(list(l) for l in zip(*matrix))\n    return sum(map(max,mat))\nprint ( matrixSum ( [ [ 2 , 2 , 2 , 2 ] , [ 1 , 3 , 1 , 3 ] , [ 3 , 1 , 3 , 1 ] ] ) )",
    "execution_output": 10
  },
  {
    "id": 878,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list(list(l) for l in zip(*matrix))\n    return sum(map(max,mat))\nprint ( matrixSum ( [ [ 9 , 4 , 7 , 1 , 5 ] , [ 6 , 8 , 2 , 3 , 0 ] , [ 10 , 14 , 12 , 11 , 13 ] , [ 15 , 16 , 17 , 18 , 19 ] , [ 20 , 24 , 22 , 21 , 23 ] ] ) )",
    "execution_output": 110
  },
  {
    "id": 879,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list(list(l) for l in zip(*matrix))\n    return sum(map(max,mat))\nprint ( matrixSum ( [ [ 1000 , 2000 , 3000 ] , [ 1500 , 2500 , 3500 ] , [ 500 , 4000 , 100 ] ] ) )",
    "execution_output": 8000
  },
  {
    "id": 880,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = len(a), len(a[0])\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint ( matrixSum ( [ [ 3 , - 1 , 2 , 7 , 5 ] , [ 9 , 8 , - 2 , 6 , 4 ] , [ 5 , 5 , 5 , - 3 , 1 ] , [ 0 , - 4 , 10 , 3 , 2 ] ] ) )",
    "execution_output": 28
  },
  {
    "id": 881,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = len(a), len(a[0])\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint ( matrixSum ( [ [ 100 , 1 , 100 , 1 , 50 , 50 ] , [ 2 , 2 , 2 , 99 , 99 , 3 ] , [ 0 , 100 , 50 , 50 , 50 , 100 ] ] ) )",
    "execution_output": 352
  },
  {
    "id": 882,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = len(a), len(a[0])\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint ( matrixSum ( [ [ 25 , 24 , 23 , 22 , 21 ] , [ 20 , 19 , 18 , 17 , 16 ] , [ 15 , 14 , 13 , 12 , 11 ] , [ 10 , 9 , 8 , 7 , 6 ] , [ 5 , 4 , 3 , 2 , 1 ] ] ) )",
    "execution_output": 115
  },
  {
    "id": 883,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = len(a), len(a[0])\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint ( matrixSum ( [ [ 1 , 1 , 1 , 100 , 1 , 1 , 1 ] , [ 2 , 2 , 200 , 2 , 2 , 2 , 2 ] , [ 3 , 300 , 3 , 3 , 3 , 3 , 3 ] ] ) )",
    "execution_output": 318
  },
  {
    "id": 884,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = len(a), len(a[0])\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint ( matrixSum ( [ [ 9 , 8 , 7 , 6 ] , [ 5 , 4 , 3 , 2 ] , [ 12 , 11 , 10 , 0 ] , [ 13 , 14 , 15 , 1 ] ] ) )",
    "execution_output": 48
  },
  {
    "id": 885,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    \n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n\n    return max_strength\nprint ( maxStrength ( [ 4 , - 1 , - 2 , - 3 , 5 ] ) )",
    "execution_output": 120
  },
  {
    "id": 886,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    \n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n\n    return max_strength\nprint ( maxStrength ( [ 0 , - 1 , - 2 , 3 , 4 , 0 ] ) )",
    "execution_output": 24
  },
  {
    "id": 887,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    \n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n\n    return max_strength\nprint ( maxStrength ( [ - 1 , - 2 , - 3 , - 4 , 6 ] ) )",
    "execution_output": 144
  },
  {
    "id": 888,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    \n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n\n    return max_strength\nprint ( maxStrength ( [ 2 , 2 , 2 , - 2 , - 2 , 3 ] ) )",
    "execution_output": 96
  },
  {
    "id": 889,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    \n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n\n    return max_strength\nprint ( maxStrength ( [ 1 , 1 , - 1 , - 1 , - 1 , 2 , 3 ] ) )",
    "execution_output": 6
  },
  {
    "id": 890,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint ( maxStrength ( [ 3 , - 1 , - 2 , 4 , - 5 , 6 ] ) )",
    "execution_output": 720
  },
  {
    "id": 891,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint ( maxStrength ( [ 2 , 2 , 3 , 5 , - 1 , - 1 , - 2 , - 2 ] ) )",
    "execution_output": 240
  },
  {
    "id": 892,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint ( maxStrength ( [ - 10 , - 3 , - 2 , - 1 , 7 ] ) )",
    "execution_output": 420
  },
  {
    "id": 893,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint ( maxStrength ( [ 0 , 1 , 2 , - 3 , - 4 , 5 ] ) )",
    "execution_output": 120
  },
  {
    "id": 894,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint ( maxStrength ( [ 1000 , - 1001 , - 2 , 3 , 5 ] ) )",
    "execution_output": 30030000
  },
  {
    "id": 895,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n-1):\n        if s[i] == s[i+1]: ii.append(i+1)\n    if len(ii) < 3: return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]): ans = max(ans, r-l)\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"abccbaabcc\" ) )",
    "execution_output": 6
  },
  {
    "id": 896,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n-1):\n        if s[i] == s[i+1]: ii.append(i+1)\n    if len(ii) < 3: return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]): ans = max(ans, r-l)\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"aabbaaccaab\" ) )",
    "execution_output": 4
  },
  {
    "id": 897,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n-1):\n        if s[i] == s[i+1]: ii.append(i+1)\n    if len(ii) < 3: return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]): ans = max(ans, r-l)\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"abcddeffghijjk\" ) )",
    "execution_output": 8
  },
  {
    "id": 898,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n-1):\n        if s[i] == s[i+1]: ii.append(i+1)\n    if len(ii) < 3: return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]): ans = max(ans, r-l)\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"zzxyyyxzzxy\" ) )",
    "execution_output": 6
  },
  {
    "id": 899,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n-1):\n        if s[i] == s[i+1]: ii.append(i+1)\n    if len(ii) < 3: return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]): ans = max(ans, r-l)\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"qweerrttyuuiop\" ) )",
    "execution_output": 7
  },
  {
    "id": 900,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    \n    left = 0\n    best = 1\n    count = 0\n    \n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n            \n        best = max(best, right - left + 1)\n    return best\nprint ( longestSemiRepetitiveSubstring ( \"abccbaabccba\" ) )",
    "execution_output": 6
  },
  {
    "id": 901,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    \n    left = 0\n    best = 1\n    count = 0\n    \n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n            \n        best = max(best, right - left + 1)\n    return best\nprint ( longestSemiRepetitiveSubstring ( \"aabbaabbabba\" ) )",
    "execution_output": 5
  },
  {
    "id": 902,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    \n    left = 0\n    best = 1\n    count = 0\n    \n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n            \n        best = max(best, right - left + 1)\n    return best\nprint ( longestSemiRepetitiveSubstring ( \"abcddcbaefghhijkllmno\" ) )",
    "execution_output": 13
  },
  {
    "id": 903,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    \n    left = 0\n    best = 1\n    count = 0\n    \n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n            \n        best = max(best, right - left + 1)\n    return best\nprint ( longestSemiRepetitiveSubstring ( \"zzxyyxzzxyyzzx\" ) )",
    "execution_output": 6
  },
  {
    "id": 904,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    \n    left = 0\n    best = 1\n    count = 0\n    \n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n            \n        best = max(best, right - left + 1)\n    return best\nprint ( longestSemiRepetitiveSubstring ( \"11223344556677889900\" ) )",
    "execution_output": 4
  },
  {
    "id": 905,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s)-1):\n        if s[i+1] == s[i]: ans.append(i)\n    ans.append(len(s)-1)\n    if len(ans) == 2: return len(s)\n    return max(ans[i+2]-ans[i] for i in range(len(ans)-2))\nprint ( longestSemiRepetitiveSubstring ( \"1212334123455667899\" ) )",
    "execution_output": 12
  },
  {
    "id": 906,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s)-1):\n        if s[i+1] == s[i]: ans.append(i)\n    ans.append(len(s)-1)\n    if len(ans) == 2: return len(s)\n    return max(ans[i+2]-ans[i] for i in range(len(ans)-2))\nprint ( longestSemiRepetitiveSubstring ( \"aabbcaaddeeffgghijjkkllmmnnoo\" ) )",
    "execution_output": 6
  },
  {
    "id": 907,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s)-1):\n        if s[i+1] == s[i]: ans.append(i)\n    ans.append(len(s)-1)\n    if len(ans) == 2: return len(s)\n    return max(ans[i+2]-ans[i] for i in range(len(ans)-2))\nprint ( longestSemiRepetitiveSubstring ( \"112233445566778899001122334455\" ) )",
    "execution_output": 4
  },
  {
    "id": 908,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s)-1):\n        if s[i+1] == s[i]: ans.append(i)\n    ans.append(len(s)-1)\n    if len(ans) == 2: return len(s)\n    return max(ans[i+2]-ans[i] for i in range(len(ans)-2))\nprint ( longestSemiRepetitiveSubstring ( \"abccbaabccbaabccbaabc\" ) )",
    "execution_output": 6
  },
  {
    "id": 909,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s)-1):\n        if s[i+1] == s[i]: ans.append(i)\n    ans.append(len(s)-1)\n    if len(ans) == 2: return len(s)\n    return max(ans[i+2]-ans[i] for i in range(len(ans)-2))\nprint ( longestSemiRepetitiveSubstring ( ( \"aab\" * 33 ) + \"a\" ) )",
    "execution_output": 6
  },
  {
    "id": 910,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]: t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]: t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint ( longestSemiRepetitiveSubstring ( \"abccbaabccddeffedcba\" ) )",
    "execution_output": 9
  },
  {
    "id": 911,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]: t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]: t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint ( longestSemiRepetitiveSubstring ( \"aabbabaabbabbaabbaaab\" ) )",
    "execution_output": 6
  },
  {
    "id": 912,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]: t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]: t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint ( longestSemiRepetitiveSubstring ( \"123344556677788899900012345\" ) )",
    "execution_output": 7
  },
  {
    "id": 913,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]: t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]: t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint ( longestSemiRepetitiveSubstring ( \"AaAaBBbBccCddDD\" ) )",
    "execution_output": 9
  },
  {
    "id": 914,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]: t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]: t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint ( longestSemiRepetitiveSubstring ( \"xyzxyzzxyxyzzxyzxz\" ) )",
    "execution_output": 12
  },
  {
    "id": 915,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i]-bak[i-2])\n    return mx\nprint ( longestSemiRepetitiveSubstring ( \"abccdefghijjklmnooppqrst\" ) )",
    "execution_output": 14
  },
  {
    "id": 916,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i]-bak[i-2])\n    return mx\nprint ( longestSemiRepetitiveSubstring ( \"aabcaaddeffghiiijkllmno\" ) )",
    "execution_output": 8
  },
  {
    "id": 917,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i]-bak[i-2])\n    return mx\nprint ( longestSemiRepetitiveSubstring ( \"xyzzyababaqqrstuvwwxy\" ) )",
    "execution_output": 15
  },
  {
    "id": 918,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i]-bak[i-2])\n    return mx\nprint ( longestSemiRepetitiveSubstring ( \"aaabbbccddeeffgg\" ) )",
    "execution_output": 4
  },
  {
    "id": 919,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i]-bak[i-2])\n    return mx\nprint ( longestSemiRepetitiveSubstring ( \"pqrstuvwxxyzzabcddde\" ) )",
    "execution_output": 12
  },
  {
    "id": 920,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = 0, 0\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r-1] and r > 0) < 2:\n            cnt += (s[r] == s[r-1] and r > 0)\n            r += 1\n        ans = max(ans, r - l)\n        if l == n-1: break\n        cnt -= s[l] == s[l+1]\n        l += 1\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"abccbaab\" ) )",
    "execution_output": 6
  },
  {
    "id": 921,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = 0, 0\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r-1] and r > 0) < 2:\n            cnt += (s[r] == s[r-1] and r > 0)\n            r += 1\n        ans = max(ans, r - l)\n        if l == n-1: break\n        cnt -= s[l] == s[l+1]\n        l += 1\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"aabbaaabc\" ) )",
    "execution_output": 4
  },
  {
    "id": 922,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = 0, 0\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r-1] and r > 0) < 2:\n            cnt += (s[r] == s[r-1] and r > 0)\n            r += 1\n        ans = max(ans, r - l)\n        if l == n-1: break\n        cnt -= s[l] == s[l+1]\n        l += 1\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"xyzzyabcdd\" ) )",
    "execution_output": 9
  },
  {
    "id": 923,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = 0, 0\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r-1] and r > 0) < 2:\n            cnt += (s[r] == s[r-1] and r > 0)\n            r += 1\n        ans = max(ans, r - l)\n        if l == n-1: break\n        cnt -= s[l] == s[l+1]\n        l += 1\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"pqqrstuvvvw\" ) )",
    "execution_output": 8
  },
  {
    "id": 924,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = 0, 0\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r-1] and r > 0) < 2:\n            cnt += (s[r] == s[r-1] and r > 0)\n            r += 1\n        ans = max(ans, r - l)\n        if l == n-1: break\n        cnt -= s[l] == s[l+1]\n        l += 1\n    return ans\nprint ( longestSemiRepetitiveSubstring ( \"112345566778\" ) )",
    "execution_output": 7
  },
  {
    "id": 925,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint ( longestString ( 5 , 7 , 3 ) )",
    "execution_output": 28
  },
  {
    "id": 926,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint ( longestString ( 10 , 1 , 4 ) )",
    "execution_output": 14
  },
  {
    "id": 927,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint ( longestString ( 8 , 9 , 0 ) )",
    "execution_output": 34
  },
  {
    "id": 928,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint ( longestString ( 12 , 11 , 5 ) )",
    "execution_output": 56
  },
  {
    "id": 929,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint ( longestString ( 2 , 10 , 6 ) )",
    "execution_output": 22
  },
  {
    "id": 930,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint ( longestString ( 100 , 10 , 50 ) )",
    "execution_output": 142
  },
  {
    "id": 931,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint ( longestString ( 15 , 100 , 60 ) )",
    "execution_output": 182
  },
  {
    "id": 932,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint ( longestString ( 123 , 123 , 77 ) )",
    "execution_output": 646
  },
  {
    "id": 933,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint ( longestString ( 500 , 499 , 1000 ) )",
    "execution_output": 3998
  },
  {
    "id": 934,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint ( longestString ( 2000 , 2001 , 300 ) )",
    "execution_output": 8602
  },
  {
    "id": 935,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans  + z) * 2\nprint ( longestString ( 5 , 5 , 3 ) )",
    "execution_output": 26
  },
  {
    "id": 936,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans  + z) * 2\nprint ( longestString ( 8 , 7 , 4 ) )",
    "execution_output": 38
  },
  {
    "id": 937,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans  + z) * 2\nprint ( longestString ( 3 , 10 , 2 ) )",
    "execution_output": 18
  },
  {
    "id": 938,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans  + z) * 2\nprint ( longestString ( 6 , 4 , 0 ) )",
    "execution_output": 18
  },
  {
    "id": 939,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans  + z) * 2\nprint ( longestString ( 9 , 2 , 5 ) )",
    "execution_output": 20
  },
  {
    "id": 940,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda:inf)\n    A[words[0][0]+words[0][-1]] = len(words[0]) \n    for w in words[1:]:\n        B = defaultdict(lambda:inf) \n        for a,x in A.items():\n            B[a[0]+w[-1]] = min(B[a[0]+w[-1]],x+len(w) - (a[-1]==w[0]) )\n            B[w[0]+a[-1]] = min(B[w[0]+a[-1]],x+len(w) - (w[-1]==a[0]) ) \n        A,B = B ,A \n    return min(A.values())\nprint ( minimizeConcatenatedLength ( [ \"ab\" , \"bc\" , \"ca\" , \"ad\" , \"db\" , \"be\" ] ) )",
    "execution_output": 7
  },
  {
    "id": 941,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda:inf)\n    A[words[0][0]+words[0][-1]] = len(words[0]) \n    for w in words[1:]:\n        B = defaultdict(lambda:inf) \n        for a,x in A.items():\n            B[a[0]+w[-1]] = min(B[a[0]+w[-1]],x+len(w) - (a[-1]==w[0]) )\n            B[w[0]+a[-1]] = min(B[w[0]+a[-1]],x+len(w) - (w[-1]==a[0]) ) \n        A,B = B ,A \n    return min(A.values())\nprint ( minimizeConcatenatedLength ( [ \"Apple\" , \"ear\" , \"river\" , \"racer\" , \"robot\" , \"top\" ] ) )",
    "execution_output": 21
  },
  {
    "id": 942,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda:inf)\n    A[words[0][0]+words[0][-1]] = len(words[0]) \n    for w in words[1:]:\n        B = defaultdict(lambda:inf) \n        for a,x in A.items():\n            B[a[0]+w[-1]] = min(B[a[0]+w[-1]],x+len(w) - (a[-1]==w[0]) )\n            B[w[0]+a[-1]] = min(B[w[0]+a[-1]],x+len(w) - (w[-1]==a[0]) ) \n        A,B = B ,A \n    return min(A.values())\nprint ( minimizeConcatenatedLength ( [ \"level\" , \"lever\" , \"revival\" , \"lateral\" , \"radar\" ] ) )",
    "execution_output": 26
  },
  {
    "id": 943,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda:inf)\n    A[words[0][0]+words[0][-1]] = len(words[0]) \n    for w in words[1:]:\n        B = defaultdict(lambda:inf) \n        for a,x in A.items():\n            B[a[0]+w[-1]] = min(B[a[0]+w[-1]],x+len(w) - (a[-1]==w[0]) )\n            B[w[0]+a[-1]] = min(B[w[0]+a[-1]],x+len(w) - (w[-1]==a[0]) ) \n        A,B = B ,A \n    return min(A.values())\nprint ( minimizeConcatenatedLength ( [ \"cat\" , \"taco\" , \"octopus\" , \"sun\" , \"night\" , \"hat\" ] ) )",
    "execution_output": 21
  },
  {
    "id": 944,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda:inf)\n    A[words[0][0]+words[0][-1]] = len(words[0]) \n    for w in words[1:]:\n        B = defaultdict(lambda:inf) \n        for a,x in A.items():\n            B[a[0]+w[-1]] = min(B[a[0]+w[-1]],x+len(w) - (a[-1]==w[0]) )\n            B[w[0]+a[-1]] = min(B[w[0]+a[-1]],x+len(w) - (w[-1]==a[0]) ) \n        A,B = B ,A \n    return min(A.values())\nprint ( minimizeConcatenatedLength ( [ \"aaaaa\" , \"aaab\" , \"baaa\" , \"bbb\" , \"babb\" , \"abba\" ] ) )",
    "execution_output": 20
  },
  {
    "id": 945,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"ab\" , \"bc\" , \"cd\" , \"da\" , \"ac\" , \"ca\" , \"db\" ] ) )",
    "execution_output": 9
  },
  {
    "id": 946,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"aaa\" , \"aba\" , \"caa\" , \"aac\" , \"baa\" , \"cab\" ] ) )",
    "execution_output": 13
  },
  {
    "id": 947,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"Aa\" , \"aB\" , \"Bb\" , \"bA\" , \"AB\" , \"ba\" , \"aa\" ] ) )",
    "execution_output": 9
  },
  {
    "id": 948,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"1x\" , \"x2\" , \"2y\" , \"y3\" , \"3z\" , \"z1\" , \"2x\" ] ) )",
    "execution_output": 9
  },
  {
    "id": 949,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"a-\" , \"-b\" , \"b_\" , \"_c\" , \"c.\" , \".a\" , \"d-\" ] ) )",
    "execution_output": 9
  },
  {
    "id": 950,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"ab\" , \"bc\" , \"ca\" , \"ad\" , \"de\" , \"ea\" ] ) )",
    "execution_output": 7
  },
  {
    "id": 951,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"zzza\" , \"aqq\" , \"qra\" , \"at\" , \"tbz\" , \"zb\" ] ) )",
    "execution_output": 12
  },
  {
    "id": 952,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"racecar\" , \"radar\" , \"refer\" , \"rotor\" , \"level\" ] ) )",
    "execution_output": 24
  },
  {
    "id": 953,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"alpha\" , \"omega\" , \"atom\" , \"matrix\" , \"xenon\" , \"neon\" , \"nova\" ] ) )",
    "execution_output": 27
  },
  {
    "id": 954,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint ( minimizeConcatenatedLength ( [ \"Abc\" , \"cA\" , \"abc\" , \"Cba\" , \"aC\" , \"Cab\" ] ) )",
    "execution_output": 12
  },
  {
    "id": 955,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x,y in zip(moveFrom,moveTo):\n        tmp = d[x]\n        d[x]-=tmp\n        d[y]+=tmp\n    return [x for x in sorted(d) if d[x]>0]\nprint ( relocateMarbles ( [ 1 , 1 , 2 , 3 , 3 , 3 , 4 ] , [ 1 , 3 , 5 ] , [ 2 , 2 , 2 ] ) )",
    "execution_output": [
      2,
      4
    ]
  },
  {
    "id": 956,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x,y in zip(moveFrom,moveTo):\n        tmp = d[x]\n        d[x]-=tmp\n        d[y]+=tmp\n    return [x for x in sorted(d) if d[x]>0]\nprint ( relocateMarbles ( [ 10 , 20 , 20 , 30 ] , [ 10 , 20 , 30 ] , [ 20 , 30 , 10 ] ) )",
    "execution_output": [
      10
    ]
  },
  {
    "id": 957,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x,y in zip(moveFrom,moveTo):\n        tmp = d[x]\n        d[x]-=tmp\n        d[y]+=tmp\n    return [x for x in sorted(d) if d[x]>0]\nprint ( relocateMarbles ( [ 5 , 5 , 6 , 7 , 8 ] , [ 5 , 5 , 6 , 7 , 8 ] , [ 6 , 7 , 6 , 8 , 5 ] ) )",
    "execution_output": [
      5,
      6
    ]
  },
  {
    "id": 958,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x,y in zip(moveFrom,moveTo):\n        tmp = d[x]\n        d[x]-=tmp\n        d[y]+=tmp\n    return [x for x in sorted(d) if d[x]>0]\nprint ( relocateMarbles ( [ 100 , 100 , 200 , 300 , 300 ] , [ 200 , 300 , 400 , 100 ] , [ 300 , 400 , 300 , 400 ] ) )",
    "execution_output": [
      300,
      400
    ]
  },
  {
    "id": 959,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x,y in zip(moveFrom,moveTo):\n        tmp = d[x]\n        d[x]-=tmp\n        d[y]+=tmp\n    return [x for x in sorted(d) if d[x]>0]\nprint ( relocateMarbles ( [ 1 , 2 , 2 , 4 , 5 ] , [ 9 , 2 , 1 , 4 , 5 ] , [ 1 , 9 , 4 , 5 , 2 ] ) )",
    "execution_output": [
      2,
      9
    ]
  },
  {
    "id": 960,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)  # 初始有石块的位置\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)  # i不再是有石块的位置\n        loc.add(j)  # 不管之前有没有石块，j成为有石块的位置\n    return sorted(loc)\nprint ( relocateMarbles ( [ 1 , 2 , 3 ] , [ 1 , 4 , 2 , 3 ] , [ 4 , 2 , 5 , 2 ] ) )",
    "execution_output": [
      2,
      5
    ]
  },
  {
    "id": 961,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)  # 初始有石块的位置\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)  # i不再是有石块的位置\n        loc.add(j)  # 不管之前有没有石块，j成为有石块的位置\n    return sorted(loc)\nprint ( relocateMarbles ( [ 5 , 5 , 5 , 6 , 7 ] , [ 5 , 6 , 7 ] , [ 6 , 7 , 5 ] ) )",
    "execution_output": [
      5
    ]
  },
  {
    "id": 962,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)  # 初始有石块的位置\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)  # i不再是有石块的位置\n        loc.add(j)  # 不管之前有没有石块，j成为有石块的位置\n    return sorted(loc)\nprint ( relocateMarbles ( [ 10 , 20 , 30 , 40 ] , [ 10 , 20 , 30 , 40 , 50 ] , [ 20 , 30 , 40 , 50 , 10 ] ) )",
    "execution_output": [
      10
    ]
  },
  {
    "id": 963,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)  # 初始有石块的位置\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)  # i不再是有石块的位置\n        loc.add(j)  # 不管之前有没有石块，j成为有石块的位置\n    return sorted(loc)\nprint ( relocateMarbles ( [ 1 , 2 , 3 , 4 ] , [ 1 , 2 , 3 , 2 ] , [ 2 , 1 , 2 , 4 ] ) )",
    "execution_output": [
      1,
      4
    ]
  },
  {
    "id": 964,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)  # 初始有石块的位置\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)  # i不再是有石块的位置\n        loc.add(j)  # 不管之前有没有石块，j成为有石块的位置\n    return sorted(loc)\nprint ( relocateMarbles ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] , [ 1 , 2 , 11 , 5 , 10 , 12 , 4 , 7 ] , [ 11 , 12 , 2 , 2 , 1 , 10 , 4 , 6 ] ) )",
    "execution_output": [
      1,
      2,
      3,
      4,
      6,
      8,
      9,
      10
    ]
  },
  {
    "id": 965,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint ( relocateMarbles ( [ 1 , 1 , 2 , 3 , 3 , 4 ] , [ 1 , 2 , 3 , 4 ] , [ 4 , 3 , 5 , 6 ] ) )",
    "execution_output": [
      5,
      6
    ]
  },
  {
    "id": 966,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint ( relocateMarbles ( [ 10 , 20 , 30 ] , [ 10 , 20 , 25 , 30 ] , [ 25 , 10 , 40 , 10 ] ) )",
    "execution_output": [
      10,
      40
    ]
  },
  {
    "id": 967,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint ( relocateMarbles ( [ 5 , 6 ] , [ 5 , 6 , 5 , 6 ] , [ 6 , 5 , 6 , 5 ] ) )",
    "execution_output": [
      5
    ]
  },
  {
    "id": 968,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint ( relocateMarbles ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] , [ 2 , 4 , 6 , 7 , 3 ] , [ 4 , 2 , 4 , 3 , 7 ] ) )",
    "execution_output": [
      1,
      2,
      4,
      5,
      7
    ]
  },
  {
    "id": 969,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint ( relocateMarbles ( [ 1000 , 2000 , 3000 , 4000 ] , [ 1000 , 3000 , 4000 , 2000 ] , [ 3000 , 5000 , 1000 , 5000 ] ) )",
    "execution_output": [
      1000,
      5000
    ]
  },
  {
    "id": 970,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint ( relocateMarbles ( [ 1 , 1 , 2 , 3 , 3 , 4 ] , [ 1 , 2 , 3 , 4 ] , [ 3 , 3 , 5 , 1 ] ) )",
    "execution_output": [
      1,
      5
    ]
  },
  {
    "id": 971,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint ( relocateMarbles ( [ 10 , 20 , 30 , 40 , 50 ] , [ 10 , 20 , 30 , 40 , 50 ] , [ 20 , 30 , 40 , 50 , 60 ] ) )",
    "execution_output": [
      60
    ]
  },
  {
    "id": 972,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint ( relocateMarbles ( [ 5 , 6 , 7 , 8 , 9 ] , [ 6 , 7 , 6 , 9 ] , [ 10 , 6 , 8 , 5 ] ) )",
    "execution_output": [
      5,
      8,
      10
    ]
  },
  {
    "id": 973,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint ( relocateMarbles ( [ 100 , 100 , 101 , 102 , 102 , 103 , 104 , 104 ] , [ 100 , 101 , 103 , 104 , 102 ] , [ 104 , 105 , 101 , 103 , 100 ] ) )",
    "execution_output": [
      100,
      101,
      103,
      105
    ]
  },
  {
    "id": 974,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint ( relocateMarbles ( [ 1 , 2 , 3 , 4 ] , [ 2 , 3 , 2 , 1 ] , [ 5 , 2 , 3 , 2 ] ) )",
    "execution_output": [
      2,
      3,
      4,
      5
    ]
  },
  {
    "id": 975,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint ( relocateMarbles ( [ 1 , 2 , 3 , 4 , 5 , 5 , 3 ] , [ 1 , 2 , 3 ] , [ 6 , 7 , 8 ] ) )",
    "execution_output": [
      4,
      5,
      6,
      7,
      8
    ]
  },
  {
    "id": 976,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint ( relocateMarbles ( [ 10 , 20 , 30 ] , [ 10 , 20 , 30 ] , [ 20 , 30 , 10 ] ) )",
    "execution_output": [
      10
    ]
  },
  {
    "id": 977,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint ( relocateMarbles ( [ 100 , 200 , 300 , 400 ] , [ 100 , 200 , 100 , 300 ] , [ 200 , 100 , 300 , 500 ] ) )",
    "execution_output": [
      400,
      500
    ]
  },
  {
    "id": 978,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint ( relocateMarbles ( [ 5 , 7 , 9 ] , [ 5 , 7 , 5 , 7 ] , [ 7 , 5 , 7 , 5 ] ) )",
    "execution_output": [
      5,
      9
    ]
  },
  {
    "id": 979,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint ( relocateMarbles ( [ 0 , 1 , 2 , 3 ] , [ 3 , 4 , 2 ] , [ 4 , 4 , 4 ] ) )",
    "execution_output": [
      0,
      1,
      4
    ]
  },
  {
    "id": 980,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    \n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a,b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint ( relocateMarbles ( [ 1 , 1 , 2 , 3 , 3 , 5 ] , [ 1 , 2 , 5 , 3 ] , [ 4 , 5 , 2 , 1 ] ) )",
    "execution_output": [
      1,
      2,
      4
    ]
  },
  {
    "id": 981,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    \n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a,b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint ( relocateMarbles ( [ 10 , 20 , 30 , 40 ] , [ 10 , 50 , 30 , 20 ] , [ 50 , 10 , 20 , 60 ] ) )",
    "execution_output": [
      10,
      40,
      60
    ]
  },
  {
    "id": 982,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    \n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a,b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint ( relocateMarbles ( [ 0 , 2 , 4 , 6 , 8 ] , [ 0 , 2 , 4 , 6 , 8 ] , [ 1 , 3 , 3 , 7 , 7 ] ) )",
    "execution_output": [
      1,
      3,
      7
    ]
  },
  {
    "id": 983,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    \n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a,b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint ( relocateMarbles ( [ - 5 , - 3 , - 1 , 0 , 2 ] , [ - 3 , 2 , - 5 , 0 ] , [ - 2 , - 1 , 5 , - 10 ] ) )",
    "execution_output": [
      -10,
      -2,
      -1,
      5
    ]
  },
  {
    "id": 984,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    \n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a,b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint ( relocateMarbles ( [ 100 , 200 , 300 ] , [ 100 , 400 , 500 , 200 , 300 ] , [ 400 , 500 , 100 , 300 , 200 ] ) )",
    "execution_output": [
      100,
      200
    ]
  },
  {
    "id": 985,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1e9)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1e9) else dp[n]\nprint ( minimumBeautifulSubstrings ( \"111110111001101\" ) )",
    "execution_output": 3
  },
  {
    "id": 986,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1e9)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1e9) else dp[n]\nprint ( minimumBeautifulSubstrings ( \"10011100011111101\" ) )",
    "execution_output": 2
  },
  {
    "id": 987,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1e9)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1e9) else dp[n]\nprint ( minimumBeautifulSubstrings ( \"110000110101101\" ) )",
    "execution_output": 2
  },
  {
    "id": 988,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1e9)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1e9) else dp[n]\nprint ( minimumBeautifulSubstrings ( \"11001111101\" ) )",
    "execution_output": 5
  },
  {
    "id": 989,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1e9)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1e9) else dp[n]\nprint ( minimumBeautifulSubstrings ( \"11110100001001110000110101\" ) )",
    "execution_output": 2
  },
  {
    "id": 990,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint ( minimumBeautifulSubstrings ( \"10111001\" ) )",
    "execution_output": 2
  },
  {
    "id": 991,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint ( minimumBeautifulSubstrings ( \"111110111001\" ) )",
    "execution_output": 2
  },
  {
    "id": 992,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint ( minimumBeautifulSubstrings ( \"1100111001\" ) )",
    "execution_output": 2
  },
  {
    "id": 993,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint ( minimumBeautifulSubstrings ( \"1011111101\" ) )",
    "execution_output": 2
  },
  {
    "id": 994,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint ( minimumBeautifulSubstrings ( \"1101110011111101\" ) )",
    "execution_output": 4
  },
  {
    "id": 995,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx == n: return 0\n        ans = inf\n        for j in range(idx+1, n+1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint ( minimumBeautifulSubstrings ( \"101110011111101\" ) )",
    "execution_output": 3
  },
  {
    "id": 996,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx == n: return 0\n        ans = inf\n        for j in range(idx+1, n+1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint ( minimumBeautifulSubstrings ( \"1001110001101\" ) )",
    "execution_output": 2
  },
  {
    "id": 997,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx == n: return 0\n        ans = inf\n        for j in range(idx+1, n+1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint ( minimumBeautifulSubstrings ( \"111101000010011011\" ) )",
    "execution_output": 3
  },
  {
    "id": 998,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx == n: return 0\n        ans = inf\n        for j in range(idx+1, n+1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint ( minimumBeautifulSubstrings ( \"1011100111111010\" ) )",
    "execution_output": -1
  },
  {
    "id": 999,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15: break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    @cache\n    def getRes(idx):\n        if idx == n: return 0\n        ans = inf\n        for j in range(idx+1, n+1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint ( minimumBeautifulSubstrings ( \"1111101110000110101\" ) )",
    "execution_output": 2
  },
  {
    "id": 1000,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = \"aeiouAEIOU\"\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return \"\".join(ans)\nprint ( sortVowels ( \"The quick brown fox jumps over the lazy dog\" ) )",
    "execution_output": "Tha qeeck brewn fix jomps ovor tho luzy dug"
  },
  {
    "id": 1001,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = \"aeiouAEIOU\"\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return \"\".join(ans)\nprint ( sortVowels ( \"Sorting Vowels In This Sentence\" ) )",
    "execution_output": "SIrteng Vewels en This Sintonco"
  },
  {
    "id": 1002,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = \"aeiouAEIOU\"\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return \"\".join(ans)\nprint ( sortVowels ( \"PyThOn DeVeLoPeR Mode\" ) )",
    "execution_output": "PyThOn DeVeLePeR Modo"
  },
  {
    "id": 1003,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = \"aeiouAEIOU\"\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return \"\".join(ans)\nprint ( sortVowels ( \"Data-Structures & Algorithms 101\" ) )",
    "execution_output": "DAta-Stracteris & olguruthms 101"
  },
  {
    "id": 1004,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = \"aeiouAEIOU\"\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return \"\".join(ans)\nprint ( sortVowels ( \"Please preserve: positions, punctuation, and CASE!\" ) )",
    "execution_output": "PlAEsa prasarve: peseteens, pinctiitoon, ond CuSu!"
  },
  {
    "id": 1005,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = vowels[i], v2[i]\n        answer[j] = c\n    return ''.join(answer)\nprint ( sortVowels ( \"LeetCodeIsAwesome\" ) )",
    "execution_output": "LAItCedeesewesomo"
  },
  {
    "id": 1006,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = vowels[i], v2[i]\n        answer[j] = c\n    return ''.join(answer)\nprint ( sortVowels ( \"MischievousQueueing\" ) )",
    "execution_output": "MescheeviisQiouuung"
  },
  {
    "id": 1007,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = vowels[i], v2[i]\n        answer[j] = c\n    return ''.join(answer)\nprint ( sortVowels ( \"bAcEdIfOgUhYjKlMnOpQrStUvWxYz\" ) )",
    "execution_output": "bAcEdIfOgOhYjKlMnUpQrStUvWxYz"
  },
  {
    "id": 1008,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = vowels[i], v2[i]\n        answer[j] = c\n    return ''.join(answer)\nprint ( sortVowels ( \"Sorting Vowels Only? No, consonants stay!\" ) )",
    "execution_output": "SOrtang Vawels inly? No, consononts stoy!"
  },
  {
    "id": 1009,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = vowels[i], v2[i]\n        answer[j] = c\n    return ''.join(answer)\nprint ( sortVowels ( \"onomatopoeiaRHYTHM\" ) )",
    "execution_output": "anametipooooRHYTHM"
  },
  {
    "id": 1010,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    n = len(s)\n    \n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    \n    vs = sorted(v, key=lambda i: s[i])\n    \n    ss = s[:]\n    \n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    \n    return ''.join(s)\nprint ( sortVowels ( \"LeetCodeIsAwesome123!\" ) )",
    "execution_output": "LAItCedeesewesomo123!"
  },
  {
    "id": 1011,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    n = len(s)\n    \n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    \n    vs = sorted(v, key=lambda i: s[i])\n    \n    ss = s[:]\n    \n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    \n    return ''.join(s)\nprint ( sortVowels ( \"The quick brown fox jumps over 13 lazy dogs\" ) )",
    "execution_output": "Tha qeeck briwn fox jomps ovor 13 luzy dugs"
  },
  {
    "id": 1012,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    n = len(s)\n    \n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    \n    vs = sorted(v, key=lambda i: s[i])\n    \n    ss = s[:]\n    \n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    \n    return ''.join(s)\nprint ( sortVowels ( \"uUoOiIeEaA in Mixed CASE positions\" ) )",
    "execution_output": "AAEEIOUaee in Mixid CiSi posotouns"
  },
  {
    "id": 1013,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    n = len(s)\n    \n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    \n    vs = sorted(v, key=lambda i: s[i])\n    \n    ss = s[:]\n    \n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    \n    return ''.join(s)\nprint ( sortVowels ( \"Programming Paradigms: functional vs object-oriented\" ) )",
    "execution_output": "Pragrammang Paredegms: fenctiinil vs ibjoct-oroontud"
  },
  {
    "id": 1014,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    n = len(s)\n    \n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    \n    vs = sorted(v, key=lambda i: s[i])\n    \n    ss = s[:]\n    \n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    \n    return ''.join(s)\nprint ( sortVowels ( \"Beautiful QUEUEING cooperation with Punctuation...\" ) )",
    "execution_output": "BEEItUfUl QaaaeeNG ciipiritoon woth Ponctuutuun..."
  },
  {
    "id": 1015,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    a = []\n    n = len(s)\n    \n    for i in range(n):\n        \n        if s[i] in \"aeiouAEIOU\":\n            a.append(s[i])\n    \n    a.sort(reverse=True)\n    \n    for i in range(n):\n        if s[i] in \"aeiouAEIOU\":\n            s[i] = a.pop()\n    \n    return \"\".join(s)\nprint ( sortVowels ( \"LeetCode is AwesoMe!\" ) )",
    "execution_output": "LAetCede es ewisoMo!"
  },
  {
    "id": 1016,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    a = []\n    n = len(s)\n    \n    for i in range(n):\n        \n        if s[i] in \"aeiouAEIOU\":\n            a.append(s[i])\n    \n    a.sort(reverse=True)\n    \n    for i in range(n):\n        if s[i] in \"aeiouAEIOU\":\n            s[i] = a.pop()\n    \n    return \"\".join(s)\nprint ( sortVowels ( \"a1e2i3o4u5A6E7I8O9U0\" ) )",
    "execution_output": "A1E2I3O4U5a6e7i8o9u0"
  },
  {
    "id": 1017,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    a = []\n    n = len(s)\n    \n    for i in range(n):\n        \n        if s[i] in \"aeiouAEIOU\":\n            a.append(s[i])\n    \n    a.sort(reverse=True)\n    \n    for i in range(n):\n        if s[i] in \"aeiouAEIOU\":\n            s[i] = a.pop()\n    \n    return \"\".join(s)\nprint ( sortVowels ( \"Crème brûlée tastes so gooood!!!\" ) )",
    "execution_output": "Crèma brûlée testes so gooood!!!"
  },
  {
    "id": 1018,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    a = []\n    n = len(s)\n    \n    for i in range(n):\n        \n        if s[i] in \"aeiouAEIOU\":\n            a.append(s[i])\n    \n    a.sort(reverse=True)\n    \n    for i in range(n):\n        if s[i] in \"aeiouAEIOU\":\n            s[i] = a.pop()\n    \n    return \"\".join(s)\nprint ( sortVowels ( \"Madam, I'm Adam\" ) )",
    "execution_output": "MAdIm, a'm adam"
  },
  {
    "id": 1019,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    \n    s = list(s)\n    \n    a = []\n    n = len(s)\n    \n    for i in range(n):\n        \n        if s[i] in \"aeiouAEIOU\":\n            a.append(s[i])\n    \n    a.sort(reverse=True)\n    \n    for i in range(n):\n        if s[i] in \"aeiouAEIOU\":\n            s[i] = a.pop()\n    \n    return \"\".join(s)\nprint ( sortVowels ( \"Queueing theory and bioooinformatics\" ) )",
    "execution_output": "Qaaeeeng thiiry ind bioooonformutucs"
  },
  {
    "id": 1020,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in \"aeiou\" or s[i] in \"AEIOU\":\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return \"\".join(res)\nprint ( sortVowels ( \"Dev3lopers write Clean-Code!\" ) )",
    "execution_output": "Dav3lepers wrete Clein-Codo!"
  },
  {
    "id": 1021,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in \"aeiou\" or s[i] in \"AEIOU\":\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return \"\".join(res)\nprint ( sortVowels ( \"The quick brown fox jumps over the lazy dog\" ) )",
    "execution_output": "Tha qeeck brewn fix jomps ovor tho luzy dug"
  },
  {
    "id": 1022,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in \"aeiou\" or s[i] in \"AEIOU\":\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return \"\".join(res)\nprint ( sortVowels ( \"bAcdEfgIhjOkUlmn\" ) )",
    "execution_output": "bAcdEfgIhjOkUlmn"
  },
  {
    "id": 1023,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in \"aeiou\" or s[i] in \"AEIOU\":\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return \"\".join(res)\nprint ( sortVowels ( \"mississippi river valley\" ) )",
    "execution_output": "massesseppi rivir villiy"
  },
  {
    "id": 1024,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in \"aeiou\" or s[i] in \"AEIOU\":\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return \"\".join(res)\nprint ( sortVowels ( \"Data_Structures_and_Algorithms_101\" ) )",
    "execution_output": "DAta_Stractares_ind_olguruthms_101"
  },
  {
    "id": 1025,
    "q_id": "sample_372",
    "code": "def vowel(ch): return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint ( sortVowels ( \"ThIs, is A tEst! 123\" ) )",
    "execution_output": "ThAs, Es I tist! 123"
  },
  {
    "id": 1026,
    "q_id": "sample_372",
    "code": "def vowel(ch): return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint ( sortVowels ( \"Algorithms and Data Structures\" ) )",
    "execution_output": "Algarathms and Deti Strocturus"
  },
  {
    "id": 1027,
    "q_id": "sample_372",
    "code": "def vowel(ch): return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint ( sortVowels ( \"Queueing theory is beautiful\" ) )",
    "execution_output": "Qaeeeeng thiiry is bouutuful"
  },
  {
    "id": 1028,
    "q_id": "sample_372",
    "code": "def vowel(ch): return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint ( sortVowels ( \"Sphinx of black quartz, judge my vow\" ) )",
    "execution_output": "Sphanx af bleck qiortz, jodgu my vuw"
  },
  {
    "id": 1029,
    "q_id": "sample_372",
    "code": "def vowel(ch): return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint ( sortVowels ( \"C0d3-wr!t1ng in PYTHON is fUn\" ) )",
    "execution_output": "C0d3-wr!t1ng On PYTHUN is fin"
  },
  {
    "id": 1030,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint ( minimumSeconds ( [ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1031,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint ( minimumSeconds ( [ 3 , 4 , 5 , 3 , 6 , 7 , 3 , 8 , 9 , 3 , 10 , 11 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1032,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint ( minimumSeconds ( [ 9 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) )",
    "execution_output": 4
  },
  {
    "id": 1033,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint ( minimumSeconds ( [ 1 , 1 , 2 , 2 , 3 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1034,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint ( minimumSeconds ( [ 4 , 5 , 6 , 4 , 7 , 4 , 8 , 4 , 9 , 10 , 4 , 11 , 12 , 4 , 13 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1035,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2== 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint ( minimumSeconds ( [ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1036,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2== 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint ( minimumSeconds ( [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1037,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2== 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint ( minimumSeconds ( [ 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 9 , 0 , 11 , 12 ] ) )",
    "execution_output": 4
  },
  {
    "id": 1038,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2== 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint ( minimumSeconds ( [ 5 , 5 , 5 , 5 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 5 , 9 , 10 , 11 , 12 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1039,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2== 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint ( minimumSeconds ( [ - 10 , 1000 , - 10 , 5 , - 10 , 6 , 7 , - 10 , 8 , 9 , - 10 , 10 , 11 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1040,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n-idxs[-1] + idxs[0]\n        for i in range(len(idxs)-1):\n            gap = max(gap, idxs[i+1]-idxs[i])\n        min_steps = min(min_steps, gap//2)\n    return min_steps\nprint ( minimumSeconds ( [ 1 , 2 , 3 , 4 , 1 , 5 , 6 , 1 , 7 , 8 , 1 , 9 , 10 , 1 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1041,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n-idxs[-1] + idxs[0]\n        for i in range(len(idxs)-1):\n            gap = max(gap, idxs[i+1]-idxs[i])\n        min_steps = min(min_steps, gap//2)\n    return min_steps\nprint ( minimumSeconds ( [ 100 , 200 , 100 , 200 , 100 , 200 , 300 , 100 , 200 , 100 , 200 , 100 , 200 , 300 , 100 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1042,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n-idxs[-1] + idxs[0]\n        for i in range(len(idxs)-1):\n            gap = max(gap, idxs[i+1]-idxs[i])\n        min_steps = min(min_steps, gap//2)\n    return min_steps\nprint ( minimumSeconds ( [ - 5 , - 5 , 234772 , - 5 , 12 , - 5 , 234772 , - 5 , 12 , - 5 , - 5 , 12 , 234772 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1043,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n-idxs[-1] + idxs[0]\n        for i in range(len(idxs)-1):\n            gap = max(gap, idxs[i+1]-idxs[i])\n        min_steps = min(min_steps, gap//2)\n    return min_steps\nprint ( minimumSeconds ( [ 0 , 1 , 0 , 2 , 0 , 3 , 0 , 4 , 0 , 5 , 0 , 6 , 0 , 7 , 0 , 8 , 0 , 9 , 0 , 10 , 0 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1044,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n-idxs[-1] + idxs[0]\n        for i in range(len(idxs)-1):\n            gap = max(gap, idxs[i+1]-idxs[i])\n        min_steps = min(min_steps, gap//2)\n    return min_steps\nprint ( minimumSeconds ( [ 5 , 9 , 5 , 8 , 7 , 8 , 7 , 6 , 6 , 9 , 5 , 9 , 6 , 7 , 8 , 5 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1045,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d=defaultdict(list)\n    for i,el in enumerate(nums):\n        d[el].append(i)\n    ans=float(\"inf\")\n    def check(el):\n        t=d[el][:]\n        g=[t[0]+len(nums)-1-t[-1]]\n        for a,b in zip(t,t[1:]):\n            g.append(b-a-1)\n        # print(g,el)\n        p=max(g)\n        return (p+1)//2\n    for el in d:\n        ans=min(ans,check(el))\n    return ans\nprint ( minimumSeconds ( [ 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1046,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d=defaultdict(list)\n    for i,el in enumerate(nums):\n        d[el].append(i)\n    ans=float(\"inf\")\n    def check(el):\n        t=d[el][:]\n        g=[t[0]+len(nums)-1-t[-1]]\n        for a,b in zip(t,t[1:]):\n            g.append(b-a-1)\n        # print(g,el)\n        p=max(g)\n        return (p+1)//2\n    for el in d:\n        ans=min(ans,check(el))\n    return ans\nprint ( minimumSeconds ( [ 4 , 9 , 4 , 7 , 7 , 4 , 7 , 4 , 7 , 9 , 4 , 7 , 4 , 7 , 4 , 9 , 7 , 4 , 7 , 4 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1047,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d=defaultdict(list)\n    for i,el in enumerate(nums):\n        d[el].append(i)\n    ans=float(\"inf\")\n    def check(el):\n        t=d[el][:]\n        g=[t[0]+len(nums)-1-t[-1]]\n        for a,b in zip(t,t[1:]):\n            g.append(b-a-1)\n        # print(g,el)\n        p=max(g)\n        return (p+1)//2\n    for el in d:\n        ans=min(ans,check(el))\n    return ans\nprint ( minimumSeconds ( [ 7 , 3 , 3 , 2 , 2 , 5 , 5 , 3 , 2 , 5 , 3 , 2 , 5 , 3 , 2 , 5 , 3 , 2 , 5 , 7 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1048,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d=defaultdict(list)\n    for i,el in enumerate(nums):\n        d[el].append(i)\n    ans=float(\"inf\")\n    def check(el):\n        t=d[el][:]\n        g=[t[0]+len(nums)-1-t[-1]]\n        for a,b in zip(t,t[1:]):\n            g.append(b-a-1)\n        # print(g,el)\n        p=max(g)\n        return (p+1)//2\n    for el in d:\n        ans=min(ans,check(el))\n    return ans\nprint ( minimumSeconds ( [ 1 , 1 , 2 , 3 , 3 , 2 , 1 , 1 , 2 , 3 , 3 , 2 , 1 , 1 , 2 , 3 , 3 , 2 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1049,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d=defaultdict(list)\n    for i,el in enumerate(nums):\n        d[el].append(i)\n    ans=float(\"inf\")\n    def check(el):\n        t=d[el][:]\n        g=[t[0]+len(nums)-1-t[-1]]\n        for a,b in zip(t,t[1:]):\n            g.append(b-a-1)\n        # print(g,el)\n        p=max(g)\n        return (p+1)//2\n    for el in d:\n        ans=min(ans,check(el))\n    return ans\nprint ( minimumSeconds ( [ - 1 , 0 , - 1 , 2 , - 1 , 0 , 0 , 2 , 2 , - 1 , 2 , 0 , - 1 , 2 , 0 , 0 , 2 , - 1 , 0 , 2 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1050,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i+1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint ( minimumSeconds ( [ 1 , 2 , 3 , 1 , 4 , 5 , 2 , 6 , 7 , 3 , 8 , 1 , 9 , 2 , 10 , 3 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1051,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i+1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint ( minimumSeconds ( [ 0 , 5 , 6 , 7 , 8 , 1 , 2 , 3 , 0 , 4 , 5 , 6 , 7 , 1 , 2 ] ) )",
    "execution_output": 4
  },
  {
    "id": 1052,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i+1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint ( minimumSeconds ( [ 1 , 1 , 2 , 3 , 2 , 3 , 4 , 4 , 5 , 5 , 6 , 6 , 7 , 7 , 8 , 8 ] ) )",
    "execution_output": 7
  },
  {
    "id": 1053,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i+1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint ( minimumSeconds ( [ 9 , 1 , 2 , 3 , 9 , 4 , 5 , 6 , 9 , 7 , 8 , 1 , 9 , 2 , 3 , 4 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1054,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i,x in enumerate(A):\n        locs[x].append(i)\n    \n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i+1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint ( minimumSeconds ( [ - 1 , 2 , - 1 , 3 , 4 , 2 , 5 , - 1 , 2 , 6 , 7 , - 2 , 2 , 9 , - 2 , 2 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1055,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = defaultdict(list), (len(nums))//2\n    for i, n in enumerate(nums): idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0]+(len(nums)-idx[-1]))//2\n            for i in range(len(idx)-1): cur = max(cur, (idx[i+1]-idx[i])//2)\n            res = min(res, cur)\n    return res\nprint ( minimumSeconds ( [ 1 , 2 , 1 , 3 , 2 , 1 , 3 , 2 , 1 , 3 , 2 , 1 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1056,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = defaultdict(list), (len(nums))//2\n    for i, n in enumerate(nums): idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0]+(len(nums)-idx[-1]))//2\n            for i in range(len(idx)-1): cur = max(cur, (idx[i+1]-idx[i])//2)\n            res = min(res, cur)\n    return res\nprint ( minimumSeconds ( [ 5 , 5 , 5 , 1 , 2 , 5 , 3 , 4 , 5 , 2 , 1 , 5 , 4 , 3 , 5 , 5 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1057,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = defaultdict(list), (len(nums))//2\n    for i, n in enumerate(nums): idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0]+(len(nums)-idx[-1]))//2\n            for i in range(len(idx)-1): cur = max(cur, (idx[i+1]-idx[i])//2)\n            res = min(res, cur)\n    return res\nprint ( minimumSeconds ( [ 7 , 8 , 9 , 7 , 10 , 11 , 7 , 12 , 13 , 7 , 14 , 15 , 16 , 7 , 17 , 18 , 7 , 19 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1058,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = defaultdict(list), (len(nums))//2\n    for i, n in enumerate(nums): idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0]+(len(nums)-idx[-1]))//2\n            for i in range(len(idx)-1): cur = max(cur, (idx[i+1]-idx[i])//2)\n            res = min(res, cur)\n    return res\nprint ( minimumSeconds ( [ - 1 , - 1 , 0 , 1 , - 1 , 2 , 3 , - 1 , 4 , 5 , - 1 , 6 , 7 , - 1 , 8 , 9 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1059,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = defaultdict(list), (len(nums))//2\n    for i, n in enumerate(nums): idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0]+(len(nums)-idx[-1]))//2\n            for i in range(len(idx)-1): cur = max(cur, (idx[i+1]-idx[i])//2)\n            res = min(res, cur)\n    return res\nprint ( minimumSeconds ( [ 100 , 200 , 100 , 300 , 400 , 500 , 300 , 100 , 200 , 300 , 400 , 100 , 500 , 400 , 300 , 200 , 100 , 500 , 400 , 300 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1060,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = len(str1), len(str2)\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint ( canMakeSubsequence ( \"hzoabzcydzefg\" , \"abcdefg\" ) )",
    "execution_output": true
  },
  {
    "id": 1061,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = len(str1), len(str2)\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint ( canMakeSubsequence ( \"abcdefghijklmn\" , \"bcdefghijklmno\" ) )",
    "execution_output": true
  },
  {
    "id": 1062,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = len(str1), len(str2)\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint ( canMakeSubsequence ( \"zabzcdzefz\" , \"abcdefa\" ) )",
    "execution_output": true
  },
  {
    "id": 1063,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = len(str1), len(str2)\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint ( canMakeSubsequence ( \"aaabbbcccddd\" , \"abcdabcd\" ) )",
    "execution_output": false
  },
  {
    "id": 1064,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = len(str1), len(str2)\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint ( canMakeSubsequence ( \"xyzxyz\" , \"ayb\" ) )",
    "execution_output": false
  },
  {
    "id": 1065,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n    def nxt(c):\n        if c == 'z':\n            return 'a' \n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint ( canMakeSubsequence ( \"abcde\" , \"bdf\" ) )",
    "execution_output": true
  },
  {
    "id": 1066,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n    def nxt(c):\n        if c == 'z':\n            return 'a' \n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint ( canMakeSubsequence ( \"zzzabc\" , \"aaad\" ) )",
    "execution_output": true
  },
  {
    "id": 1067,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n    def nxt(c):\n        if c == 'z':\n            return 'a' \n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint ( canMakeSubsequence ( \"bbbbc\" , \"cc\" ) )",
    "execution_output": true
  },
  {
    "id": 1068,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n    def nxt(c):\n        if c == 'z':\n            return 'a' \n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint ( canMakeSubsequence ( \"azbycxdwevf\" , \"abcdef\" ) )",
    "execution_output": true
  },
  {
    "id": 1069,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n    def nxt(c):\n        if c == 'z':\n            return 'a' \n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint ( canMakeSubsequence ( \"acegikmoqsuwy\" , \"bdfhjlnptvxz\" ) )",
    "execution_output": true
  },
  {
    "id": 1070,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    \n    def cal(i):\n        if i=='z':\n            return 'a'\n        return chr(ord(i)+1)\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    i = 0\n    j = 0\n    \n    while i<n1 and j<n2:\n        if str1[i]==str2[j] or cal(str1[i])==str2[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    \n    return j>=n2\nprint ( canMakeSubsequence ( \"xyzab\" , \"yza\" ) )",
    "execution_output": true
  },
  {
    "id": 1071,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    \n    def cal(i):\n        if i=='z':\n            return 'a'\n        return chr(ord(i)+1)\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    i = 0\n    j = 0\n    \n    while i<n1 and j<n2:\n        if str1[i]==str2[j] or cal(str1[i])==str2[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    \n    return j>=n2\nprint ( canMakeSubsequence ( \"abczd\" , \"bcd\" ) )",
    "execution_output": true
  },
  {
    "id": 1072,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    \n    def cal(i):\n        if i=='z':\n            return 'a'\n        return chr(ord(i)+1)\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    i = 0\n    j = 0\n    \n    while i<n1 and j<n2:\n        if str1[i]==str2[j] or cal(str1[i])==str2[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    \n    return j>=n2\nprint ( canMakeSubsequence ( \"aaaaa\" , \"ccc\" ) )",
    "execution_output": false
  },
  {
    "id": 1073,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    \n    def cal(i):\n        if i=='z':\n            return 'a'\n        return chr(ord(i)+1)\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    i = 0\n    j = 0\n    \n    while i<n1 and j<n2:\n        if str1[i]==str2[j] or cal(str1[i])==str2[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    \n    return j>=n2\nprint ( canMakeSubsequence ( \"abcdefghijklmnopqrstuvwxyz\" , \"bcdefghijklmnopqrstuvwxyza\" ) )",
    "execution_output": true
  },
  {
    "id": 1074,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    \n    def cal(i):\n        if i=='z':\n            return 'a'\n        return chr(ord(i)+1)\n    \n    n1 = len(str1)\n    n2 = len(str2)\n    \n    i = 0\n    j = 0\n    \n    while i<n1 and j<n2:\n        if str1[i]==str2[j] or cal(str1[i])==str2[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    \n    return j>=n2\nprint ( canMakeSubsequence ( \"aabbccddeeff\" , \"abcdef\" ) )",
    "execution_output": true
  },
  {
    "id": 1075,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint ( canMakeSubsequence ( \"axbyczdef\" , \"bcdf\" ) )",
    "execution_output": true
  },
  {
    "id": 1076,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint ( canMakeSubsequence ( \"zzbzzczzd\" , \"abcd\" ) )",
    "execution_output": true
  },
  {
    "id": 1077,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint ( canMakeSubsequence ( \"yzaabbccx\" , \"zbcx\" ) )",
    "execution_output": true
  },
  {
    "id": 1078,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint ( canMakeSubsequence ( \"abzzzyyxcc\" , \"aczd\" ) )",
    "execution_output": true
  },
  {
    "id": 1079,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint ( canMakeSubsequence ( \"zzxyyx\" , \"abz\" ) )",
    "execution_output": false
  },
  {
    "id": 1080,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1=list(s1)\n    s2=list(s2)\n    while s1 and s2:\n        c1=s1[-1]\n        c2=s2[-1]\n        if c1==c2 or (c1==\"z\" and c2==\"a\") or chr(ord(c1)+1)==c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2)==0\nprint ( canMakeSubsequence ( \"bzcay\" , \"cad\" ) )",
    "execution_output": true
  },
  {
    "id": 1081,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1=list(s1)\n    s2=list(s2)\n    while s1 and s2:\n        c1=s1[-1]\n        c2=s2[-1]\n        if c1==c2 or (c1==\"z\" and c2==\"a\") or chr(ord(c1)+1)==c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2)==0\nprint ( canMakeSubsequence ( \"azbzczdzez\" , \"abcde\" ) )",
    "execution_output": true
  },
  {
    "id": 1082,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1=list(s1)\n    s2=list(s2)\n    while s1 and s2:\n        c1=s1[-1]\n        c2=s2[-1]\n        if c1==c2 or (c1==\"z\" and c2==\"a\") or chr(ord(c1)+1)==c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2)==0\nprint ( canMakeSubsequence ( \"acegikmoqsuwy\" , \"bdfhjlnprtvxz\" ) )",
    "execution_output": true
  },
  {
    "id": 1083,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1=list(s1)\n    s2=list(s2)\n    while s1 and s2:\n        c1=s1[-1]\n        c2=s2[-1]\n        if c1==c2 or (c1==\"z\" and c2==\"a\") or chr(ord(c1)+1)==c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2)==0\nprint ( canMakeSubsequence ( \"qwertyuiopasdfghjklzxcvbnm\" , \"rtylzvbn\" ) )",
    "execution_output": true
  },
  {
    "id": 1084,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1=list(s1)\n    s2=list(s2)\n    while s1 and s2:\n        c1=s1[-1]\n        c2=s2[-1]\n        if c1==c2 or (c1==\"z\" and c2==\"a\") or chr(ord(c1)+1)==c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2)==0\nprint ( canMakeSubsequence ( \"abczabcz\" , \"bcad\" ) )",
    "execution_output": true
  },
  {
    "id": 1085,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n            \n    return max_sum\nprint ( maxSum ( [ 4 , 4 , 4 , 10 , - 5 , 2 , 2 , 8 , 1 ] , 3 , 4 ) )",
    "execution_output": 13
  },
  {
    "id": 1086,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n            \n    return max_sum\nprint ( maxSum ( [ 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 5 , 5 ] , 2 , 5 ) )",
    "execution_output": 28
  },
  {
    "id": 1087,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n            \n    return max_sum\nprint ( maxSum ( [ 1 , 2 , 1 , 2 , 3 , 4 ] , 3 , 3 ) )",
    "execution_output": 9
  },
  {
    "id": 1088,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n            \n    return max_sum\nprint ( maxSum ( [ 7 , - 1 , 7 , 7 , 3 , 2 , - 2 , 5 ] , 4 , 5 ) )",
    "execution_output": 18
  },
  {
    "id": 1089,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    \n    for i in range(n - k + 1):\n        subarray = nums[i:i+k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n            \n    return max_sum\nprint ( maxSum ( [ 9 , 9 , 9 , 9 , 9 , 9 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] , 2 , 6 ) )",
    "execution_output": 46
  },
  {
    "id": 1090,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i-k]] -= 1\n        if not c[nums[i-k]]:\n            del c[nums[i-k]]\n        ssum += nums[i] - nums[i-k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint ( maxSum ( [ 4 , 1 , 2 , 2 , 3 , 1 , 5 , 2 , 2 , 3 , 4 , 1 , 6 , 2 , 3 ] , 3 , 5 ) )",
    "execution_output": 16
  },
  {
    "id": 1091,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i-k]] -= 1\n        if not c[nums[i-k]]:\n            del c[nums[i-k]]\n        ssum += nums[i] - nums[i-k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint ( maxSum ( [ 1 , 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 6 , 6 , 7 , 7 ] , 4 , 6 ) )",
    "execution_output": 33
  },
  {
    "id": 1092,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i-k]] -= 1\n        if not c[nums[i-k]]:\n            del c[nums[i-k]]\n        ssum += nums[i] - nums[i-k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint ( maxSum ( [ 5 , - 1 , 5 , - 1 , 5 , - 1 , 4 , 3 , 2 , 1 , 0 , 2 , - 2 , 3 , 4 ] , 3 , 7 ) )",
    "execution_output": 17
  },
  {
    "id": 1093,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i-k]] -= 1\n        if not c[nums[i-k]]:\n            del c[nums[i-k]]\n        ssum += nums[i] - nums[i-k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint ( maxSum ( [ 9 , 9 , 9 , 8 , 8 , 7 , 7 , 7 , 6 , 6 , 5 , 5 , 5 , 4 , 4 , 3 , 3 , 2 , 2 , 1 ] , 5 , 8 ) )",
    "execution_output": 24
  },
  {
    "id": 1094,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i-k]] -= 1\n        if not c[nums[i-k]]:\n            del c[nums[i-k]]\n        ssum += nums[i] - nums[i-k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint ( maxSum ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] , 4 , 4 ) )",
    "execution_output": 42
  },
  {
    "id": 1095,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r,x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1: c += 1\n        s += x\n        if r >= k:\n            y = nums[r-k]\n            cnt[y] -= 1\n            if cnt[y] == 0: c -= 1\n            s -= y\n        if c >= m: ans = max(ans,s)\n    return ans\nprint ( maxSum ( [ 1 , 5 , 1 , 5 , 10 , 2 , 3 , 10 , 2 , 3 , 4 , 6 ] , 3 , 4 ) )",
    "execution_output": 25
  },
  {
    "id": 1096,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r,x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1: c += 1\n        s += x\n        if r >= k:\n            y = nums[r-k]\n            cnt[y] -= 1\n            if cnt[y] == 0: c -= 1\n            s -= y\n        if c >= m: ans = max(ans,s)\n    return ans\nprint ( maxSum ( [ 4 , - 1 , 2 , - 1 , 2 , 3 , - 2 , 5 , 3 , - 3 , 4 ] , 2 , 5 ) )",
    "execution_output": 11
  },
  {
    "id": 1097,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r,x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1: c += 1\n        s += x\n        if r >= k:\n            y = nums[r-k]\n            cnt[y] -= 1\n            if cnt[y] == 0: c -= 1\n            s -= y\n        if c >= m: ans = max(ans,s)\n    return ans\nprint ( maxSum ( [ 7 , 7 , 7 , 1 , 2 , 7 , 3 , 7 , 4 , 7 , 5 , 7 ] , 4 , 5 ) )",
    "execution_output": 26
  },
  {
    "id": 1098,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r,x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1: c += 1\n        s += x\n        if r >= k:\n            y = nums[r-k]\n            cnt[y] -= 1\n            if cnt[y] == 0: c -= 1\n            s -= y\n        if c >= m: ans = max(ans,s)\n    return ans\nprint ( maxSum ( [ 1 , 2 , 1 , 2 , 1 , 2 , 3 , 2 , 3 , 2 , 3 , 4 , 5 , 4 ] , 2 , 3 ) )",
    "execution_output": 13
  },
  {
    "id": 1099,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r,x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1: c += 1\n        s += x\n        if r >= k:\n            y = nums[r-k]\n            cnt[y] -= 1\n            if cnt[y] == 0: c -= 1\n            s -= y\n        if c >= m: ans = max(ans,s)\n    return ans\nprint ( maxSum ( [ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 9 , 9 , 9 , 9 , 9 , 12 , 13 , 14 ] , 5 , 6 ) )",
    "execution_output": 45
  },
  {
    "id": 1100,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint ( maxSum ( [ 3 , - 1 , 4 , - 1 , 5 , 9 , - 2 , 6 , 5 , - 3 , 5 , - 8 , 9 , 7 , 9 , 3 , - 2 , 3 , - 8 , 4 ] , 3 , 5 ) )",
    "execution_output": 26
  },
  {
    "id": 1101,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint ( maxSum ( [ 7 , 7 , 7 , 1 , 7 , 7 , 2 , 7 , 7 , 7 , 1 , 7 , 7 , 7 , 2 , 7 , 7 , 7 , 7 , 1 ] , 2 , 10 ) )",
    "execution_output": 59
  },
  {
    "id": 1102,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint ( maxSum ( [ 100 , - 50 ] * 12 , 2 , 12 ) )",
    "execution_output": 300
  },
  {
    "id": 1103,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint ( maxSum ( [ 1 , 2 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 1 , 2 , 3 , 4 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] , 6 , 7 ) )",
    "execution_output": 63
  },
  {
    "id": 1104,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint ( maxSum ( [ 0 , 5 , 0 , 5 , 0 , 5 , 10 , - 10 , 20 , - 20 , 25 , - 25 , 30 , - 30 , 35 , - 35 , 40 , - 40 , 45 , - 45 ] , 4 , 6 ) )",
    "execution_output": 30
  },
  {
    "id": 1105,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint ( maxSum ( [ 4 , 1 , 2 , 2 , 1 , 2 , 3 , 3 , 4 , 5 , 1 , 2 ] , 3 , 5 ) )",
    "execution_output": 17
  },
  {
    "id": 1106,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint ( maxSum ( [ - 1 , 2 , - 3 , 2 , - 1 , 4 , 5 , - 2 , 3 , - 4 ] , 2 , 4 ) )",
    "execution_output": 10
  },
  {
    "id": 1107,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint ( maxSum ( [ 5 , 5 , 5 , 1 , 2 , 3 , 4 , 5 , 6 ] , 2 , 3 ) )",
    "execution_output": 15
  },
  {
    "id": 1108,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint ( maxSum ( [ 1 , 2 , 3 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] , 4 , 10 ) )",
    "execution_output": 48
  },
  {
    "id": 1109,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint ( maxSum ( [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 2 , 2 , 2 , 1 , 1 , 1 ] , 2 , 3 ) )",
    "execution_output": 8
  },
  {
    "id": 1110,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    \n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n                   \n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    \n    return maxres\nprint ( maxSum ( [ 5 , 5 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 5 , 1 , 2 , 3 , 4 ] , 3 , 5 ) )",
    "execution_output": 18
  },
  {
    "id": 1111,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    \n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n                   \n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    \n    return maxres\nprint ( maxSum ( [ 10 , - 5 , 10 , - 5 , 7 , - 8 , 7 , 7 , - 3 , 6 , - 2 , 4 ] , 2 , 4 ) )",
    "execution_output": 17
  },
  {
    "id": 1112,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    \n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n                   \n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    \n    return maxres\nprint ( maxSum ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] , 6 , 6 ) )",
    "execution_output": 45
  },
  {
    "id": 1113,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    \n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n                   \n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    \n    return maxres\nprint ( maxSum ( [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 ] , 3 , 3 ) )",
    "execution_output": 6
  },
  {
    "id": 1114,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    \n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n                   \n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    \n    return maxres\nprint ( maxSum ( [ 100000 , - 200000 , 300000 , 100000 , 300000 , - 100000 , 200000 , 400000 ] , 3 , 4 ) )",
    "execution_output": 800000
  },
  {
    "id": 1115,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k,v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 1 , 1 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1116,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k,v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint ( minLengthAfterRemovals ( [ 0 , 0 , 0 , 0 , 0 , 1 , 2 , 3 , 4 , 5 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1117,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k,v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint ( minLengthAfterRemovals ( [ 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 1 , 2 , 3 , 4 ] ) )",
    "execution_output": 4
  },
  {
    "id": 1118,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k,v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint ( minLengthAfterRemovals ( [ 2 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 5 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1119,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k,v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint ( minLengthAfterRemovals ( [ 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 7 , 8 , 9 , 10 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1120,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    \n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 5 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1121,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    \n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint ( minLengthAfterRemovals ( [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1122,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    \n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint ( minLengthAfterRemovals ( [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , 2 , 2 , 2 , 3 , 4 , 5 , 6 ] ) )",
    "execution_output": 6
  },
  {
    "id": 1123,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    \n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint ( minLengthAfterRemovals ( [ 10 , 10 , 20 , 20 , 30 , 30 , 40 , 40 , 50 , 50 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1124,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    \n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1125,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1 \n        y -= 1 \n        if x:heappush(h,-x)\n        if y:heappush(h,-y)\n    return -sum(h)\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 6 , 6 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1126,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1 \n        y -= 1 \n        if x:heappush(h,-x)\n        if y:heappush(h,-y)\n    return -sum(h)\nprint ( minLengthAfterRemovals ( [ 7 ] * 10 + [ 8 ] * 4 + [ 9 ] * 4 ) )",
    "execution_output": 2
  },
  {
    "id": 1127,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1 \n        y -= 1 \n        if x:heappush(h,-x)\n        if y:heappush(h,-y)\n    return -sum(h)\nprint ( minLengthAfterRemovals ( [ 1 ] * 4 + [ 2 ] * 4 + [ 3 ] * 3 + [ 4 ] * 3 + [ 5 ] * 2 + [ 6 ] * 2 + [ 7 ] * 1 + [ 8 ] * 1 ) )",
    "execution_output": 0
  },
  {
    "id": 1128,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1 \n        y -= 1 \n        if x:heappush(h,-x)\n        if y:heappush(h,-y)\n    return -sum(h)\nprint ( minLengthAfterRemovals ( [ 100 ] * 5 + [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1129,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1 \n        y -= 1 \n        if x:heappush(h,-x)\n        if y:heappush(h,-y)\n    return -sum(h)\nprint ( minLengthAfterRemovals ( [ 5 ] * 7 + [ 6 ] * 3 + [ 7 ] * 2 + [ 8 ] * 1 ) )",
    "execution_output": 1
  },
  {
    "id": 1130,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = n // 2 - 1, n - 1\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1131,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = n // 2 - 1, n - 1\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1132,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = n // 2 - 1, n - 1\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint ( minLengthAfterRemovals ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1133,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = n // 2 - 1, n - 1\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 4 , 4 , 4 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1134,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = n // 2 - 1, n - 1\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint ( minLengthAfterRemovals ( [ - 3 , - 2 , - 2 , - 1 , 0 , 0 , 1 , 1 , 2 , 3 , 3 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1135,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 6 , 6 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1136,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 2 , 2 , 3 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1137,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint ( minLengthAfterRemovals ( [ 7 , 7 , 7 , 7 , 7 , 1 , 2 , 3 , 4 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1138,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint ( minLengthAfterRemovals ( [ 234772 , 234772 , 234772 , 234772 , 234772 , 3254323 , 3254323 , 3254323 , 3254323 , 3254323 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1139,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint ( minLengthAfterRemovals ( [ 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 1 , 2 , 3 , 4 ] ) )",
    "execution_output": 4
  },
  {
    "id": 1140,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint ( minLengthAfterRemovals ( [ 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 8 , 9 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1141,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint ( minLengthAfterRemovals ( [ 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1142,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint ( minLengthAfterRemovals ( [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1143,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint ( minLengthAfterRemovals ( [ 3254323 , 3254323 , 3254323 , 3254323 , 3254323 , 3254323 , 3254323 , 3254323 , 3254323 , - 1 , - 2 , - 3 , - 4 , - 5 , - 6 , - 7 , - 8 , - 9 ] ) )",
    "execution_output": 0
  },
  {
    "id": 1144,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint ( minLengthAfterRemovals ( [ 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 0 , 1 , 2 , 3 , 4 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1145,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[(x, y)] += 1\n    \n    res = 0\n    for i in range(k + 1):\n        a, b = i, k - i\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[(x, y)] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[(a ^ x, b ^ y)]\n    \n    return res\nprint ( countPairs ( [ [ 1 , 2 ] , [ 1 , 2 ] , [ 2 , 1 ] , [ 3 , 0 ] , [ 0 , 3 ] , [ 5 , 6 ] , [ 6 , 5 ] , [ 7 , 4 ] , [ 4 , 7 ] ] , 7 ) )",
    "execution_output": 0
  },
  {
    "id": 1146,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[(x, y)] += 1\n    \n    res = 0\n    for i in range(k + 1):\n        a, b = i, k - i\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[(x, y)] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[(a ^ x, b ^ y)]\n    \n    return res\nprint ( countPairs ( [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 3 , 3 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 3 , 0 ] , [ 0 , 3 ] ] , 3 ) )",
    "execution_output": 16
  },
  {
    "id": 1147,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[(x, y)] += 1\n    \n    res = 0\n    for i in range(k + 1):\n        a, b = i, k - i\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[(x, y)] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[(a ^ x, b ^ y)]\n    \n    return res\nprint ( countPairs ( [ [ 0 , 10 ] , [ 1 , 11 ] , [ 2 , 8 ] , [ 3 , 9 ] , [ 4 , 14 ] , [ 5 , 15 ] , [ 6 , 12 ] , [ 7 , 13 ] , [ 8 , 2 ] , [ 9 , 3 ] , [ 10 , 0 ] , [ 11 , 1 ] ] , 4 ) )",
    "execution_output": 6
  },
  {
    "id": 1148,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[(x, y)] += 1\n    \n    res = 0\n    for i in range(k + 1):\n        a, b = i, k - i\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[(x, y)] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[(a ^ x, b ^ y)]\n    \n    return res\nprint ( countPairs ( [ [ 0 , 0 ] , [ 0 , 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 2 , 2 ] , [ 2 , 3 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 5 , 4 ] , [ 4 , 5 ] ] , 1 ) )",
    "execution_output": 8
  },
  {
    "id": 1149,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[(x, y)] += 1\n    \n    res = 0\n    for i in range(k + 1):\n        a, b = i, k - i\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[(x, y)] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[(a ^ x, b ^ y)]\n    \n    return res\nprint ( countPairs ( [ [ 4 , 5 ] , [ 4 , 5 ] , [ 0 , 0 ] , [ 7 , 2 ] , [ 3 , 1 ] , [ 6 , 3 ] , [ 1 , 6 ] , [ 5 , 4 ] , [ 2 , 7 ] , [ 3 , 6 ] , [ 6 , 1 ] , [ 8 , 9 ] , [ 9 , 8 ] ] , 6 ) )",
    "execution_output": 3
  },
  {
    "id": 1150,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[(i, j)] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[(i, j)] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = (k - r) ^ j\n            ans += c[(x, y)]\n    return ans\nprint ( countPairs ( [ [ 1 , 2 ] , [ 3 , 4 ] , [ 1 , 2 ] , [ 5 , 6 ] , [ 7 , 0 ] , [ 3 , 4 ] , [ 2 , 5 ] , [ 8 , 1 ] , [ 9 , 3 ] , [ 6 , 7 ] , [ 2 , 5 ] , [ 0 , 0 ] , [ 4 , 3 ] , [ 10 , 2 ] , [ 8 , 1 ] ] , 7 ) )",
    "execution_output": 6
  },
  {
    "id": 1151,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[(i, j)] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[(i, j)] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = (k - r) ^ j\n            ans += c[(x, y)]\n    return ans\nprint ( countPairs ( [ [ 0 , 0 ] , [ 0 , 1 ] , [ 0 , 2 ] , [ 0 , 3 ] , [ 0 , 4 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 3 , 4 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] ] , 10 ) )",
    "execution_output": 14
  },
  {
    "id": 1152,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[(i, j)] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[(i, j)] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = (k - r) ^ j\n            ans += c[(x, y)]\n    return ans\nprint ( countPairs ( [ [ 0 , 0 ] , [ 0 , 1 ] , [ 0 , 2 ] , [ 0 , 3 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 2 , 3 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] ] , 3 ) )",
    "execution_output": 32
  },
  {
    "id": 1153,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[(i, j)] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[(i, j)] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = (k - r) ^ j\n            ans += c[(x, y)]\n    return ans\nprint ( countPairs ( [ [ - 1 , 2 ] , [ 3 , - 4 ] , [ - 5 , - 6 ] , [ 7 , 8 ] , [ - 1 , 2 ] , [ 0 , - 3 ] , [ 4 , - 7 ] , [ - 8 , 0 ] , [ 9 , - 10 ] , [ 11 , 12 ] , [ 13 , - 14 ] , [ - 15 , 16 ] ] , 12 ) )",
    "execution_output": 1
  },
  {
    "id": 1154,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[(i, j)] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[(i, j)] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = (k - r) ^ j\n            ans += c[(x, y)]\n    return ans\nprint ( countPairs ( [ [ 1023 , 15 ] , [ 2047 , 31 ] , [ 4096 , 63 ] , [ 8191 , 127 ] , [ 1234 , 567 ] , [ 4321 , 8765 ] , [ 999 , 555 ] , [ 16384 , 255 ] , [ 0 , 31 ] , [ 31 , 0 ] , [ 58 , 14 ] , [ 73 , 19 ] , [ 2048 , 1024 ] , [ 65535 , 255 ] ] , 31 ) )",
    "execution_output": 0
  },
  {
    "id": 1155,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ 1 ] * 6 + [ 2 ] * 4 + [ 3 ] * 5 + [ - 1 ] * 8 ) )",
    "execution_output": 9
  },
  {
    "id": 1156,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ 10 ] * 7 + [ 11 ] * 10 + [ 12 ] * 13 + [ 13 ] * 16 ) )",
    "execution_output": 18
  },
  {
    "id": 1157,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ 20 ] * 2 + [ 21 ] * 3 + [ 22 ] * 2 + [ 23 ] * 3 + [ 24 ] * 2 + [ 25 ] * 3 + [ 26 ] * 2 + [ 27 ] * 3 + [ 28 ] * 2 + [ 29 ] * 3 ) )",
    "execution_output": 10
  },
  {
    "id": 1158,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ 0 ] * 4 + [ - 5 ] * 5 + [ 100 ] * 2 + [ - 100 ] * 3 + [ 7 ] * 8 ) )",
    "execution_output": 9
  },
  {
    "id": 1159,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ 30 ] * 4 + [ 31 ] * 7 + [ 32 ] * 10 + [ 33 ] * 13 + [ 34 ] * 19 ) )",
    "execution_output": 21
  },
  {
    "id": 1160,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k,v in cs.items():\n        if v==1:\n            return -1\n        ans += (v+2)//3\n    return ans\nprint ( minOperations ( [ 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 ] ) )",
    "execution_output": 8
  },
  {
    "id": 1161,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k,v in cs.items():\n        if v==1:\n            return -1\n        ans += (v+2)//3\n    return ans\nprint ( minOperations ( [ 9 , 9 , 9 , 9 , 9 , 9 , 9 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1162,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k,v in cs.items():\n        if v==1:\n            return -1\n        ans += (v+2)//3\n    return ans\nprint ( minOperations ( [ 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 30 , 30 , 30 , 30 , 30 , 30 , 30 , 30 , 30 , 30 , 30 , 40 , 40 , 40 , 40 , 40 , 40 , 40 , 40 , 40 , 40 , 40 , 40 , 40 ] ) )",
    "execution_output": 16
  },
  {
    "id": 1163,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k,v in cs.items():\n        if v==1:\n            return -1\n        ans += (v+2)//3\n    return ans\nprint ( minOperations ( [ 100 , 100 , 101 , 101 , 101 , 102 , 102 , 103 , 103 , 103 , 104 , 104 , 105 , 105 , 105 , 106 , 106 , 107 , 107 , 107 , 108 , 108 , 109 , 109 , 109 , 110 , 110 ] ) )",
    "execution_output": 11
  },
  {
    "id": 1164,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k,v in cs.items():\n        if v==1:\n            return -1\n        ans += (v+2)//3\n    return ans\nprint ( minOperations ( [ - 1 , - 1 , - 1 , - 1 , - 1 , 0 , 0 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , - 10 , - 10 , - 10 , 999 , 999 , 999 , 999 ] ) )",
    "execution_output": 9
  },
  {
    "id": 1165,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint ( minOperations ( [ 1 , 1 , 1 , 2 , 2 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 ] ) )",
    "execution_output": 8
  },
  {
    "id": 1166,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint ( minOperations ( [ 10 ] * 8 + [ 11 ] * 7 + [ 12 ] * 9 + [ 13 ] * 5 + [ 14 ] * 4 + [ 15 ] * 2 ) )",
    "execution_output": 14
  },
  {
    "id": 1167,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint ( minOperations ( [ 0 ] * 2 + [ 7 ] * 3 + [ 8 ] * 5 + [ 9 ] * 8 + [ 10 ] * 11 ) )",
    "execution_output": 11
  },
  {
    "id": 1168,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint ( minOperations ( [ 21 ] * 2 + [ 22 ] * 3 + [ 23 ] * 2 + [ 24 ] * 3 + [ 25 ] * 2 + [ 26 ] * 3 + [ 27 ] * 2 + [ 28 ] * 3 ) )",
    "execution_output": 8
  },
  {
    "id": 1169,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint ( minOperations ( [ 30 ] * 10 + [ 31 ] * 7 + [ 32 ] * 8 ) )",
    "execution_output": 10
  },
  {
    "id": 1170,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n  c = {}\n  for x in nums:\n    c[x] = c.get(x, 0) + 1\n  ret = 0\n  for x in c.values():\n    if x < 2:\n      return -1\n    if x % 3 == 0:\n      ret += x // 3\n    elif x % 3 == 1:\n      ret += 2 + (x - 4) // 3\n    else:\n      ret += 1 + (x - 2) // 3\n  return ret\nprint ( minOperations ( [ 1 , 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 ] ) )",
    "execution_output": 10
  },
  {
    "id": 1171,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n  c = {}\n  for x in nums:\n    c[x] = c.get(x, 0) + 1\n  ret = 0\n  for x in c.values():\n    if x < 2:\n      return -1\n    if x % 3 == 0:\n      ret += x // 3\n    elif x % 3 == 1:\n      ret += 2 + (x - 4) // 3\n    else:\n      ret += 1 + (x - 2) // 3\n  return ret\nprint ( minOperations ( [ 10 , 10 , 11 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 13 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 , 14 ] ) )",
    "execution_output": 15
  },
  {
    "id": 1172,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n  c = {}\n  for x in nums:\n    c[x] = c.get(x, 0) + 1\n  ret = 0\n  for x in c.values():\n    if x < 2:\n      return -1\n    if x % 3 == 0:\n      ret += x // 3\n    elif x % 3 == 1:\n      ret += 2 + (x - 4) // 3\n    else:\n      ret += 1 + (x - 2) // 3\n  return ret\nprint ( minOperations ( [ - 1 , - 1 , - 1 , - 1 , 0 , 0 , 0 , 100 , 100 , 100 , 100 , 100 , 100 , 100 , - 50 , - 50 , - 50 , - 50 , - 50 , - 50 , - 50 , - 50 , - 50 , - 50 , 999 , 999 , 999 , 999 , 999 , 999 , 999 , 999 , 999 , 999 , 999 , 999 , 999 ] ) )",
    "execution_output": 15
  },
  {
    "id": 1173,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n  c = {}\n  for x in nums:\n    c[x] = c.get(x, 0) + 1\n  ret = 0\n  for x in c.values():\n    if x < 2:\n      return -1\n    if x % 3 == 0:\n      ret += x // 3\n    elif x % 3 == 1:\n      ret += 2 + (x - 4) // 3\n    else:\n      ret += 1 + (x - 2) // 3\n  return ret\nprint ( minOperations ( [ 1 , 1 , 1 , 2 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 5 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 9 , 9 , 9 , 10 , 10 , 10 , 11 , 11 , 12 , 12 , 13 , 13 , 14 , 14 , 15 , 15 , 16 , 16 , 17 , 17 , 18 , 18 , 19 , 19 , 20 , 20 ] ) )",
    "execution_output": 20
  },
  {
    "id": 1174,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n  c = {}\n  for x in nums:\n    c[x] = c.get(x, 0) + 1\n  ret = 0\n  for x in c.values():\n    if x < 2:\n      return -1\n    if x % 3 == 0:\n      ret += x // 3\n    elif x % 3 == 1:\n      ret += 2 + (x - 4) // 3\n    else:\n      ret += 1 + (x - 2) // 3\n  return ret\nprint ( minOperations ( [ 1000000007 , 1000000007 , 1000000007 , 1000000007 , 1000000007 , 1000000007 , 1000000000039 , 1000000000039 , 1000000000039 , 1000000000039 , - 1000000000 , - 1000000000 , - 1000000000 , - 1000000000 , - 1000000000 , 234772 , 234772 , 234772 , 234772 , 234772 , 234772 , 234772 , 234772 , 3254323 , 3254323 ] ) )",
    "execution_output": 10
  },
  {
    "id": 1175,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint ( minOperations ( [ 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 ] ) )",
    "execution_output": 11
  },
  {
    "id": 1176,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint ( minOperations ( [ 10 , 10 , 10 , 10 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 13 , 13 , 14 , 14 , 14 , 15 , 15 , 15 , 15 , 15 ] ) )",
    "execution_output": 13
  },
  {
    "id": 1177,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint ( minOperations ( [ 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 5 , 5 , 5 , 5 , 5 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 11 , 11 , 11 , 11 , 11 , 11 , 13 , 13 ] ) )",
    "execution_output": 11
  },
  {
    "id": 1178,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint ( minOperations ( [ 7 , 7 , 7 , 7 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 12 , 12 , 13 , 13 , 13 , 13 , 13 , 13 ] ) )",
    "execution_output": 20
  },
  {
    "id": 1179,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint ( minOperations ( [ 7 , 7 , 7 , 7 , 7 , 7 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 10 , 10 , 10 ] ) )",
    "execution_output": 10
  },
  {
    "id": 1180,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ 1 , 1 , 1 , 2 , 2 , 2 , 2 , 3 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 ] ) )",
    "execution_output": 13
  },
  {
    "id": 1181,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ 10 , 10 , 10 , 10 , 20 , 20 , 20 , 20 , 20 , 20 , 20 , 30 , 30 , 30 , 30 , 30 , 30 , 30 , 30 , 30 , 30 ] ) )",
    "execution_output": 9
  },
  {
    "id": 1182,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ - 5 , - 5 , - 2 , - 2 , - 2 , - 2 , - 2 , - 1 , - 1 , - 1 , 0 , 0 , 0 , 0 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 13 , 13 , 13 , 13 , 13 , 13 ] ) )",
    "execution_output": 11
  },
  {
    "id": 1183,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 , 6 , 6 , 6 , 7 , 7 , 7 , 8 , 8 , 8 , 9 , 9 , 9 , 10 , 10 , 10 ] ) )",
    "execution_output": 10
  },
  {
    "id": 1184,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint ( minOperations ( [ 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 9 , 10 , 10 , 10 , 10 , 10 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 11 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 , 12 ] ) )",
    "execution_output": 21
  },
  {
    "id": 1185,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint ( maxSubarrays ( [ 7 , 3 , 12 , 8 , 1 , 14 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1186,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint ( maxSubarrays ( [ 255 , 170 , 85 , 240 , 15 , 128 , 127 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1187,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint ( maxSubarrays ( [ 1027 , 1029 , 3079 , 1088 , 1544 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1188,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint ( maxSubarrays ( [ 7 , 11 , 13 , 14 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1189,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint ( maxSubarrays ( [ 1 , 2 , 4 , 8 , 16 , 31 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1190,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = 0, nums[0]\n    for n in nums[1:]: target &= n\n    if target != 0: return 1\n    cur = -1\n    for n in nums:\n        if cur == -1: cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint ( maxSubarrays ( [ 59 , 53 , 14 , 123 , 95 , 32 , 47 , 8 , 7 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1191,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = 0, nums[0]\n    for n in nums[1:]: target &= n\n    if target != 0: return 1\n    cur = -1\n    for n in nums:\n        if cur == -1: cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint ( maxSubarrays ( [ 8 , 4 , 8 , 2 , 1 , 2 , 16 , 8 , 32 ] ) )",
    "execution_output": 4
  },
  {
    "id": 1192,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = 0, nums[0]\n    for n in nums[1:]: target &= n\n    if target != 0: return 1\n    cur = -1\n    for n in nums:\n        if cur == -1: cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint ( maxSubarrays ( [ 1023 , 511 , 767 , 383 , 191 , 95 , 63 , 31 , 15 , 7 , 3 , 1 , 2 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1193,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = 0, nums[0]\n    for n in nums[1:]: target &= n\n    if target != 0: return 1\n    cur = -1\n    for n in nums:\n        if cur == -1: cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint ( maxSubarrays ( [ 65535 , 43690 , 21845 , 61440 , 4095 , 8192 , 12288 , 2048 , 1024 , 512 , 256 ] ) )",
    "execution_output": 4
  },
  {
    "id": 1194,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = 0, nums[0]\n    for n in nums[1:]: target &= n\n    if target != 0: return 1\n    cur = -1\n    for n in nums:\n        if cur == -1: cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint ( maxSubarrays ( [ 15 , 23 , 31 , 47 , 63 , 95 , 127 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1195,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint ( maxSubarrays ( [ 7 , 3 , 15 , 7 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1196,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint ( maxSubarrays ( [ 5 , 2 , 8 , 1 , 7 , 8 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1197,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint ( maxSubarrays ( [ 0 , 6 , 0 , 7 , 0 , 8 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1198,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint ( maxSubarrays ( [ - 1 , 1 , 2 , 4 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1199,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint ( maxSubarrays ( [ 1023 , 512 , 255 , 128 , 127 , 64 , 63 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1200,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    \n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint ( maxSubarrays ( [ 12 , 6 , 3 , 1 , 8 , 2 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1201,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    \n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint ( maxSubarrays ( [ 7 , 7 , 7 , 7 , 7 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1202,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    \n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint ( maxSubarrays ( [ 5 , 3 , 12 , 10 , 9 , 6 , 7 , 4 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1203,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    \n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint ( maxSubarrays ( [ 15 , 8 , 7 , 3 , 12 , 4 , 1 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1204,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    \n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint ( maxSubarrays ( [ 1 , 2 , 3 , 4 , 8 , 16 , 31 , 2 , 1 ] ) )",
    "execution_output": 4
  },
  {
    "id": 1205,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    \n    n = len(nums)\n    \n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    \n    if mn:\n        return 1\n    \n    res, cur = 0, nums[0]\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    \n    if cur == mn:\n        res += 1\n    \n    return res\nprint ( maxSubarrays ( [ 7 , 3 , 5 , 1 , 0 , 6 , 4 , 0 , 8 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1206,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    \n    n = len(nums)\n    \n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    \n    if mn:\n        return 1\n    \n    res, cur = 0, nums[0]\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    \n    if cur == mn:\n        res += 1\n    \n    return res\nprint ( maxSubarrays ( [ 8 , 1 , 4 , 2 , 16 , 32 , 3 , 64 ] ) )",
    "execution_output": 4
  },
  {
    "id": 1207,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    \n    n = len(nums)\n    \n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    \n    if mn:\n        return 1\n    \n    res, cur = 0, nums[0]\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    \n    if cur == mn:\n        res += 1\n    \n    return res\nprint ( maxSubarrays ( [ 255 , 170 , 85 , 240 , 15 , 60 , 3 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1208,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    \n    n = len(nums)\n    \n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    \n    if mn:\n        return 1\n    \n    res, cur = 0, nums[0]\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    \n    if cur == mn:\n        res += 1\n    \n    return res\nprint ( maxSubarrays ( [ 14 , 6 , 10 , 2 , 18 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1209,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    \n    n = len(nums)\n    \n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    \n    if mn:\n        return 1\n    \n    res, cur = 0, nums[0]\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    \n    if cur == mn:\n        res += 1\n    \n    return res\nprint ( maxSubarrays ( [ 1023 , 512 , 255 , 128 , 127 , 64 , 63 , 31 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1210,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint ( maxSubarrays ( [ 1048448 , 1032319 , 16383 , 1048448 , 1032319 , 16383 , 1048448 , 1032319 , 16383 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1211,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint ( maxSubarrays ( [ 5941930 , 7689557 , 11596016 , 14618383 , 1258291 , 2936012 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1212,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint ( maxSubarrays ( [ 1048560 , 1048335 , 1044735 , 987135 , 65535 , 1048560 , 1048335 , 1044735 , 987135 , 65535 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1213,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint ( maxSubarrays ( [ - 1024 , 1048448 , 1032319 , 16383 , - 65536 , 1048448 , 1032319 , 16383 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1214,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint ( maxSubarrays ( [ 1048575 , 1048561 , 1048513 , 1047553 , 1046529 , 1045505 , 1044481 , 1043457 , 1042433 , 1041409 ] ) )",
    "execution_output": 1
  },
  {
    "id": 1215,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r+1)\n    record[0] = 1\n    count = collections.Counter(nums)\n\n\n    for i in count:\n\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1,count[i]+1):\n                tmp[i*k:] += record[:-i*k]\n        else:\n            tmp *= (count[i] + 1)\n\n        record = tmp\n        \n        record %= int(1e9+7)\n\n\n\n    return int(numpy.sum(record[l:r+1]) % int (1e9+7))\nprint ( countSubMultisets ( [ 0 , 0 , 1 , 2 , 2 , 3 , 3 , 3 , 5 , 8 , 13 ] , 10 , 20 ) )",
    "execution_output": 219
  },
  {
    "id": 1216,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r+1)\n    record[0] = 1\n    count = collections.Counter(nums)\n\n\n    for i in count:\n\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1,count[i]+1):\n                tmp[i*k:] += record[:-i*k]\n        else:\n            tmp *= (count[i] + 1)\n\n        record = tmp\n        \n        record %= int(1e9+7)\n\n\n\n    return int(numpy.sum(record[l:r+1]) % int (1e9+7))\nprint ( countSubMultisets ( [ 1 ] * 10 + [ 2 ] * 7 + [ 5 ] * 4 + [ 11 ] * 3 , 15 , 30 ) )",
    "execution_output": 461
  },
  {
    "id": 1217,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r+1)\n    record[0] = 1\n    count = collections.Counter(nums)\n\n\n    for i in count:\n\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1,count[i]+1):\n                tmp[i*k:] += record[:-i*k]\n        else:\n            tmp *= (count[i] + 1)\n\n        record = tmp\n        \n        record %= int(1e9+7)\n\n\n\n    return int(numpy.sum(record[l:r+1]) % int (1e9+7))\nprint ( countSubMultisets ( [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 4 , 6 , 9 , 10 , 14 , 4 , 6 , 9 ] , 25 , 40 ) )",
    "execution_output": 1691
  },
  {
    "id": 1218,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r+1)\n    record[0] = 1\n    count = collections.Counter(nums)\n\n\n    for i in count:\n\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1,count[i]+1):\n                tmp[i*k:] += record[:-i*k]\n        else:\n            tmp *= (count[i] + 1)\n\n        record = tmp\n        \n        record %= int(1e9+7)\n\n\n\n    return int(numpy.sum(record[l:r+1]) % int (1e9+7))\nprint ( countSubMultisets ( [ 1 , 3 , 50 , 200 , 1000 , 2000 , 4000 , 7 , 9 , 11 ] , 40 , 60 ) )",
    "execution_output": 9
  },
  {
    "id": 1219,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r+1)\n    record[0] = 1\n    count = collections.Counter(nums)\n\n\n    for i in count:\n\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1,count[i]+1):\n                tmp[i*k:] += record[:-i*k]\n        else:\n            tmp *= (count[i] + 1)\n\n        record = tmp\n        \n        record %= int(1e9+7)\n\n\n\n    return int(numpy.sum(record[l:r+1]) % int (1e9+7))\nprint ( countSubMultisets ( [ 1 , 2 , 3 , 4 , 5 ] * 3 + [ 6 , 7 , 8 , 9 , 10 ] * 2 , 30 , 50 ) )",
    "execution_output": 54802
  },
  {
    "id": 1220,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    \n    # for each 2 char, if not equal one needs to be changed\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i+1]:\n            ans += 1\n        i += 2\n    return ans\nprint ( minChanges ( \"abababab\" ) )",
    "execution_output": 4
  },
  {
    "id": 1221,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    \n    # for each 2 char, if not equal one needs to be changed\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i+1]:\n            ans += 1\n        i += 2\n    return ans\nprint ( minChanges ( \"aabbaabb\" ) )",
    "execution_output": 0
  },
  {
    "id": 1222,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    \n    # for each 2 char, if not equal one needs to be changed\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i+1]:\n            ans += 1\n        i += 2\n    return ans\nprint ( minChanges ( \"abcddcba\" ) )",
    "execution_output": 4
  },
  {
    "id": 1223,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    \n    # for each 2 char, if not equal one needs to be changed\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i+1]:\n            ans += 1\n        i += 2\n    return ans\nprint ( minChanges ( \"zzxyzzxy\" ) )",
    "execution_output": 2
  },
  {
    "id": 1224,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    \n    # for each 2 char, if not equal one needs to be changed\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i+1]:\n            ans += 1\n        i += 2\n    return ans\nprint ( minChanges ( \"AaAaAaAa\" ) )",
    "execution_output": 4
  },
  {
    "id": 1225,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0,len(s),2):\n        if s[i]!=s[i+1]:ans+=1\n    return ans\nprint ( minChanges ( \"AaBbCcDdEeFf\" ) )",
    "execution_output": 6
  },
  {
    "id": 1226,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0,len(s),2):\n        if s[i]!=s[i+1]:ans+=1\n    return ans\nprint ( minChanges ( \"abababababababab\" ) )",
    "execution_output": 8
  },
  {
    "id": 1227,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0,len(s),2):\n        if s[i]!=s[i+1]:ans+=1\n    return ans\nprint ( minChanges ( \"aabbccddeeffgghh\" ) )",
    "execution_output": 0
  },
  {
    "id": 1228,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0,len(s),2):\n        if s[i]!=s[i+1]:ans+=1\n    return ans\nprint ( minChanges ( \"abcabcabcabc\" ) )",
    "execution_output": 6
  },
  {
    "id": 1229,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0,len(s),2):\n        if s[i]!=s[i+1]:ans+=1\n    return ans\nprint ( minChanges ( \"1a2b3c4d5e6f7g8h\" ) )",
    "execution_output": 8
  },
  {
    "id": 1230,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c=1\n    ans=0\n    for i in range(1,len(s)):\n        if s[i]==s[i-1]:\n            c+=1\n        else:\n            if c%2==1:\n                ans+=1\n                c+=1\n            else:\n                c=1\n    return ans\nprint ( minChanges ( \"aaabbbccddeefffggghhhiiijjj\" ) )",
    "execution_output": 3
  },
  {
    "id": 1231,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c=1\n    ans=0\n    for i in range(1,len(s)):\n        if s[i]==s[i-1]:\n            c+=1\n        else:\n            if c%2==1:\n                ans+=1\n                c+=1\n            else:\n                c=1\n    return ans\nprint ( minChanges ( \"aabbaaabbbbccaaabbbbaaa\" ) )",
    "execution_output": 3
  },
  {
    "id": 1232,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c=1\n    ans=0\n    for i in range(1,len(s)):\n        if s[i]==s[i-1]:\n            c+=1\n        else:\n            if c%2==1:\n                ans+=1\n                c+=1\n            else:\n                c=1\n    return ans\nprint ( minChanges ( \"abababbaabbaba\" ) )",
    "execution_output": 7
  },
  {
    "id": 1233,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c=1\n    ans=0\n    for i in range(1,len(s)):\n        if s[i]==s[i-1]:\n            c+=1\n        else:\n            if c%2==1:\n                ans+=1\n                c+=1\n            else:\n                c=1\n    return ans\nprint ( minChanges ( \"AaaAAaaAAAaA\" ) )",
    "execution_output": 5
  },
  {
    "id": 1234,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c=1\n    ans=0\n    for i in range(1,len(s)):\n        if s[i]==s[i-1]:\n            c+=1\n        else:\n            if c%2==1:\n                ans+=1\n                c+=1\n            else:\n                c=1\n    return ans\nprint ( minChanges ( \"11223344556677889900\" ) )",
    "execution_output": 0
  },
  {
    "id": 1235,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i+1]:\n            res += 1\n    return res\nprint ( minChanges ( \"aabbccddeeff\" ) )",
    "execution_output": 0
  },
  {
    "id": 1236,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i+1]:\n            res += 1\n    return res\nprint ( minChanges ( \"abababababab\" ) )",
    "execution_output": 6
  },
  {
    "id": 1237,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i+1]:\n            res += 1\n    return res\nprint ( minChanges ( \"aaabbbcccddd\" ) )",
    "execution_output": 2
  },
  {
    "id": 1238,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i+1]:\n            res += 1\n    return res\nprint ( minChanges ( \"1a!b2c@d3e$%\" ) )",
    "execution_output": 6
  },
  {
    "id": 1239,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i+1]:\n            res += 1\n    return res\nprint ( minChanges ( \"AaBbCcDdEeFf\" ) )",
    "execution_output": 6
  },
  {
    "id": 1240,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint ( minChanges ( \"aabbccddeeff\" ) )",
    "execution_output": 0
  },
  {
    "id": 1241,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint ( minChanges ( \"abababababababababab\" ) )",
    "execution_output": 10
  },
  {
    "id": 1242,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint ( minChanges ( \"aa12bb34cc\" ) )",
    "execution_output": 2
  },
  {
    "id": 1243,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint ( minChanges ( \"aAbBcCdDeE\" ) )",
    "execution_output": 5
  },
  {
    "id": 1244,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint ( minChanges ( \"ααβγδδ\" ) )",
    "execution_output": 1
  },
  {
    "id": 1245,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint ( minChanges ( \"abbaabba\" ) )",
    "execution_output": 4
  },
  {
    "id": 1246,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint ( minChanges ( \"aabbccddeeff\" ) )",
    "execution_output": 0
  },
  {
    "id": 1247,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint ( minChanges ( \"AaAaBbBb\" ) )",
    "execution_output": 4
  },
  {
    "id": 1248,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint ( minChanges ( \"aaabbbcccddd\" ) )",
    "execution_output": 2
  },
  {
    "id": 1249,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint ( minChanges ( \"1a2b3c4d5e6f\" ) )",
    "execution_output": 6
  },
  {
    "id": 1250,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda : 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda : 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint ( lengthOfLongestSubsequence ( [ 0 , 3 , 1 , 0 , 2 , 1 , 1 , 4 ] , 4 ) )",
    "execution_output": 5
  },
  {
    "id": 1251,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda : 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda : 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint ( lengthOfLongestSubsequence ( [ - 2 , - 1 , 3 , 4 , 6 , 1 ] , 4 ) )",
    "execution_output": 4
  },
  {
    "id": 1252,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda : 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda : 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint ( lengthOfLongestSubsequence ( [ 5 , 5 , 5 , 5 , 2 , 2 , 2 , 2 , 1 , 1 , 1 ] , 10 ) )",
    "execution_output": 6
  },
  {
    "id": 1253,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda : 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda : 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint ( lengthOfLongestSubsequence ( [ 7 , 1 , 2 , 9 , 3 , 4 , 5 , 6 , 8 , 10 ] , 15 ) )",
    "execution_output": 5
  },
  {
    "id": 1254,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda : 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda : 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint ( lengthOfLongestSubsequence ( [ 100 , 50 , 1 , 49 , 2 , 2 , 2 , 2 , 2 ] , 54 ) )",
    "execution_output": 4
  },
  {
    "id": 1255,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i+x] = max(dp[i+x], 1 + dp[i])\n    return dp[-1] - 1\nprint ( lengthOfLongestSubsequence ( [ 1 , 2 , 3 , 4 , 6 , 7 , 8 , 10 , 11 , 12 ] , 20 ) )",
    "execution_output": 5
  },
  {
    "id": 1256,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i+x] = max(dp[i+x], 1 + dp[i])\n    return dp[-1] - 1\nprint ( lengthOfLongestSubsequence ( [ 9 , 9 , 9 , 9 , 4 , 4 , 4 , 4 , 3 , 3 , 3 , 3 , 2 , 2 , 2 ] , 18 ) )",
    "execution_output": 7
  },
  {
    "id": 1257,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i+x] = max(dp[i+x], 1 + dp[i])\n    return dp[-1] - 1\nprint ( lengthOfLongestSubsequence ( [ 5 , 7 , 9 , 10 , 12 , 13 , 14 , 15 , 17 , 18 , 20 , 22 , 25 , 27 , 30 , 33 , 35 ] , 97 ) )",
    "execution_output": 8
  },
  {
    "id": 1258,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i+x] = max(dp[i+x], 1 + dp[i])\n    return dp[-1] - 1\nprint ( lengthOfLongestSubsequence ( [ 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 7 ] , 47 ) )",
    "execution_output": 6
  },
  {
    "id": 1259,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i+x] = max(dp[i+x], 1 + dp[i])\n    return dp[-1] - 1\nprint ( lengthOfLongestSubsequence ( [ 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 ] , 33 ) )",
    "execution_output": 4
  },
  {
    "id": 1260,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0]*(target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    \n    return dp[-1] if dp[-1] else -1\nprint ( lengthOfLongestSubsequence ( [ 3 , 1 , 3 , 5 , 2 , 8 , 1 , 1 , 9 ] , 10 ) )",
    "execution_output": 5
  },
  {
    "id": 1261,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0]*(target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    \n    return dp[-1] if dp[-1] else -1\nprint ( lengthOfLongestSubsequence ( [ 0 , 0 , 4 , 6 , 0 , 2 , 2 ] , 8 ) )",
    "execution_output": 6
  },
  {
    "id": 1262,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0]*(target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    \n    return dp[-1] if dp[-1] else -1\nprint ( lengthOfLongestSubsequence ( [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 , 2 ] , 10 ) )",
    "execution_output": 9
  },
  {
    "id": 1263,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0]*(target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    \n    return dp[-1] if dp[-1] else -1\nprint ( lengthOfLongestSubsequence ( [ 7 , 14 , 3 , 1 , 8 , 2 , 2 , 2 , 9 , 5 , 6 ] , 15 ) )",
    "execution_output": 6
  },
  {
    "id": 1264,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0]*(target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    \n    return dp[-1] if dp[-1] else -1\nprint ( lengthOfLongestSubsequence ( [ 20 , 3 , 4 , 5 , 7 , 9 , 11 , 1 , 1 , 1 ] , 12 ) )",
    "execution_output": 5
  },
  {
    "id": 1265,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(\n                    max_len[new_sum],\n                    max_len[new_sum - x] + 1\n                )\n    return max_len[target]\nprint ( lengthOfLongestSubsequence ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] , 15 ) )",
    "execution_output": 5
  },
  {
    "id": 1266,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(\n                    max_len[new_sum],\n                    max_len[new_sum - x] + 1\n                )\n    return max_len[target]\nprint ( lengthOfLongestSubsequence ( [ 5 , 5 , 5 , 5 , 10 ] , 15 ) )",
    "execution_output": 3
  },
  {
    "id": 1267,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(\n                    max_len[new_sum],\n                    max_len[new_sum - x] + 1\n                )\n    return max_len[target]\nprint ( lengthOfLongestSubsequence ( [ 7 , 14 , 3 , 2 , 9 , 8 , 4 , 5 ] , 23 ) )",
    "execution_output": 5
  },
  {
    "id": 1268,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(\n                    max_len[new_sum],\n                    max_len[new_sum - x] + 1\n                )\n    return max_len[target]\nprint ( lengthOfLongestSubsequence ( [ 9 , 3 , 9 , 3 , 3 , 3 , 8 , 2 , 1 ] , 12 ) )",
    "execution_output": 5
  },
  {
    "id": 1269,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(\n                    max_len[new_sum],\n                    max_len[new_sum - x] + 1\n                )\n    return max_len[target]\nprint ( lengthOfLongestSubsequence ( [ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ] , 21 ) )",
    "execution_output": 6
  },
  {
    "id": 1270,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d=[0]*(target+1)\n    t=[el for el in nums if el<=target]\n    if len(t)==0:\n        return -1\n    d[t[0]]=1\n    for el in t[1:]:\n        for j in range(target,0,-1):\n            if j-el>=0 and (j-el==0 or d[j-el]>0):\n                d[j]=max(d[j],d[j-el]+1)\n    if d[target]==0:\n        return -1\n    return d[target]\nprint ( lengthOfLongestSubsequence ( [ 1 , 1 , 1 , 2 , 2 , 3 , 4 , 5 ] , 6 ) )",
    "execution_output": 4
  },
  {
    "id": 1271,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d=[0]*(target+1)\n    t=[el for el in nums if el<=target]\n    if len(t)==0:\n        return -1\n    d[t[0]]=1\n    for el in t[1:]:\n        for j in range(target,0,-1):\n            if j-el>=0 and (j-el==0 or d[j-el]>0):\n                d[j]=max(d[j],d[j-el]+1)\n    if d[target]==0:\n        return -1\n    return d[target]\nprint ( lengthOfLongestSubsequence ( [ 6 , 5 , 4 , 3 , 2 , 1 , 1 , 1 , 1 ] , 6 ) )",
    "execution_output": 5
  },
  {
    "id": 1272,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d=[0]*(target+1)\n    t=[el for el in nums if el<=target]\n    if len(t)==0:\n        return -1\n    d[t[0]]=1\n    for el in t[1:]:\n        for j in range(target,0,-1):\n            if j-el>=0 and (j-el==0 or d[j-el]>0):\n                d[j]=max(d[j],d[j-el]+1)\n    if d[target]==0:\n        return -1\n    return d[target]\nprint ( lengthOfLongestSubsequence ( [ 7 , 7 , 7 , 3 , 3 , 3 , 3 , 3 , 3 , 3 , 10 , 11 ] , 21 ) )",
    "execution_output": 7
  },
  {
    "id": 1273,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d=[0]*(target+1)\n    t=[el for el in nums if el<=target]\n    if len(t)==0:\n        return -1\n    d[t[0]]=1\n    for el in t[1:]:\n        for j in range(target,0,-1):\n            if j-el>=0 and (j-el==0 or d[j-el]>0):\n                d[j]=max(d[j],d[j-el]+1)\n    if d[target]==0:\n        return -1\n    return d[target]\nprint ( lengthOfLongestSubsequence ( [ 1000000 , 234772 , 5 , 9 , 12 , 3 , 9 , 18 , 2 , 7 , 3254323 ] , 21 ) )",
    "execution_output": 4
  },
  {
    "id": 1274,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d=[0]*(target+1)\n    t=[el for el in nums if el<=target]\n    if len(t)==0:\n        return -1\n    d[t[0]]=1\n    for el in t[1:]:\n        for j in range(target,0,-1):\n            if j-el>=0 and (j-el==0 or d[j-el]>0):\n                d[j]=max(d[j],d[j-el]+1)\n    if d[target]==0:\n        return -1\n    return d[target]\nprint ( lengthOfLongestSubsequence ( [ 5 , 5 , 5 , 5 , 10 , 10 , 10 , 1 , 2 , 3 , 4 , 6 , 7 , 8 , 9 ] , 50 ) )",
    "execution_output": 10
  },
  {
    "id": 1275,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp=[-1]*(target+1)\n    dp[0]=0\n    for a in nums:\n        for i in range(target-a,-1,-1):\n            if dp[i]==-1:continue\n            dp[i+a]=max(dp[i+a],dp[i]+1)\n    return dp[-1]\nprint ( lengthOfLongestSubsequence ( [ 1 , 2 , 3 , 4 , 5 , 6 ] , 10 ) )",
    "execution_output": 4
  },
  {
    "id": 1276,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp=[-1]*(target+1)\n    dp[0]=0\n    for a in nums:\n        for i in range(target-a,-1,-1):\n            if dp[i]==-1:continue\n            dp[i+a]=max(dp[i+a],dp[i]+1)\n    return dp[-1]\nprint ( lengthOfLongestSubsequence ( [ 2 , 2 , 2 , 2 , 3 , 3 , 5 ] , 9 ) )",
    "execution_output": 4
  },
  {
    "id": 1277,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp=[-1]*(target+1)\n    dp[0]=0\n    for a in nums:\n        for i in range(target-a,-1,-1):\n            if dp[i]==-1:continue\n            dp[i+a]=max(dp[i+a],dp[i]+1)\n    return dp[-1]\nprint ( lengthOfLongestSubsequence ( [ 3 , 34 , 4 , 12 , 5 , 2 ] , 9 ) )",
    "execution_output": 3
  },
  {
    "id": 1278,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp=[-1]*(target+1)\n    dp[0]=0\n    for a in nums:\n        for i in range(target-a,-1,-1):\n            if dp[i]==-1:continue\n            dp[i+a]=max(dp[i+a],dp[i]+1)\n    return dp[-1]\nprint ( lengthOfLongestSubsequence ( [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 8 ] , 8 ) )",
    "execution_output": 8
  },
  {
    "id": 1279,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp=[-1]*(target+1)\n    dp[0]=0\n    for a in nums:\n        for i in range(target-a,-1,-1):\n            if dp[i]==-1:continue\n            dp[i+a]=max(dp[i+a],dp[i]+1)\n    return dp[-1]\nprint ( lengthOfLongestSubsequence ( [ 4 , 6 , 10 ] , 5 ) )",
    "execution_output": -1
  },
  {
    "id": 1280,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n: return 0\n    elif n == 1: return prices[0]\n    dp = [float(\"inf\")] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    #print(dp)\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n        #print(dp)\n    return dp[-1]\nprint ( minimumCoins ( [ 5 , 100 , 6 , 90 , 7 , 80 , 8 , 70 , 9 , 60 , 10 , 50 ] ) )",
    "execution_output": 19
  },
  {
    "id": 1281,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n: return 0\n    elif n == 1: return prices[0]\n    dp = [float(\"inf\")] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    #print(dp)\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n        #print(dp)\n    return dp[-1]\nprint ( minimumCoins ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) )",
    "execution_output": 8
  },
  {
    "id": 1282,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n: return 0\n    elif n == 1: return prices[0]\n    dp = [float(\"inf\")] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    #print(dp)\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n        #print(dp)\n    return dp[-1]\nprint ( minimumCoins ( [ 50 , 45 , 40 , 35 , 30 , 25 , 20 , 15 , 10 , 5 ] ) )",
    "execution_output": 110
  },
  {
    "id": 1283,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n: return 0\n    elif n == 1: return prices[0]\n    dp = [float(\"inf\")] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    #print(dp)\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n        #print(dp)\n    return dp[-1]\nprint ( minimumCoins ( [ 10 , 0 , 20 , 0 , 30 , 0 , 40 , 0 , 50 , 0 , 60 , 0 ] ) )",
    "execution_output": 10
  },
  {
    "id": 1284,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n: return 0\n    elif n == 1: return prices[0]\n    dp = [float(\"inf\")] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    #print(dp)\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n        #print(dp)\n    return dp[-1]\nprint ( minimumCoins ( [ 3 , 14 , 1 , 5 , 9 , 2 , 6 , 5 , 3 , 5 , 8 , 9 , 7 , 9 , 3 ] ) )",
    "execution_output": 9
  },
  {
    "id": 1285,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint ( minimumCoins ( [ 5 , 100 , 6 , 100 , 7 , 100 , 8 , 100 , 9 , 100 , 10 , 100 ] ) )",
    "execution_output": 19
  },
  {
    "id": 1286,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint ( minimumCoins ( [ 60 , 55 , 50 , 45 , 40 , 35 , 30 , 25 , 20 , 15 , 10 , 5 ] ) )",
    "execution_output": 140
  },
  {
    "id": 1287,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint ( minimumCoins ( [ 20 , 20 , 20 , 1 , 20 , 20 , 1 , 20 , 20 , 1 , 20 , 20 ] ) )",
    "execution_output": 41
  },
  {
    "id": 1288,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint ( minimumCoins ( [ 9 , 2 , 7 , 3 , 8 , 1 , 6 , 4 , 5 , 2 , 9 , 3 ] ) )",
    "execution_output": 15
  },
  {
    "id": 1289,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint ( minimumCoins ( [ 10 , 11 , 12 , 13 , 14 , 1 , 20 , 2 , 30 , 3 , 40 , 4 ] ) )",
    "execution_output": 23
  },
  {
    "id": 1290,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    \n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        \n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        \n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n            \n        return res\n        \n    dfs.cache_clear()\n    return dfs(0, -1)\nprint ( minimumCoins ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] ) )",
    "execution_output": 10
  },
  {
    "id": 1291,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    \n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        \n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        \n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n            \n        return res\n        \n    dfs.cache_clear()\n    return dfs(0, -1)\nprint ( minimumCoins ( [ 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ] ) )",
    "execution_output": 28
  },
  {
    "id": 1292,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    \n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        \n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        \n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n            \n        return res\n        \n    dfs.cache_clear()\n    return dfs(0, -1)\nprint ( minimumCoins ( [ 1 , 100 , 2 , 90 , 3 , 80 , 4 , 70 , 5 , 60 , 6 , 50 , 7 , 40 , 8 ] ) )",
    "execution_output": 11
  },
  {
    "id": 1293,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    \n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        \n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        \n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n            \n        return res\n        \n    dfs.cache_clear()\n    return dfs(0, -1)\nprint ( minimumCoins ( [ 5 , 0 , 7 , 0 , 9 , 0 , 4 , 0 , 8 , 0 , 3 , 0 , 6 , 0 ] ) )",
    "execution_output": 5
  },
  {
    "id": 1294,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    \n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        \n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        \n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n            \n        return res\n        \n    dfs.cache_clear()\n    return dfs(0, -1)\nprint ( minimumCoins ( [ 100 , 2 , 120 , 3 , 2 , 4 , 150 , 3 , 2 , 4 , 2 , 3 , 2 , 3 , 200 , 2 ] ) )",
    "execution_output": 106
  },
  {
    "id": 1295,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    \n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        \n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n            \n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        \n        return min(c1, c2)\n    \n    return panda(0, 0)\nprint ( minimumCoins ( [ 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 ] ) )",
    "execution_output": 11
  },
  {
    "id": 1296,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    \n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        \n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n            \n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        \n        return min(c1, c2)\n    \n    return panda(0, 0)\nprint ( minimumCoins ( [ 120 , 110 , 100 , 90 , 80 , 70 , 60 , 50 , 40 , 30 , 20 , 10 ] ) )",
    "execution_output": 280
  },
  {
    "id": 1297,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    \n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        \n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n            \n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        \n        return min(c1, c2)\n    \n    return panda(0, 0)\nprint ( minimumCoins ( [ 3 , 100 , 4 , 90 , 5 , 80 , 6 , 70 , 7 , 60 , 8 , 50 ] ) )",
    "execution_output": 13
  },
  {
    "id": 1298,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    \n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        \n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n            \n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        \n        return min(c1, c2)\n    \n    return panda(0, 0)\nprint ( minimumCoins ( [ 8 , 15 , 3 , 20 , 6 , 1 , 25 , 7 , 4 , 19 , 30 , 2 ] ) )",
    "execution_output": 12
  },
  {
    "id": 1299,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    \n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        \n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n            \n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        \n        return min(c1, c2)\n    \n    return panda(0, 0)\nprint ( minimumCoins ( [ 10 , 10 , 10 , 50 , 50 , 10 , 10 , 90 , 10 , 10 , 50 , 10 ] ) )",
    "execution_output": 30
  },
  {
    "id": 1300,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float(\"inf\")]*(n+1)\n    \n    for i in range(n):\n        if i==0:\n            cost = prices[i]\n        else:\n            cost = ans[i-1]+prices[i]\n            \n        for j in range(i,min(n,i+i+1+1)):\n            ans[j] = min(ans[j],cost)\n    # print(ans)\n    return ans[n-1]\nprint ( minimumCoins ( [ 1 , 100 , 1 , 100 , 1 , 100 , 1 , 100 , 1 , 100 ] ) )",
    "execution_output": 3
  },
  {
    "id": 1301,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float(\"inf\")]*(n+1)\n    \n    for i in range(n):\n        if i==0:\n            cost = prices[i]\n        else:\n            cost = ans[i-1]+prices[i]\n            \n        for j in range(i,min(n,i+i+1+1)):\n            ans[j] = min(ans[j],cost)\n    # print(ans)\n    return ans[n-1]\nprint ( minimumCoins ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] ) )",
    "execution_output": 10
  },
  {
    "id": 1302,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float(\"inf\")]*(n+1)\n    \n    for i in range(n):\n        if i==0:\n            cost = prices[i]\n        else:\n            cost = ans[i-1]+prices[i]\n            \n        for j in range(i,min(n,i+i+1+1)):\n            ans[j] = min(ans[j],cost)\n    # print(ans)\n    return ans[n-1]\nprint ( minimumCoins ( [ 12 , 11 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ] ) )",
    "execution_output": 28
  },
  {
    "id": 1303,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float(\"inf\")]*(n+1)\n    \n    for i in range(n):\n        if i==0:\n            cost = prices[i]\n        else:\n            cost = ans[i-1]+prices[i]\n            \n        for j in range(i,min(n,i+i+1+1)):\n            ans[j] = min(ans[j],cost)\n    # print(ans)\n    return ans[n-1]\nprint ( minimumCoins ( [ 5 , 5 , 100 , 5 , 5 , 200 , 5 , 5 , 300 , 5 , 5 , 400 , 5 , 5 , 500 ] ) )",
    "execution_output": 20
  },
  {
    "id": 1304,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float(\"inf\")]*(n+1)\n    \n    for i in range(n):\n        if i==0:\n            cost = prices[i]\n        else:\n            cost = ans[i-1]+prices[i]\n            \n        for j in range(i,min(n,i+i+1+1)):\n            ans[j] = min(ans[j],cost)\n    # print(ans)\n    return ans[n-1]\nprint ( minimumCoins ( [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 ] ) )",
    "execution_output": 20
  },
  {
    "id": 1305,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    # @cache\n    # def dp(i):\n    #     if i == n:\n    #         return 0\n    #     prices[i] + dp(min(2 * i + 2, n))\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min(dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1))\n    return dp[0]\nprint ( minimumCoins ( [ 4 , 9 , 1 , 100 , 2 , 50 , 3 , 3 , 80 , 2 , 60 , 1 , 1 , 40 , 2 ] ) )",
    "execution_output": 9
  },
  {
    "id": 1306,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    # @cache\n    # def dp(i):\n    #     if i == n:\n    #         return 0\n    #     prices[i] + dp(min(2 * i + 2, n))\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min(dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1))\n    return dp[0]\nprint ( minimumCoins ( [ 90 , 80 , 70 , 60 , 50 , 40 , 35 , 30 , 25 , 20 , 15 , 10 , 5 , 3 , 1 ] ) )",
    "execution_output": 196
  },
  {
    "id": 1307,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    # @cache\n    # def dp(i):\n    #     if i == n:\n    #         return 0\n    #     prices[i] + dp(min(2 * i + 2, n))\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min(dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1))\n    return dp[0]\nprint ( minimumCoins ( [ 10 , 1 , 10 , 1 , 10 , 1 , 10 , 1 , 10 , 1 , 10 , 1 , 10 , 1 , 10 , 1 , 10 , 1 ] ) )",
    "execution_output": 14
  },
  {
    "id": 1308,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    # @cache\n    # def dp(i):\n    #     if i == n:\n    #         return 0\n    #     prices[i] + dp(min(2 * i + 2, n))\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min(dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1))\n    return dp[0]\nprint ( minimumCoins ( [ 7 , 13 , 2 , 9 , 4 , 15 , 1 , 6 , 3 , 14 , 5 , 12 , 2 , 8 , 11 , 3 , 16 , 1 , 10 , 2 ] ) )",
    "execution_output": 12
  },
  {
    "id": 1309,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    # @cache\n    # def dp(i):\n    #     if i == n:\n    #         return 0\n    #     prices[i] + dp(min(2 * i + 2, n))\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min(dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1))\n    return dp[0]\nprint ( minimumCoins ( [ 50 , 50 , 1 , 50 , 50 , 50 , 1 , 50 , 50 , 50 , 50 , 50 , 50 , 50 , 1 , 50 , 50 , 50 ] ) )",
    "execution_output": 53
  },
  {
    "id": 1310,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums+=[float('inf')]\n    presum=[0]+list(accumulate(nums))\n\n    n, dp, prev, cur = len(nums)-1, Counter(), Counter(),0\n\n    for i in range(n):\n        i+=1\n        cur=max(cur,prev[i])\n        dp[i]=(i-cur-1) + dp[cur]\n        idx=bisect.bisect_left(presum,2*presum[i]-presum[cur])   \n        prev[idx]=i\n    return n-dp[n]\nprint ( findMaximumLength ( [ 3 , 1 , 4 , 1 , 5 , 9 , 2 , 6 , 5 , 3 , 5 ] ) )",
    "execution_output": 5
  },
  {
    "id": 1311,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums+=[float('inf')]\n    presum=[0]+list(accumulate(nums))\n\n    n, dp, prev, cur = len(nums)-1, Counter(), Counter(),0\n\n    for i in range(n):\n        i+=1\n        cur=max(cur,prev[i])\n        dp[i]=(i-cur-1) + dp[cur]\n        idx=bisect.bisect_left(presum,2*presum[i]-presum[cur])   \n        prev[idx]=i\n    return n-dp[n]\nprint ( findMaximumLength ( [ 10 , - 5 , 7 , - 3 , 8 , - 2 , 4 , - 1 , 6 ] ) )",
    "execution_output": 2
  },
  {
    "id": 1312,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums+=[float('inf')]\n    presum=[0]+list(accumulate(nums))\n\n    n, dp, prev, cur = len(nums)-1, Counter(), Counter(),0\n\n    for i in range(n):\n        i+=1\n        cur=max(cur,prev[i])\n        dp[i]=(i-cur-1) + dp[cur]\n        idx=bisect.bisect_left(presum,2*presum[i]-presum[cur])   \n        prev[idx]=i\n    return n-dp[n]\nprint ( findMaximumLength ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] ) )",
    "execution_output": 10
  },
  {
    "id": 1313,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums+=[float('inf')]\n    presum=[0]+list(accumulate(nums))\n\n    n, dp, prev, cur = len(nums)-1, Counter(), Counter(),0\n\n    for i in range(n):\n        i+=1\n        cur=max(cur,prev[i])\n        dp[i]=(i-cur-1) + dp[cur]\n        idx=bisect.bisect_left(presum,2*presum[i]-presum[cur])   \n        prev[idx]=i\n    return n-dp[n]\nprint ( findMaximumLength ( [ 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 ] ) )",
    "execution_output": 20
  },
  {
    "id": 1314,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums+=[float('inf')]\n    presum=[0]+list(accumulate(nums))\n\n    n, dp, prev, cur = len(nums)-1, Counter(), Counter(),0\n\n    for i in range(n):\n        i+=1\n        cur=max(cur,prev[i])\n        dp[i]=(i-cur-1) + dp[cur]\n        idx=bisect.bisect_left(presum,2*presum[i]-presum[cur])   \n        prev[idx]=i\n    return n-dp[n]\nprint ( findMaximumLength ( [ 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ] ) )",
    "execution_output": 6
  }
]