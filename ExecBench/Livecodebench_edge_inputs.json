[
  {
    "id": 0,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0] * n\n    curr = 0\n    for i, v in queries:\n        pv = arr[i]\n        if i + 1 < n and arr[i + 1] == v:\n            curr += 1\n        if i - 1 >= 0 and arr[i - 1] == v:\n            curr += 1\n        if i + 1 < n and arr[i + 1] == pv and pv:\n            curr -= 1\n        if i - 1 >= 0 and arr[i - 1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        res += [curr]\n    return res\nprint(colorTheArray(1, [[0, 3254323], [0, 234772], [0, 234772], [0, 3254323], [0, 1], [0, 1], [0, 234772], [0, 2], [0, 2], [0, 3]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 1,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0] * n\n    curr = 0\n    for i, v in queries:\n        pv = arr[i]\n        if i + 1 < n and arr[i + 1] == v:\n            curr += 1\n        if i - 1 >= 0 and arr[i - 1] == v:\n            curr += 1\n        if i + 1 < n and arr[i + 1] == pv and pv:\n            curr -= 1\n        if i - 1 >= 0 and arr[i - 1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        res += [curr]\n    return res\nprint(colorTheArray(2, [[0, 10], [1, 10], [1, 234772], [1, 10], [0, 3254323], [0, 10], [1, 10], [0, 10], [1, 10], [0, 234772]]))",
    "execution_output": [
      0,
      1,
      0,
      1,
      0,
      1,
      1,
      1,
      1,
      0
    ]
  },
  {
    "id": 2,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0] * n\n    curr = 0\n    for i, v in queries:\n        pv = arr[i]\n        if i + 1 < n and arr[i + 1] == v:\n            curr += 1\n        if i - 1 >= 0 and arr[i - 1] == v:\n            curr += 1\n        if i + 1 < n and arr[i + 1] == pv and pv:\n            curr -= 1\n        if i - 1 >= 0 and arr[i - 1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        res += [curr]\n    return res\nprint(colorTheArray(100, [[0, 234772], [1, 234772], [2, 234772], [3, 234772], [4, 234772], [5, 234772], [6, 234772], [7, 234772], [8, 234772], [9, 234772], [10, 234772], [11, 234772], [12, 234772], [13, 234772], [14, 234772], [15, 234772], [16, 234772], [17, 234772], [18, 234772], [19, 234772], [20, 234772], [21, 234772], [22, 234772], [23, 234772], [24, 234772], [25, 234772], [26, 234772], [27, 234772], [28, 234772], [29, 234772], [30, 234772], [31, 234772], [32, 234772], [33, 234772], [34, 234772], [35, 234772], [36, 234772], [37, 234772], [38, 234772], [39, 234772], [40, 234772], [41, 234772], [42, 234772], [43, 234772], [44, 234772], [45, 234772], [46, 234772], [47, 234772], [48, 234772], [49, 234772], [50, 234772], [51, 234772], [52, 234772], [53, 234772], [54, 234772], [55, 234772], [56, 234772], [57, 234772], [58, 234772], [59, 234772], [60, 234772], [61, 234772], [62, 234772], [63, 234772], [64, 234772], [65, 234772], [66, 234772], [67, 234772], [68, 234772], [69, 234772], [70, 234772], [71, 234772], [72, 234772], [73, 234772], [74, 234772], [75, 234772], [76, 234772], [77, 234772], [78, 234772], [79, 234772], [80, 234772], [81, 234772], [82, 234772], [83, 234772], [84, 234772], [85, 234772], [86, 234772], [87, 234772], [88, 234772], [89, 234772], [90, 234772], [91, 234772], [92, 234772], [93, 234772], [94, 234772], [95, 234772], [96, 234772], [97, 234772], [98, 234772], [99, 234772]]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99
    ]
  },
  {
    "id": 3,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0] * n\n    curr = 0\n    for i, v in queries:\n        pv = arr[i]\n        if i + 1 < n and arr[i + 1] == v:\n            curr += 1\n        if i - 1 >= 0 and arr[i - 1] == v:\n            curr += 1\n        if i + 1 < n and arr[i + 1] == pv and pv:\n            curr -= 1\n        if i - 1 >= 0 and arr[i - 1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        res += [curr]\n    return res\nprint(colorTheArray(100, []))",
    "execution_output": []
  },
  {
    "id": 4,
    "q_id": "sample_6",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    res = []\n    arr = [0] * n\n    curr = 0\n    for i, v in queries:\n        pv = arr[i]\n        if i + 1 < n and arr[i + 1] == v:\n            curr += 1\n        if i - 1 >= 0 and arr[i - 1] == v:\n            curr += 1\n        if i + 1 < n and arr[i + 1] == pv and pv:\n            curr -= 1\n        if i - 1 >= 0 and arr[i - 1] == pv and pv:\n            curr -= 1\n        arr[i] = v\n        res += [curr]\n    return res\nprint(colorTheArray(100, [[0, 3254323], [1, 3254323], [2, 3254323], [3, 3254323], [4, 3254323], [5, 3254323], [6, 3254323], [7, 3254323], [8, 3254323], [9, 3254323], [10, 3254323], [11, 3254323], [12, 3254323], [13, 3254323], [14, 3254323], [15, 3254323], [16, 3254323], [17, 3254323], [18, 3254323], [19, 3254323], [20, 3254323], [21, 3254323], [22, 3254323], [23, 3254323], [24, 3254323], [25, 3254323], [26, 3254323], [27, 3254323], [28, 3254323], [29, 3254323], [30, 3254323], [31, 3254323], [32, 3254323], [33, 3254323], [34, 3254323], [35, 3254323], [36, 3254323], [37, 3254323], [38, 3254323], [39, 3254323], [40, 3254323], [41, 3254323], [42, 3254323], [43, 3254323], [44, 3254323], [45, 3254323], [46, 3254323], [47, 3254323], [48, 3254323], [49, 234772], [50, 3254323], [51, 3254323], [52, 3254323], [53, 3254323], [54, 3254323], [55, 3254323], [56, 3254323], [57, 3254323], [58, 3254323], [59, 3254323], [60, 3254323], [61, 3254323], [62, 3254323], [63, 3254323], [64, 3254323], [65, 3254323], [66, 3254323], [67, 3254323], [68, 3254323], [69, 3254323], [70, 3254323], [71, 3254323], [72, 3254323], [73, 3254323], [74, 3254323], [75, 3254323], [76, 3254323], [77, 3254323], [78, 3254323], [79, 3254323], [80, 3254323], [81, 3254323], [82, 3254323], [83, 3254323], [84, 3254323], [85, 3254323], [86, 3254323], [87, 3254323], [88, 3254323], [89, 3254323], [90, 3254323], [91, 3254323], [92, 3254323], [93, 3254323], [94, 3254323], [95, 3254323], [96, 3254323], [97, 3254323], [98, 3254323], [99, 3254323], [49, 3254323]]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      48,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      99
    ]
  },
  {
    "id": 5,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret += 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret += 1\n        ans.append(ret)\n    return ans\nprint(colorTheArray(100, [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 1], [7, 1], [8, 1], [9, 1], [10, 1], [11, 1], [12, 1], [13, 1], [14, 1], [15, 1], [16, 1], [17, 1], [18, 1], [19, 1], [20, 1], [21, 1], [22, 1], [23, 1], [24, 1], [25, 1], [26, 1], [27, 1], [28, 1], [29, 1], [30, 1], [31, 1], [32, 1], [33, 1], [34, 1], [35, 1], [36, 1], [37, 1], [38, 1], [39, 1], [40, 1], [41, 1], [42, 1], [43, 1], [44, 1], [45, 1], [46, 1], [47, 1], [48, 1], [49, 1], [50, 1], [51, 1], [52, 1], [53, 1], [54, 1], [55, 1], [56, 1], [57, 1], [58, 1], [59, 1], [60, 1], [61, 1], [62, 1], [63, 1], [64, 1], [65, 1], [66, 1], [67, 1], [68, 1], [69, 1], [70, 1], [71, 1], [72, 1], [73, 1], [74, 1], [75, 1], [76, 1], [77, 1], [78, 1], [79, 1], [80, 1], [81, 1], [82, 1], [83, 1], [84, 1], [85, 1], [86, 1], [87, 1], [88, 1], [89, 1], [90, 1], [91, 1], [92, 1], [93, 1], [94, 1], [95, 1], [96, 1], [97, 1], [98, 1], [99, 1]]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99
    ]
  },
  {
    "id": 6,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret += 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret += 1\n        ans.append(ret)\n    return ans\nprint(colorTheArray(10, [[0, -999999999999], [9, -999999999999], [1, 0], [8, 0], [0, -999999999999], [9, 1234567890123], [8, 1234567890123], [7, 1234567890123], [6, 1234567890123], [5, 1234567890123], [4, 1234567890123], [3, 1234567890123], [2, 1234567890123], [1, 1234567890123], [0, 1234567890123]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ]
  },
  {
    "id": 7,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret += 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret += 1\n        ans.append(ret)\n    return ans\nprint(colorTheArray(50, []))",
    "execution_output": []
  },
  {
    "id": 8,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret += 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret += 1\n        ans.append(ret)\n    return ans\nprint(colorTheArray(1, [[0, 234772], [0, 0], [0, 3254323], [0, 3254323], [0, -3254323], [0, 234772]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 9,
    "q_id": "sample_7",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    ret = 0\n    a = [0] * n\n    ans = []\n    for x, y in queries:\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret -= 1\n        a[x] = y\n        if x > 0 and a[x - 1] == a[x] and (a[x] != 0):\n            ret += 1\n        if x < n - 1 and a[x + 1] == a[x] and (a[x] != 0):\n            ret += 1\n        ans.append(ret)\n    return ans\nprint(colorTheArray
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 10,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint(colorTheArray(1, [[0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323], [0, 234772], [0, 3254323]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 11,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint(colorTheArray(100, [[0, 3254323], [1, 3254323], [2, 3254323], [3, 3254323], [4, 3254323], [5, 3254323], [6, 3254323], [7, 3254323], [8, 3254323], [9, 3254323], [10, 3254323], [11, 3254323], [12, 3254323], [13, 3254323], [14, 3254323], [15, 3254323], [16, 3254323], [17, 3254323], [18, 3254323], [19, 3254323], [20, 3254323], [21, 3254323], [22, 3254323], [23, 3254323], [24, 3254323], [25, 3254323], [26, 3254323], [27, 3254323], [28, 3254323], [29, 3254323], [30, 3254323], [31, 3254323], [32, 3254323], [33, 3254323], [34, 3254323], [35, 3254323], [36, 3254323], [37, 3254323], [38, 3254323], [39, 3254323], [40, 3254323], [41, 3254323], [42, 3254323], [43, 3254323], [44, 3254323], [45, 3254323], [46, 3254323], [47, 3254323], [48, 3254323], [49, 3254323], [50, 3254323], [51, 3254323], [52, 3254323], [53, 3254323], [54, 3254323], [55, 3254323], [56, 3254323], [57, 3254323], [58, 3254323], [59, 3254323], [60, 3254323], [61, 3254323], [62, 3254323], [63, 3254323], [64, 3254323], [65, 3254323], [66, 3254323], [67, 3254323], [68, 3254323], [69, 3254323], [70, 3254323], [71, 3254323], [72, 3254323], [73, 3254323], [74, 3254323], [75, 3254323], [76, 3254323], [77, 3254323], [78, 3254323], [79, 3254323], [80, 3254323], [81, 3254323], [82, 3254323], [83, 3254323], [84, 3254323], [85, 3254323], [86, 3254323], [87, 3254323], [88, 3254323], [89, 3254323], [90, 3254323], [91, 3254323], [92, 3254323], [93, 3254323], [94, 3254323], [95, 3254323], [96, 3254323], [97, 3254323], [98, 3254323], [99, 3254323]]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99
    ]
  },
  {
    "id": 12,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint(colorTheArray(100, [[0, 234772], [1, 234772], [2, 234772], [3, 234772], [4, 234772], [5, 234772], [6, 234772], [7, 234772], [8, 234772], [9, 234772], [10, 234772], [11, 234772], [12, 234772], [13, 234772], [14, 234772], [15, 234772], [16, 234772], [17, 234772], [18, 234772], [19, 234772], [20, 234772], [21, 234772], [22, 234772], [23, 234772], [24, 234772], [25, 234772], [26, 234772], [27, 234772], [28, 234772], [29, 234772], [30, 234772], [31, 234772], [32, 234772], [33, 234772], [34, 234772], [35, 234772], [36, 234772], [37, 234772], [38, 234772], [39, 234772], [40, 234772], [41, 234772], [42, 234772], [43, 234772], [44, 234772], [45, 234772], [46, 234772], [47, 234772], [48, 234772], [49, 234772], [50, 234772], [51, 234772], [52, 234772], [53, 234772], [54, 234772], [55, 234772], [56, 234772], [57, 234772], [58, 234772], [59, 234772], [60, 234772], [61, 234772], [62, 234772], [63, 234772], [64, 234772], [65, 234772], [66, 234772], [67, 234772], [68, 234772], [69, 234772], [70, 234772], [71, 234772], [72, 234772], [73, 234772], [74, 234772], [75, 234772], [76, 234772], [77, 234772], [78, 234772], [79, 234772], [10, 999999937], [20, 999999937], [30, 999999937], [40, 999999937], [50, 999999937], [60, 999999937], [70, 999999937], [5, 999999937], [15, 999999937], [25, 999999937], [35, 999999937], [45, 999999937], [55, 999999937], [65, 999999937], [75, 999999937], [10, 234772], [30, 234772], [50, 234772], [70, 234772], [5, 234772]]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      77,
      75,
      73,
      71,
      69,
      67,
      65,
      63,
      61,
      59,
      57,
      55,
      53,
      51,
      49,
      51,
      53,
      55,
      57,
      59
    ]
  },
  {
    "id": 13,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint(colorTheArray(2, [[0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222], [0, 111111111], [1, 111111111], [1, 222222222], [0, 222222222]]))",
    "execution_output": [
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1
    ]
  },
  {
    "id": 14,
    "q_id": "sample_8",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    a = [0] * n\n    y = 0\n    ans = []\n    for i, c in queries:\n        y -= a[i] and (i > 0 and a[i] == a[i - 1]) + (i < n - 1 and a[i] == a[i + 1])\n        y += (i > 0 and c == a[i - 1]) + (i < n - 1 and c == a[i + 1])\n        a[i] = c\n        ans.append(y)\n    return ans\nprint(colorTheArray(50, []))",
    "execution_output": []
  },
  {
    "id": 15,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint(colorTheArray(1, [[0, 0], [0, 234772], [0, 234772], [0, 0], [0, 3254323], [0, 3254323], [0, 1], [0, 0]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 16,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint(colorTheArray(100, [[0, 234772], [1, 234772], [2, 234772], [3, 234772], [4, 234772], [5, 234772], [6, 234772], [7, 234772], [8, 234772], [9, 234772], [10, 234772], [11, 234772], [12, 234772], [13, 234772], [14, 234772], [15, 234772], [16, 234772], [17, 234772], [18, 234772], [19, 234772], [20, 234772], [21, 234772], [22, 234772], [23, 234772], [24, 234772], [25, 234772], [26, 234772], [27, 234772], [28, 234772], [29, 234772], [30, 234772], [31, 234772], [32, 234772], [33, 234772], [34, 234772], [35, 234772], [36, 234772], [37, 234772], [38, 234772], [39, 234772], [40, 234772], [41, 234772], [42, 234772], [43, 234772], [44, 234772], [45, 234772], [46, 234772], [47, 234772], [48, 234772], [49, 234772], [50, 234772], [51, 234772], [52, 234772], [53, 234772], [54, 234772], [55, 234772], [56, 234772], [57, 234772], [58, 234772], [59, 234772], [60, 234772], [61, 234772], [62, 234772], [63, 234772], [64, 234772], [65, 234772], [66, 234772], [67, 234772], [68, 234772], [69, 234772], [70, 234772], [71, 234772], [72, 234772], [73, 234772], [74, 234772], [75, 234772], [76, 234772], [77, 234772], [78, 234772], [79, 234772], [80, 234772], [81, 234772], [82, 234772], [83, 234772], [84, 234772], [85, 234772], [86, 234772], [87, 234772], [88, 234772], [89, 234772], [90, 234772], [91, 234772], [92, 234772], [93, 234772], [94, 234772], [95, 234772], [96, 234772], [97, 234772], [98, 234772], [99, 234772]]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99
    ]
  },
  {
    "id": 17,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint(colorTheArray(100, [[0, 234772], [1, 3254323], [2, 234772], [3, 3254323], [4, 234772], [5, 3254323], [6, 234772], [7, 3254323], [8, 234772], [9, 3254323], [10, 234772], [11, 3254323], [12, 234772], [13, 3254323], [14, 234772], [15, 3254323], [16, 234772], [17, 3254323], [18, 234772], [19, 3254323], [20, 234772], [21, 3254323], [22, 234772], [23, 3254323], [24, 234772], [25, 3254323], [26, 234772], [27, 3254323], [28, 234772], [29, 3254323], [30, 234772], [31, 3254323], [32, 234772], [33, 3254323], [34, 234772], [35, 3254323], [36, 234772], [37, 3254323], [38, 234772], [39, 3254323], [40, 234772], [41, 3254323], [42, 234772], [43, 3254323], [44, 234772], [45, 3254323], [46, 234772], [47, 3254323], [48, 234772], [49, 3254323], [50, 234772], [51, 3254323], [52, 234772], [53, 3254323], [54, 234772], [55, 3254323], [56, 234772], [57, 3254323], [58, 234772], [59, 3254323], [60, 234772], [61, 3254323], [62, 234772], [63, 3254323], [64, 234772], [65, 3254323], [66, 234772], [67, 3254323], [68, 234772], [69, 3254323], [70, 234772], [71, 3254323], [72, 234772], [73, 3254323], [74, 234772], [75, 3254323], [76, 234772], [77, 3254323], [78, 234772], [79, 3254323], [80, 234772], [81, 3254323], [82, 234772], [83, 3254323], [84, 234772], [85, 3254323], [86, 234772], [87, 3254323], [88, 234772], [89, 3254323], [90, 234772], [91, 3254323], [92, 234772], [93, 3254323], [94, 234772], [95, 3254323], [96, 234772], [97, 3254323], [98, 234772], [99, 3254323]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 18,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint(colorTheArray(10, [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0], [4, 234772], [5, 234772], [6, 234772], [4, 0], [5, 0], [6, 0], [3, 3254323], [6, 3254323], [3, 0], [6, 0], [2, 234772], [2, 0], [7, 234772], [7, 0]]))",
    "execution_output": [
      1,
      3,
      5,
      7,
      9,
      11,
      13,
      15,
      17,
      18,
      18,
      19,
      20,
      20,
      20,
      22,
      22,
      22,
      24,
      26,
      26,
      28,
      28,
      30
    ]
  },
  {
    "id": 19,
    "q_id": "sample_9",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    c = [0] * n\n    ans = 0\n    res = []\n    for i, x in queries:\n        if c[i]:\n            if i:\n                ans -= c[i] == c[i - 1]\n            if i + 1 < n:\n                ans -= c[i] == c[i + 1]\n        c[i] = x\n        if i:\n            ans += c[i] == c[i - 1]\n        if i + 1 < n:\n            ans += c[i] == c[i + 1]\n        res.append(ans)\n    return res\nprint(colorTheArray(100, [[0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772], [0, 3254323], [99, 234772], [99, 3254323], [0, 234772]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 20,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res -= 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res += 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res += 1\n        ans.append(res)\n    return ans\nprint(colorTheArray(1, [[0, 234772], [0, 0], [0, -5], [0, 3254323], [0, 1]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 21,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res -= 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res += 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res += 1\n        ans.append(res)\n    return ans\nprint(colorTheArray(100, [[0, 234772], [1, 234772], [2, 234772], [3, 234772], [4, 234772], [5, 234772], [6, 234772], [7, 234772], [8, 234772], [9, 234772], [10, 234772], [11, 234772], [12, 234772], [13, 234772], [14, 234772], [15, 234772], [16, 234772], [17, 234772], [18, 234772], [19, 234772], [20, 234772], [21, 234772], [22, 234772], [23, 234772], [24, 234772], [25, 234772], [26, 234772], [27, 234772], [28, 234772], [29, 234772], [30, 234772], [31, 234772], [32, 234772], [33, 234772], [34, 234772], [35, 234772], [36, 234772], [37, 234772], [38, 234772], [39, 234772], [40, 234772], [41, 234772], [42, 234772], [43, 234772], [44, 234772], [45, 234772], [46, 234772], [47, 234772], [48, 234772], [49, 234772], [50, 234772], [51, 234772], [52, 234772], [53, 234772], [54, 234772], [55, 234772], [56, 234772], [57, 234772], [58, 234772], [59, 234772], [60, 234772], [61, 234772], [62, 234772], [63, 234772], [64, 234772], [65, 234772], [66, 234772], [67, 234772], [68, 234772], [69, 234772], [70, 234772], [71, 234772], [72, 234772], [73, 234772], [74, 234772], [75, 234772], [76, 234772], [77, 234772], [78, 234772], [79, 234772], [80, 234772], [81, 234772], [82, 234772], [83, 234772], [84, 234772], [85, 234772], [86, 234772], [87, 234772], [88, 234772], [89, 234772], [90, 234772], [91, 234772], [92, 234772], [93, 234772], [94, 234772], [95, 234772], [96, 234772], [97, 234772], [98, 234772], [99, 234772]]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99
    ]
  },
  {
    "id": 22,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res -= 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res += 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res += 1\n        ans.append(res)\n    return ans\nprint(colorTheArray(10, [[0, 0], [1, 0], [2, -1], [3, 234772], [2, 234772], [1, 234772], [0, 234772], [4, 0], [3, 0], [2, 0]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      1,
      2,
      3,
      3,
      2,
      1
    ]
  },
  {
    "id": 23,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res -= 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res += 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res += 1\n        ans.append(res)\n    return ans\nprint(colorTheArray(100, [[0, 1], [99, 1], [0, 0], [99, 0], [0, 3254323], [99, 3254323], [1, 3254323], [98, 3254323]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      2
    ]
  },
  {
    "id": 24,
    "q_id": "sample_10",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    colors = [0] * n\n    ans = []\n    res = 0\n    for i, c in queries:\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res -= 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res -= 1\n        colors[i] = c\n        if i and colors[i] == colors[i - 1] and (colors[i] > 0):\n            res += 1\n        if i < n - 1 and colors[i] == colors[i + 1] and (colors[i] > 0):\n            res += 1\n        ans.append(res)\n    return ans\nprint(colorTheArray(100, []))",
    "execution_output": []
  },
  {
    "id": 25,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i - 1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i + 1] and color[i] != 0:\n            ans -= 1\n        color[i] = x\n        if color[i] == color[i - 1]:\n            ans += 1\n        if color[i] == color[i + 1]:\n            ans += 1\n        out.append(ans)\n    return out\nprint(colorTheArray(101, [[1, 3254323], [2, 3254323], [3, 3254323], [4, 3254323], [5, 3254323], [6, 3254323], [7, 3254323], [8, 3254323], [9, 3254323], [10, 3254323], [11, 3254323], [12, 3254323], [13, 3254323], [14, 3254323], [15, 3254323], [16, 3254323], [17, 3254323], [18, 3254323], [19, 3254323], [20, 3254323], [21, 3254323], [22, 3254323], [23, 3254323], [24, 3254323], [25, 3254323], [26, 3254323], [27, 3254323], [28, 3254323], [29, 3254323], [30, 3254323], [31, 3254323], [32, 3254323], [33, 3254323], [34, 3254323], [35, 3254323], [36, 3254323], [37, 3254323], [38, 3254323], [39, 3254323], [40, 3254323], [41, 3254323], [42, 3254323], [43, 3254323], [44, 3254323], [45, 3254323], [46, 3254323], [47, 3254323], [48, 3254323], [49, 3254323], [50, 3254323], [51, 3254323], [52, 3254323], [53, 3254323], [54, 3254323], [55, 3254323], [56, 3254323], [57, 3254323], [58, 3254323], [59, 3254323], [60, 3254323], [61, 3254323], [62, 3254323], [63, 3254323], [64, 3254323], [65, 3254323], [66, 3254323], [67, 3254323], [68, 3254323], [69, 3254323], [70, 3254323], [71, 3254323], [72, 3254323], [73, 3254323], [74, 3254323], [75, 3254323], [76, 3254323], [77, 3254323], [78, 3254323], [79, 3254323], [80, 3254323], [81, 3254323], [82, 3254323], [83, 3254323], [84, 3254323], [85, 3254323], [86, 3254323], [87, 3254323], [88, 3254323], [89, 3254323], [90, 3254323], [91, 3254323], [92, 3254323], [93, 3254323], [94, 3254323], [95, 3254323], [96, 3254323], [97, 3254323], [98, 3254323], [99, 3254323], [100, 3254323]]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99
    ]
  },
  {
    "id": 26,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i - 1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i + 1] and color[i] != 0:\n            ans -= 1\n        color[i] = x\n        if color[i] == color[i - 1]:\n            ans += 1\n        if color[i] == color[i + 1]:\n            ans += 1\n        out.append(ans)\n    return out\nprint(colorTheArray(101, [[1, 3254323], [2, 234772], [3, 3254323], [4, 234772], [5, 3254323], [6, 234772], [7, 3254323], [8, 234772], [9, 3254323], [10, 234772], [11, 3254323], [12, 234772], [13, 3254323], [14, 234772], [15, 3254323], [16, 234772], [17, 3254323], [18, 234772], [19, 3254323], [20, 234772], [21, 3254323], [22, 234772], [23, 3254323], [24, 234772], [25, 3254323], [26, 234772], [27, 3254323], [28, 234772], [29, 3254323], [30, 234772], [31, 3254323], [32, 234772], [33, 3254323], [34, 234772], [35, 3254323], [36, 234772], [37, 3254323], [38, 234772], [39, 3254323], [40, 234772], [41, 3254323], [42, 234772], [43, 3254323], [44, 234772], [45, 3254323], [46, 234772], [47, 3254323], [48, 234772], [49, 3254323], [50, 234772], [51, 3254323], [52, 234772], [53, 3254323], [54, 234772], [55, 3254323], [56, 234772], [57, 3254323], [58, 234772], [59, 3254323], [60, 234772], [61, 3254323], [62, 234772], [63, 3254323], [64, 234772], [65, 3254323], [66, 234772], [67, 3254323], [68, 234772], [69, 3254323], [70, 234772], [71, 3254323], [72, 234772], [73, 3254323], [74, 234772], [75, 3254323], [76, 234772], [77, 3254323], [78, 234772], [79, 3254323], [80, 234772], [81, 3254323], [82, 234772], [83, 3254323], [84, 234772], [85, 3254323], [86, 234772], [87, 3254323], [88, 234772], [89, 3254323], [90, 234772], [91, 3254323], [92, 234772], [93, 3254323], [94, 234772], [95, 3254323], [96, 234772], [97, 3254323], [98, 234772], [99, 3254323], [100, 234772]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 27,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i - 1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i + 1] and color[i] != 0:\n            ans -= 1\n        color[i] = x\n        if color[i] == color[i - 1]:\n            ans += 1\n        if color[i] == color[i + 1]:\n            ans += 1\n        out.append(ans)\n    return out\nprint(colorTheArray(101, [[50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0], [50, 3254323], [50, 234772], [50, -999999999], [50, 0]]))",
    "execution_output": [
      0,
      0,
      0,
      2,
      2,
      2,
      2,
      4,
      4,
      4,
      4,
      6,
      6,
      6,
      6,
      8,
      8,
      8,
      8,
      10,
      10,
      10,
      10,
      12,
      12,
      12,
      12,
      14,
      14,
      14,
      14,
      16,
      16,
      16,
      16,
      18,
      18,
      18,
      18,
      20,
      20,
      20,
      20,
      22,
      22,
      22,
      22,
      24,
      24,
      24,
      24,
      26,
      26,
      26,
      26,
      28,
      28,
      28,
      28,
      30,
      30,
      30,
      30,
      32,
      32,
      32,
      32,
      34,
      34,
      34,
      34,
      36,
      36,
      36,
      36,
      38,
      38,
      38,
      38,
      40,
      40,
      40,
      40,
      42,
      42,
      42,
      42,
      44,
      44,
      44,
      44,
      46,
      46,
      46,
      46,
      48,
      48,
      48,
      48,
      50
    ]
  },
  {
    "id": 28,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i - 1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i + 1] and color[i] != 0:\n            ans -= 1\n        color[i] = x\n        if color[i] == color[i - 1]:\n            ans += 1\n        if color[i] == color[i + 1]:\n            ans += 1\n        out.append(ans)\n    return out\nprint(colorTheArray(101, [[1, -234772], [2, -234772], [3, -234772], [4, -234772], [5, -234772], [6, -234772], [7, -234772], [8, -234772], [9, -234772], [10, -234772], [11, -234772], [12, -234772], [13, -234772], [14, -234772], [15, -234772], [16, -234772], [17, -234772], [18, -234772], [19, -234772], [20, -234772], [21, -234772], [22, -234772], [23, -234772], [24, -234772], [25, -234772], [26, -234772], [27, -234772], [28, -234772], [29, -234772], [30, -234772], [31, -234772], [32, -234772], [33, -234772], [34, -234772], [35, -234772], [36, -234772], [37, -234772], [38, -234772], [39, -234772], [40, -234772], [41, -234772], [42, -234772], [43, -234772], [44, -234772], [45, -234772], [46, -234772], [47, -234772], [48, -234772], [49, -234772], [50, -234772], [51, -234772], [52, -234772], [53, -234772], [54, -234772], [55, -234772], [56, -234772], [57, -234772], [58, -234772], [59, -234772], [60, -234772], [61, -234772], [62, -234772], [63, -234772], [64, -234772], [65, -234772], [66, -234772], [67, -234772], [68, -234772], [69, -234772], [70, -234772], [71, -234772], [72, -234772], [73, -234772], [74, -234772], [75, -234772], [76, -234772], [77, -234772], [78, -234772], [79, -234772], [80, -234772], [81, -234772], [82, -234772], [83, -234772], [84, -234772], [85, -234772], [86, -234772], [87, -234772], [88, -234772], [89, -234772], [90, -234772], [91, -234772], [92, -234772], [93, -234772], [94, -234772], [95, -234772], [96, -234772], [97, -234772], [98, -234772], [99, -234772], [100, -234772]]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99
    ]
  },
  {
    "id": 29,
    "q_id": "sample_11",
    "code": "def colorTheArray(n: int, queries: List[List[int]]) -> List[int]:\n    color = [0] * (n + 1)\n    ans = 0\n    out = []\n    for i, x in queries:\n        if color[i] == color[i - 1] and color[i] != 0:\n            ans -= 1\n        if color[i] == color[i + 1] and color[i] != 0:\n            ans -= 1\n        color[i] = x\n        if color[i] == color[i - 1]:\n            ans += 1\n        if color[i] == color[i + 1]:\n            ans += 1\n        out.append(ans)\n    return out\nprint(colorTheArray(101, [[1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772], [1, 3254323], [100, 3254323], [1, 234772], [100, 234772]]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 30,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == last:\n        return True\n    last = 1\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == 1 ^ last:\n        return True\n    return False\nprint(doesValidArrayExist([3254323]))",
    "execution_output": false
  },
  {
    "id": 31,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == last:\n        return True\n    last = 1\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == 1 ^ last:\n        return True\n    return False\nprint(doesValidArrayExist([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": true
  },
  {
    "id": 32,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == last:\n        return True\n    last = 1\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == 1 ^ last:\n        return True\n    return False\nprint(doesValidArrayExist([234772, 234772, 3254323, 3254323, 123456789, 123456789, 987654321, 987654321, 42, 42, 2024, 2024, 65535, 65535, 1048576, 1048576, 999999, 999999, 1, 1, 0, 0, 73, 73, 314159, 314159, 271828, 271828, 444444, 444444, 555555, 555555, 666666, 666666, 777777, 777777, 888888, 888888, 999998, 999998, 222222, 222222, 333333, 333333, 444445, 444445, 555556, 555556, 666667, 666667, 777778, 777778, 888889, 888889, 999999999, 999999999, 1000000000, 1000000000, 2147483647, 2147483647, 2147483646, 2147483646, 12345, 12345, 54321, 54321, 24680, 24680, 13579, 13579, 808080, 808080, 909090, 909090, 112233, 112233, 332211, 332211, 101010, 101010, 202020, 202020, 303030, 303030, 404040, 404040, 505050, 505050, 606060, 606060, 707070, 707070, 808081, 808081, 909091, 909091, 111111111, 111111111, 222222222, 222222222]))",
    "execution_output": true
  },
  {
    "id": 33,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == last:\n        return True\n    last = 1\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == 1 ^ last:\n        return True\n    return False\nprint(doesValidArrayExist([234772, 234772, 3254323, 3254323, 123456789, 123456789, 987654321, 987654321, 42, 42, 2024, 2024, 65535, 65535, 1048576, 1048576, 999999, 999999, 1, 1, 0, 0, 73, 73, 314159, 314159, 271828, 271828, 444444, 444444, 555555, 555555, 666666, 666666, 777777, 777777, 888888, 888888, 999998, 999998, 222222, 222222, 333333, 333333, 444445, 444445, 555556, 555556, 666667, 666667, 777778, 777778, 888889, 888889, 999999999, 999999999, 1000000000, 1000000000, 2147483647, 2147483647, 2147483646, 2147483646, 12345, 12345, 54321, 54321, 24680, 24680, 13579, 13579, 808080, 808080, 909090, 909090, 112233, 112233, 332211, 332211, 101010, 101010, 202020, 202020, 303030, 303030, 404040, 404040, 505050, 505050, 606060, 606060, 707070, 707070, 808081, 808081, 909091, 909091, 111111111, 111111111, 1357913579, 246802468]))",
    "execution_output": false
  },
  {
    "id": 34,
    "q_id": "sample_12",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    last = 0\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == last:\n        return True\n    last = 1\n    for i in range(n - 1):\n        last = derived[i] ^ last\n    if derived[n - 1] == 1 ^ last:\n        return True\n    return False\nprint(doesValidArrayExist([-1, -1, -234772, -234772, -3254323, -3254323, -123456789, -123456789, -987654321, -987654321, -42, -42, -2024, -2024, -65535, -65535, -1048576, -1048576, -999999, -999999, -73, -73, -314159, -314159, -271828, -271828, 888889, 888889, 999999999, 999999999, 1000000000, 1000000000, 2147483647, 2147483647, 2147483646, 2147483646, 12345, 12345, 54321, 54321, 24680, 24680, 13579, 13579, 808080, 808080, 909090, 909090, 112233, 112233]))",
    "execution_output": true
  },
  {
    "id": 35,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint(doesValidArrayExist([]))",
    "execution_output": true
  },
  {
    "id": 36,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint(doesValidArrayExist([0]))",
    "execution_output": true
  },
  {
    "id": 37,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint(doesValidArrayExist([3254323]))",
    "execution_output": false
  },
  {
    "id": 38,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint(doesValidArrayExist([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": true
  },
  {
    "id": 39,
    "q_id": "sample_13",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    original = [True]\n    for i in derived:\n        if i == 0:\n            original.append(original[-1])\n        else:\n            original.append(not original[-1])\n    return original[0] == original[-1]\nprint(doesValidArrayExist
    "execution_output": true
  },
  {
    "id": 40,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0] * n\n    for x in [0, 1]:\n        ans = [0] * n\n        ans[-1] = x\n        for i in range(n - 2, -1, -1):\n            ans[i] = ans[i + 1] ^ derived[i]\n        if ans[n - 1] ^ ans[0] == derived[n - 1]:\n            return True\n    return False\nprint(doesValidArrayExist([0]))",
    "execution_output": true
  },
  {
    "id": 41,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0] * n\n    for x in [0, 1]:\n        ans = [0] * n\n        ans[-1] = x\n        for i in range(n - 2, -1, -1):\n            ans[i] = ans[i + 1] ^ derived[i]\n        if ans[n - 1] ^ ans[0] == derived[n - 1]:\n            return True\n    return False\nprint(doesValidArrayExist([1]))",
    "execution_output": false
  },
  {
    "id": 42,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0] * n\n    for x in [0, 1]:\n        ans = [0] * n\n        ans[-1] = x\n        for i in range(n - 2, -1, -1):\n            ans[i] = ans[i + 1] ^ derived[i]\n        if ans[n - 1] ^ ans[0] == derived[n - 1]:\n            return True\n    return False\nprint(doesValidArrayExist([3254323, 3254323, 3254323, 3254323, 234772, 234772, 234772, 234772, 999999937, 999999937, 999999937, 999999937, 123456789, 123456789, 123456789, 123456789, 987654321, 987654321, 987654321, 987654321, 4294967295, 4294967295, 4294967295, 4294967295, 1099511627776, 1099511627776, 1099511627776, 1099511627776, 281474976710656, 281474976710656, 281474976710656, 281474976710656, 1152921504606846976, 1152921504606846976, 1152921504606846976, 1152921504606846976, 1000000000000000007, 1000000000000000007, 1000000000000000007, 1000000000000000007, 805306368, 805306368, 805306368, 805306368, 67108864, 67108864, 67108864, 67108864, 536870912, 536870912, 536870912, 536870912, 268435456, 268435456, 268435456, 268435456, 134217728, 134217728, 134217728, 134217728, 2147483647, 2147483647, 2147483647, 2147483647, 8589934592, 8589934592, 8589934592, 8589934592, 34359738368, 34359738368, 34359738368, 34359738368, 137438953472, 137438953472, 137438953472, 137438953472, 549755813888, 549755813888, 549755813888, 549755813888, 2199023255552, 2199023255552, 2199023255552, 2199023255552, 8796093022208, 8796093022208, 8796093022208, 8796093022208, 35184372088832, 35184372088832, 35184372088832, 35184372088832, 140737488355328, 140737488355328, 140737488355328, 140737488355328, 562949953421312, 562949953421312, 562949953421312, 562949953421312]))",
    "execution_output": true
  },
  {
    "id": 43,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0] * n\n    for x in [0, 1]:\n        ans = [0] * n\n        ans[-1] = x\n        for i in range(n - 2, -1, -1):\n            ans[i] = ans[i + 1] ^ derived[i]\n        if ans[n - 1] ^ ans[0] == derived[n - 1]:\n            return True\n    return False\nprint(doesValidArrayExist([3254323, 3254323, 3254323, 3254323, 234772, 234772, 234772, 234772, 999999937, 999999937, 999999937, 999999937, 123456789, 123456789, 123456789, 123456789, 987654321, 987654321, 987654321, 987654321, 4294967295, 4294967295, 4294967295, 4294967295, 1099511627776, 1099511627776, 1099511627776, 1099511627776, 281474976710656, 281474976710656, 281474976710656, 281474976710656, 1152921504606846976, 1152921504606846976, 1152921504606846976, 1152921504606846976, 1000000000000000007, 1000000000000000007, 1000000000000000007, 1000000000000000007, 805306368, 805306368, 805306368, 805306368, 67108864, 67108864, 67108864, 67108864, 536870912, 536870912, 536870912, 536870912, 268435456, 268435456, 268435456, 268435456, 134217728, 134217728, 134217728, 134217728, 2147483647, 2147483647, 2147483647, 2147483647, 8589934592, 8589934592, 8589934592, 8589934592, 34359738368, 34359738368, 34359738368, 34359738368, 137438953472, 137438953472, 137438953472, 137438953472, 549755813888, 549755813888, 549755813888, 549755813888, 2199023255552, 2199023255552, 2199023255552, 2199023255552, 8796093022208, 8796093022208, 8796093022208, 8796093022208, 35184372088832, 35184372088832, 35184372088832, 35184372088832, 140737488355328, 140737488355328, 140737488355328, 140737488355328, 562949953421312, 562949953421312, 562949953421312, 1]))",
    "execution_output": false
  },
  {
    "id": 44,
    "q_id": "sample_14",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    ans = [0] * n\n    for x in [0, 1]:\n        ans = [0] * n\n        ans[-1] = x\n        for i in range(n - 2, -1, -1):\n            ans[i] = ans[i + 1] ^ derived[i]\n        if ans[n - 1] ^ ans[0] == derived[n - 1]:\n            return True\n    return False\nprint(doesValidArrayExist([-1, -1, -2, -2, -9223372036854775808, -9223372036854775808, 18446744073709551615, 18446744073709551615]))",
    "execution_output": true
  },
  {
    "id": 45,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0:\n        return True\n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1:\n        return True\n    return False\nprint(doesValidArrayExist([]))",
    "execution_output": true
  },
  {
    "id": 46,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0:\n        return True\n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1:\n        return True\n    return False\nprint(doesValidArrayExist([0]))",
    "execution_output": true
  },
  {
    "id": 47,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0:\n        return True\n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1:\n        return True\n    return False\nprint(doesValidArrayExist([3254323]))",
    "execution_output": false
  },
  {
    "id": 48,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0:\n        return True\n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1:\n        return True\n    return False\nprint(doesValidArrayExist([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50]))",
    "execution_output": true
  },
  {
    "id": 49,
    "q_id": "sample_15",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    v = 0\n    for c in derived:\n        v ^= c\n    if v == 0:\n        return True\n    v = 1\n    for c in derived:\n        v ^= c\n    if v == 1:\n        return True\n    return False\nprint(doesValidArrayExist([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 234772, 3254323]))",
    "execution_output": false
  },
  {
    "id": 50,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint(doesValidArrayExist([]))",
    "execution_output": null
  },
  {
    "id": 51,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint(doesValidArrayExist([0]))",
    "execution_output": true
  },
  {
    "id": 52,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint(doesValidArrayExist([3254323]))",
    "execution_output": false
  },
  {
    "id": 53,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint(doesValidArrayExist([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]))",
    "execution_output": true
  },
  {
    "id": 54,
    "q_id": "sample_16",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    curr = 0\n    for i in range(len(derived)):\n        if i == len(derived) - 1:\n            return curr == 0 if derived[i] == 0 else curr == 1\n        if derived[i] == 1:\n            curr = 0 if curr == 1 else 1\nprint(doesValidArrayExist([1, 0, 2, -3, 234772, '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789', float('nan'), float('inf'), -float('inf'), 0, 1.0, None, 234772]))",
    "execution_output": false
  },
  {
    "id": 55,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint(doesValidArrayExist([0]))",
    "execution_output": true
  },
  {
    "id": 56,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint(doesValidArrayExist([3254323]))",
    "execution_output": false
  },
  {
    "id": 57,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint(doesValidArrayExist([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]))",
    "execution_output": true
  },
  {
    "id": 58,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint(doesValidArrayExist([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [0]))",
    "execution_output": false
  },
  {
    "id": 59,
    "q_id": "sample_17",
    "code": "def doesValidArrayExist(derived: List[int]) -> bool:\n    n = len(derived)\n    if n == 1:\n        return derived[0] == 0\n    ans = 0\n    for i in range(n - 1):\n        ans ^= derived[i]\n    return ans == derived[-1]\nprint(doesValidArrayExist([-987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321, -987654321] + [1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455, 1122334455] + [234772, 3254323, 234772, 0]))",
    "execution_output": false
  },
  {
    "id": 60,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost(''))",
    "execution_output": 0
  },
  {
    "id": 61,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost('0'))",
    "execution_output": 0
  },
  {
    "id": 62,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost('0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101'))",
    "execution_output": 2500
  },
  {
    "id": 63,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'))",
    "execution_output": 0
  },
  {
    "id": 64,
    "q_id": "sample_36",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i - 1] != s[i]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost('0000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111'))",
    "execution_output": 50
  },
  {
    "id": 65,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min((l[i] + r[n - 1 - i] for i in range(n)))\n    return ans\nprint(minimumCost('a'))",
    "execution_output": 0
  },
  {
    "id": 66,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min((l[i] + r[n - 1 - i] for i in range(n)))\n    return ans\nprint(minimumCost('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv'))",
    "execution_output": 2500
  },
  {
    "id": 67,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min((l[i] + r[n - 1 - i] for i in range(n)))\n    return ans\nprint(minimumCost('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))",
    "execution_output": 2500
  },
  {
    "id": 68,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min((l[i] + r[n - 1 - i] for i in range(n)))\n    return ans\nprint(minimumCost('!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()'))",
    "execution_output": 2500
  },
  {
    "id": 69,
    "q_id": "sample_37",
    "code": "def solve(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1]\n        else:\n            dp[i] = dp[i - 1] + i\n    return dp\n\ndef minimumCost(s: str) -> int:\n    l = solve(s)\n    r = solve(s[::-1])\n    n = len(s)\n    ans = min((l[i] + r[n - 1 - i] for i in range(n)))\n    return ans\nprint(minimumCost('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 50
  },
  {
    "id": 70,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min((x + y for x, y in zip(left, right)))\nprint(minimumCost('z'))",
    "execution_output": 0
  },
  {
    "id": 71,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min((x + y for x, y in zip(left, right)))\nprint(minimumCost('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 0
  },
  {
    "id": 72,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min((x + y for x, y in zip(left, right)))\nprint(minimumCost('0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101'))",
    "execution_output": 2500
  },
  {
    "id": 73,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min((x + y for x, y in zip(left, right)))\nprint(minimumCost('0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'))",
    "execution_output": 2500
  },
  {
    "id": 74,
    "q_id": "sample_38",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    left = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        left[i] = tmp\n    s = s[::-1]\n    right = [0] * n\n    tmp = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            tmp += i\n        right[i] = tmp\n    right.reverse()\n    return min((x + y for x, y in zip(left, right)))\nprint(minimumCost('😀😃😄😁😆😅😂🤣😊🙂😀😃😄😁😆😅😂🤣😊🙂😀😃😄😁😆😅😂🤣😊🙂😀😃😄😁😆😅😂🤣😊🙂😀😃😄😁😆😅😂🤣😊🙂😀😃😄😁😆😅😂🤣😊🙂😀😃😄😁😆😅😂🤣😊🙂😀😃😄😁😆😅😂🤣😊🙂😀😃😄😁😆😅😂🤣😊🙂😀😃😄😁😆😅😂🤣😊🙂'))",
    "execution_output": 2500
  },
  {
    "id": 75,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost(''))",
    "execution_output": 0
  },
  {
    "id": 76,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost('a'))",
    "execution_output": 0
  },
  {
    "id": 77,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 0
  },
  {
    "id": 78,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost('0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101'))",
    "execution_output": 2500
  },
  {
    "id": 79,
    "q_id": "sample_39",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            ans += min(i, len(s) - i)\n    return ans\nprint(minimumCost('😀😃😄😁😆😅😂🤣😊😇—“”‘’áéíóúÄÖÜß漢字!@#$%^&*()'))",
    "execution_output": 324
  },
  {
    "id": 80,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint(minimumCost(''))",
    "execution_output": 0
  },
  {
    "id": 81,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint(minimumCost('a'))",
    "execution_output": 0
  },
  {
    "id": 82,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint(minimumCost('                                                                                                    '))",
    "execution_output": 0
  },
  {
    "id": 83,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint(minimumCost('0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101'))",
    "execution_output": 2500
  },
  {
    "id": 84,
    "q_id": "sample_40",
    "code": "def minimumCost(s: str) -> int:\n    ans = 0\n    n = len(s)\n    for i in range(1, n):\n        if s[i - 1] != s[i]:\n            ans += min(i, n - i)\n    return ans\nprint(minimumCost('😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃'))",
    "execution_output": 2500
  },
  {
    "id": 85,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            r += min(i + 1, n - 1 - i)\n    return r\nprint(minimumCost(''))",
    "execution_output": 0
  },
  {
    "id": 86,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            r += min(i + 1, n - 1 - i)\n    return r\nprint(minimumCost('a'))",
    "execution_output": 0
  },
  {
    "id": 87,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            r += min(i + 1, n - 1 - i)\n    return r\nprint(minimumCost('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": 0
  },
  {
    "id": 88,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            r += min(i + 1, n - 1 - i)\n    return r\nprint(minimumCost('0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101'))",
    "execution_output": 2500
  },
  {
    "id": 89,
    "q_id": "sample_41",
    "code": "def minimumCost(s: str) -> int:\n    n = len(s)\n    r = 0\n    for i in range(n - 1):\n        if s[i] != s[i + 1]:\n            r += min(i + 1, n - 1 - i)\n    return r\nprint(minimumCost('                                                                                                    '))",
    "execution_output": 0
  },
  {
    "id": 90,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a' * len(s):\n        return 'a' * (len(s) - 1) + 'z'\n    r = ''\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == 'a':\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i) - 1)\n        elif p == 0:\n            if i == 'a':\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i) - 1)\n        else:\n            r += i\n    return r\nprint(smallestString(''))",
    "execution_output": "z"
  },
  {
    "id": 91,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a' * len(s):\n        return 'a' * (len(s) - 1) + 'z'\n    r = ''\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == 'a':\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i) - 1)\n        elif p == 0:\n            if i == 'a':\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i) - 1)\n        else:\n            r += i\n    return r\nprint(smallestString('a'))",
    "execution_output": "z"
  },
  {
    "id": 92,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a' * len(s):\n        return 'a' * (len(s) - 1) + 'z'\n    r = ''\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == 'a':\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i) - 1)\n        elif p == 0:\n            if i == 'a':\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i) - 1)\n        else:\n            r += i\n    return r\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"
  },
  {
    "id": 93,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a' * len(s):\n        return 'a' * (len(s) - 1) + 'z'\n    r = ''\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == 'a':\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i) - 1)\n        elif p == 0:\n            if i == 'a':\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i) - 1)\n        else:\n            r += i\n    return r\nprint(smallestString('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))",
    "execution_output": "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"
  },
  {
    "id": 94,
    "q_id": "sample_50",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a' * len(s):\n        return 'a' * (len(s) - 1) + 'z'\n    r = ''\n    p = 0\n    for i in s:\n        if p == 1:\n            if i == 'a':\n                p = 2\n                r += i\n            else:\n                r += chr(ord(i) - 1)\n        elif p == 0:\n            if i == 'a':\n                r += i\n            else:\n                p = 1\n                r += chr(ord(i) - 1)\n        else:\n            r += i\n    return r\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' + 'b'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  },
  {
    "id": 95,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a':\n        return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint(smallestString('a'))",
    "execution_output": "z"
  },
  {
    "id": 96,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a':\n        return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"
  },
  {
    "id": 97,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a':\n        return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint(smallestString('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))",
    "execution_output": "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"
  },
  {
    "id": 98,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a':\n        return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' + 'b' + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  },
  {
    "id": 99,
    "q_id": "sample_51",
    "code": "def smallestString(s: str) -> str:\n    if s == 'a':\n        return 'z'\n    t = list(s)\n    l = r = -1\n    for i, c in enumerate(s):\n        if c != 'a':\n            if l == -1:\n                l = i\n            r = i\n        elif l != -1:\n            break\n    if l != -1:\n        for i in range(l, r + 1):\n            t[i] = chr(ord(t[i]) - 1)\n    else:\n        t[-1] = 'z'\n    return ''.join(t)\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' + 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  },
  {
    "id": 100,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a':\n        i += 1\n    if i == l:\n        return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a':\n            break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint(smallestString(''))",
    "execution_output": "z"
  },
  {
    "id": 101,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a':\n        i += 1\n    if i == l:\n        return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a':\n            break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint(smallestString('a'))",
    "execution_output": "z"
  },
  {
    "id": 102,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a':\n        i += 1\n    if i == l:\n        return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a':\n            break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint(smallestString('z'))",
    "execution_output": "y"
  },
  {
    "id": 103,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a':\n        i += 1\n    if i == l:\n        return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a':\n            break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"
  },
  {
    "id": 104,
    "q_id": "sample_52",
    "code": "def smallestString(s: str) -> str:\n    l = len(s)\n    i = 0\n    while i < l and s[i] == 'a':\n        i += 1\n    if i == l:\n        return s[:-1] + 'z'\n    s = list(s)\n    for j in range(i, l):\n        if s[j] == 'a':\n            break\n        s[j] = chr(ord(s[j]) - 1)\n    return ''.join(s)\nprint(smallestString('bcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyz'))",
    "execution_output": "abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxy"
  },
  {
    "id": 105,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('a'))",
    "execution_output": "z"
  },
  {
    "id": 106,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"
  },
  {
    "id": 107,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'))",
    "execution_output": "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"
  },
  {
    "id": 108,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' + 'b'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  },
  {
    "id": 109,
    "q_id": "sample_53",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] != 'a':\n            while i < len(s) and s[i] != 'a':\n                s[i] = chr(ord(s[i]) - 1)\n                i += 1\n            break\n    else:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' + 'a' + 'ccccccccccccccccccccccccccccccccccccccccccccccccc'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaccccccccccccccccccccccccccccccccccccccccccccccccc"
  },
  {
    "id": 110,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s)\n    s = list(s)\n    i = 0\n    while i < n and s[i] == 'a':\n        i += 1\n    if i == n:\n        s[-1] = 'z'\n        return ''.join(s)\n    for i in range(i, n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n        else:\n            break\n    return ''.join(s)\nprint(smallestString('aaaaaaaaaa'))",
    "execution_output": "aaaaaaaaaz"
  },
  {
    "id": 111,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s)\n    s = list(s)\n    i = 0\n    while i < n and s[i] == 'a':\n        i += 1\n    if i == n:\n        s[-1] = 'z'\n        return ''.join(s)\n    for i in range(i, n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n        else:\n            break\n    return ''.join(s)\nprint(smallestString('bcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyz'))",
    "execution_output": "abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxy"
  },
  {
    "id": 112,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s)\n    s = list(s)\n    i = 0\n    while i < n and s[i] == 'a':\n        i += 1\n    if i == n:\n        s[-1] = 'z'\n        return ''.join(s)\n    for i in range(i, n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n        else:\n            break\n    return ''.join(s)\nprint(smallestString('bcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxya'))",
    "execution_output": "abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxa"
  },
  {
    "id": 113,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s)\n    s = list(s)\n    i = 0\n    while i < n and s[i] == 'a':\n        i += 1\n    if i == n:\n        s[-1] = 'z'\n        return ''.join(s)\n    for i in range(i, n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n        else:\n            break\n    return ''.join(s)\nprint(smallestString('abcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxy'))",
    "execution_output": "aabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwx"
  },
  {
    "id": 114,
    "q_id": "sample_54",
    "code": "def smallestString(s: str) -> str:\n    n = len(s)\n    s = list(s)\n    i = 0\n    while i < n and s[i] == 'a':\n        i += 1\n    if i == n:\n        s[-1] = 'z'\n        return ''.join(s)\n    for i in range(i, n):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n        else:\n            break\n    return ''.join(s)\nprint(smallestString('a'))",
    "execution_output": "z"
  },
  {
    "id": 115,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        elif c:\n            break\n    if not c:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz"
  },
  {
    "id": 116,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        elif c:\n            break\n    if not c:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  },
  {
    "id": 117,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        elif c:\n            break\n    if not c:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz' + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  },
  {
    "id": 118,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        elif c:\n            break\n    if not c:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' + 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
  },
  {
    "id": 119,
    "q_id": "sample_55",
    "code": "def smallestString(s: str) -> str:\n    s = list(s)\n    c = 0\n    for i in range(len(s)):\n        if s[i] != 'a':\n            s[i] = chr(ord(s[i]) - 1)\n            c = 1\n        elif c:\n            break\n    if not c:\n        s[-1] = 'z'\n    return ''.join(s)\nprint(smallestString('bcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyz'))",
    "execution_output": "abcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxyabcdefghijklmnopqrstuvwxy"
  },
  {
    "id": 120,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i + j) % n])\n            mns[j] += mn\n    return min(mns)\nprint(minCost([234772, 999999, 500000, 750000, 123456, 888888, 777777, 666666, 555555, 444444, 333333, 222222, 111111, 987654, 876543, 765432, 654321, 543210, 432109, 321098, 210987, 109876, 1000000, 234567, 345678, 456789, 567890, 678901, 789012, 890123, 901234, 12345, 23456, 34567, 45678, 56789, 67890, 78901, 89012, 90123, 13579, 24680, 112233, 223344, 334455, 445566, 556677, 667788, 778899, 889900, 999000, 100100, 200200, 300300, 400400, 500500, 600600, 700700, 800800, 900900, 101010, 202020, 303030, 404040, 505050, 606060, 707070, 808080, 909090, 919191, 929292, 939393, 949494, 959595, 969696, 979797, 989898, 999999, 111111, 222222, 333333, 444444, 555555, 666666, 777777, 888888, 999999, 123456, 234567, 345678, 456789, 567890, 678901, 789012, 890123, 901234, 912345, 923456, 934567, 945678], 3254323))",
    "execution_output": 39790396
  },
  {
    "id": 121,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i + j) % n])\n            mns[j] += mn\n    return min(mns)\nprint(minCost
    "execution_output": 23477200
  },
  {
    "id": 122,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i + j) % n])\n            mns[j] += mn\n    return min(mns)\nprint(minCost([-1000000, 5000000, -999999, 8888888, -7777777, 6666666, -5555555, 4444444, -3333333, 2222222, -1111111, 12345678, -23456789, 34567890, -45678901, 56789012, -67890123, 78901234, -89012345, 90123456], 234772))",
    "execution_output": -1775786232
  },
  {
    "id": 123,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i + j) % n])\n            mns[j] += mn\n    return min(mns)\nprint(minCost([3254323], 234772))",
    "execution_output": 3254323
  },
  {
    "id": 124,
    "q_id": "sample_56",
    "code": "def minCost(A: List[int], x: int) -> int:\n    n = len(A)\n    mns = list(range(0, n * x, x))\n    for i in range(n):\n        mn = A[i]\n        for j in range(n):\n            mn = min(mn, A[(i + j) % n])\n            mns[j] += mn\n    return min(mns)\nprint(minCost([0, -1, 2, -3, 4, -5, 6, -7, 8, -9], -100000))",
    "execution_output": -900090
  },
  {
    "id": 125,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    return min((y - x for x, y in zip(nums, nums[1:])))\nprint(findValueOfPartition([-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]))",
    "execution_output": 1
  },
  {
    "id": 126,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    return min((y - x for x, y in zip(nums, nums[1:])))\nprint(findValueOfPartition([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 0
  },
  {
    "id": 127,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    return min((y - x for x, y in zip(nums, nums[1:])))\nprint(findValueOfPartition([1000000000000000000000000000000, 1000000000000000000000000000001, -1000000000000000000000000000000, -999999999999999999999999999998, 3254323, 234772]))",
    "execution_output": 1
  },
  {
    "id": 128,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    return min((y - x for x, y in zip(nums, nums[1:])))\nprint(findValueOfPartition([-1000000000000000000, 1000000000000000000]))",
    "execution_output": 2000000000000000000
  },
  {
    "id": 129,
    "q_id": "sample_63",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    return min((y - x for x, y in zip(nums, nums[1:])))\nprint(findValueOfPartition([-999999999999999999, -999999999999999998, 0, 1, 2, 3254323, -3254323, 234772]))",
    "execution_output": 1
  },
  {
    "id": 130,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = float('inf')\n    for i in range(1, n):\n        gap = nums[i] - nums[i - 1]\n        ans = min(ans, gap)\n    return ans\nprint(findValueOfPartition([234772, 234773, 234774, 234775, 234776, 234777, 234778, 234779, 234780, 234781, 234782, 234783, 234784, 234785, 234786, 234787, 234788, 234789, 234790, 234791, 234792, 234793, 234794, 234795, 234796, 234797, 234798, 234799, 234800, 234801, 234802, 234803, 234804, 234805, 234806, 234807, 234808, 234809, 234810, 234811, 234812, 234813, 234814, 234815, 234816, 234817, 234818, 234819, 234820, 234821, 234822, 234823, 234824, 234825, 234826, 234827, 234828, 234829, 234830, 234831, 234832, 234833, 234834, 234835, 234836, 234837, 234838, 234839, 234840, 234841, 234842, 234843, 234844, 234845, 234846, 234847, 234848, 234849, 234850, 234851, 234852, 234853, 234854, 234855, 234856, 234857, 234858, 234859, 234860, 234861, 234862, 234863, 234864, 234865, 234866, 234867, 234868, 234869, 234870, 234871]))",
    "execution_output": 1
  },
  {
    "id": 131,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = float('inf')\n    for i in range(1, n):\n        gap = nums[i] - nums[i - 1]\n        ans = min(ans, gap)\n    return ans\nprint(findValueOfPartition([-10 ** 50, -10 ** 25, 0, 10 ** 25, 10 ** 50, 10 ** 50 + 1]))",
    "execution_output": 1
  },
  {
    "id": 132,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = float('inf')\n    for i in range(1, n):\n        gap = nums[i] - nums[i - 1]\n        ans = min(ans, gap)\n    return ans\nprint(findValueOfPartition([float('-inf'), -3254323.0, -1.0, 0.0, 1.0, 234772.0, float('inf'), float('nan')]))",
    "execution_output": 1.0
  },
  {
    "id": 133,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = float('inf')\n    for i in range(1, n):\n        gap = nums[i] - nums[i - 1]\n        ans = min(ans, gap)\n    return ans\nprint(findValueOfPartition([]))",
    "execution_output": Infinity
  },
  {
    "id": 134,
    "q_id": "sample_64",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = float('inf')\n    for i in range(1, n):\n        gap = nums[i] - nums[i - 1]\n        ans = min(ans, gap)\n    return ans\nprint(findValueOfPartition
    "execution_output": 0
  },
  {
    "id": 135,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint(findValueOfPartition([49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50]))",
    "execution_output": 1
  },
  {
    "id": 136,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint(findValueOfPartition([3254323, 3254324, 2147483647, -2147483648, -3254323, -3254324, 234772, -234772, 0]))",
    "execution_output": 1
  },
  {
    "id": 137,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint(findValueOfPartition([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]))",
    "execution_output": 0
  },
  {
    "id": 138,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint(findValueOfPartition([12345678901234567890, -12345678901234567889]))",
    "execution_output": 24691357802469135779
  },
  {
    "id": 139,
    "q_id": "sample_65",
    "code": "def findValueOfPartition(a: List[int]) -> int:\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(len(a) - 1):\n        ans = min(ans, a[i + 1] - a[i])\n    return ans\nprint(findValueOfPartition([-1000000000, -500000000, -1, 0, 1, 2, 1000000000, 999999999, 500000000, 250000000, -250000000, 100, 101, 100000, -100000, 3254323, -3254323]))",
    "execution_output": 1
  },
  {
    "id": 140,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    for i in range(len(nums) - 1, 0, -1):\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint(findValueOfPartition(list(range(49, -51, -1))))",
    "execution_output": 1
  },
  {
    "id": 141,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    for i in range(len(nums) - 1, 0, -1):\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint(findValueOfPartition([234772, 3254323, 999999999, -999999999, 500000000000000000, 500000000000000001]))",
    "execution_output": 1
  },
  {
    "id": 142,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    for i in range(len(nums) - 1, 0, -1):\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint(findValueOfPartition([10 ** 18, -10 ** 18]))",
    "execution_output": 10000000000
  },
  {
    "id": 143,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    for i in range(len(nums) - 1, 0, -1):\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint(findValueOfPartition([12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890, 12345678901234567890]))",
    "execution_output": 0
  },
  {
    "id": 144,
    "q_id": "sample_66",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums.sort()\n    res = 10 ** 10\n    for i in range(len(nums) - 1, 0, -1):\n        res = min(res, nums[i] - nums[i - 1])\n    return res\nprint(findValueOfPartition([-10 ** 12, -10 ** 12 + 1, -5, 0, 1, 2, 3, 10 ** 12, 10 ** 12 + 1, 999999999999999999, 1000000000000000001]))",
    "execution_output": 1
  },
  {
    "id": 145,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e+99\n    for i in range(len(nums) - 1):\n        to_ret = min(to_ret, nums[i + 1] - nums[i])\n    return to_ret\nprint(findValueOfPartition([]))",
    "execution_output": 1e+99
  },
  {
    "id": 146,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e+99\n    for i in range(len(nums) - 1):\n        to_ret = min(to_ret, nums[i + 1] - nums[i])\n    return to_ret\nprint(findValueOfPartition([42]))",
    "execution_output": 1e+99
  },
  {
    "id": 147,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e+99\n    for i in range(len(nums) - 1):\n        to_ret = min(to_ret, nums[i + 1] - nums[i])\n    return to_ret\nprint(findValueOfPartition([7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 0
  },
  {
    "id": 148,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e+99\n    for i in range(len(nums) - 1):\n        to_ret = min(to_ret, nums[i + 1] - nums[i])\n    return to_ret\nprint(findValueOfPartition([-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]))",
    "execution_output": 1
  },
  {
    "id": 149,
    "q_id": "sample_67",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    nums = sorted(nums)\n    to_ret = 1e+99\n    for i in range(len(nums) - 1):\n        to_ret = min(to_ret, nums[i + 1] - nums[i])\n    return to_ret\nprint(findValueOfPartition([-1000000000000000000, 1000000000000000000, 1000000000000000001]))",
    "execution_output": 1
  },
  {
    "id": 150,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint(findValueOfPartition([-3254323, 3254323]))",
    "execution_output": 6508646
  },
  {
    "id": 151,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint(findValueOfPartition
    "execution_output": 0
  },
  {
    "id": 152,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint(findValueOfPartition([-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]))",
    "execution_output": 1
  },
  {
    "id": 153,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint(findValueOfPartition([-1000000000000000000, -999999999999999999, 0, 999999999999999999, 1000000000000000000]))",
    "execution_output": 1
  },
  {
    "id": 154,
    "q_id": "sample_68",
    "code": "def findValueOfPartition(nums: List[int]) -> int:\n    res = float('inf')\n    nums.sort()\n    for i in range(0, len(nums) - 1):\n        res = min(res, nums[i + 1] - nums[i])\n    return res\nprint(findValueOfPartition([1000000000000, -1000000000000, 234772, 234774, 3254323, -3254323, 0, 999999999999, -999999999999]))",
    "execution_output": 1
  },
  {
    "id": 155,
    "q_id": "sample_75",
    "code": "from typing import *\nfrom math import *\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint(makeTheIntegerZero(0, 0))",
    "execution_output": -1
  },
  {
    "id": 156,
    "q_id": "sample_75",
    "code": "from typing import *\nfrom math import *\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint(makeTheIntegerZero(1000000000000000000000000000000, 1000000000000000000000000))",
    "execution_output": 32
  },
  {
    "id": 157,
    "q_id": "sample_75",
    "code": "from typing import *\nfrom math import *\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint(makeTheIntegerZero(234772, 3254323))",
    "execution_output": -1
  },
  {
    "id": 158,
    "q_id": "sample_75",
    "code": "from typing import *\nfrom math import *\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint(makeTheIntegerZero(-1000000000000000000, 123456789))",
    "execution_output": -1
  },
  {
    "id": 159,
    "q_id": "sample_75",
    "code": "from typing import *\nfrom math import *\n\ndef makeTheIntegerZero(a: int, b: int) -> int:\n    for i in range(1, 1000):\n        a -= b\n        if a >= i and bin(a)[2:].count('1') <= i:\n            return i\n    return -1\nprint(makeTheIntegerZero(1, -1000000000000))",
    "execution_output": 16
  },
  {
    "id": 160,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = (num1, num2)\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += b % 2 == 1\n            cc += (b % 2 == 1) * z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint(makeTheIntegerZero(3254323, 234772))",
    "execution_output": 11
  },
  {
    "id": 161,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = (num1, num2)\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += b % 2 == 1\n            cc += (b % 2 == 1) * z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint(makeTheIntegerZero(234772, 3254323))",
    "execution_output": -1
  },
  {
    "id": 162,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = (num1, num2)\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += b % 2 == 1\n            cc += (b % 2 == 1) * z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint(makeTheIntegerZero(1000003, 1))",
    "execution_output": 10
  },
  {
    "id": 163,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = (num1, num2)\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += b % 2 == 1\n            cc += (b % 2 == 1) * z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint(makeTheIntegerZero(0, 5))",
    "execution_output": -1
  },
  {
    "id": 164,
    "q_id": "sample_76",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    a = 0\n    x, y = (num1, num2)\n    while x > y:\n        x -= y\n        a += 1\n        b = x\n        c = 0\n        cc = 0\n        z = 1\n        while b:\n            c += b % 2 == 1\n            cc += (b % 2 == 1) * z\n            z *= 2\n            b //= 2\n        if c <= a and cc >= a:\n            return a\n    return -1\nprint(makeTheIntegerZero(-12345, 7))",
    "execution_output": -1
  },
  {
    "id": 165,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint(makeTheIntegerZero(3254323, 234772))",
    "execution_output": 11
  },
  {
    "id": 166,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint(makeTheIntegerZero(234772, 3254323))",
    "execution_output": -1
  },
  {
    "id": 167,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint(makeTheIntegerZero(987654321, 0))",
    "execution_output": 17
  },
  {
    "id": 168,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint(makeTheIntegerZero(0, 1))",
    "execution_output": -1
  },
  {
    "id": 169,
    "q_id": "sample_77",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for x in range(1, 1000):\n        k = num1 - x * num2\n        if k <= 0:\n            break\n        if bin(k).count('1') <= x and k >= x:\n            return x\n    return -1\nprint(makeTheIntegerZero(-50, -3))",
    "execution_output": -1
  },
  {
    "id": 170,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        return x >= k and num1 - x * num2 >= x\n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint(makeTheIntegerZero((1 << 99) - 1, 0))",
    "execution_output": 99
  },
  {
    "id": 171,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        return x >= k and num1 - x * num2 >= x\n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint(makeTheIntegerZero((1 << 150) - 1, 0))",
    "execution_output": -1
  },
  {
    "id": 172,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        return x >= k and num1 - x * num2 >= x\n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint(makeTheIntegerZero(10 ** 12, 10 ** 12))",
    "execution_output": -1
  },
  {
    "id": 173,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        return x >= k and num1 - x * num2 >= x\n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint(makeTheIntegerZero(-1000, 5))",
    "execution_output": -1
  },
  {
    "id": 174,
    "q_id": "sample_78",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n\n    def check(x):\n        num = num1 - x * num2\n        if num <= 0:\n            return False\n        k = 0\n        while num:\n            if num & 1:\n                k += 1\n            num >>= 1\n        return x >= k and num1 - x * num2 >= x\n    for i in range(1, 100):\n        if check(i):\n            return i\n    return -1\nprint(makeTheIntegerZero(10, -10 ** 6))",
    "execution_output": 9
  },
  {
    "id": 175,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint(makeTheIntegerZero(3254323, 234772))",
    "execution_output": 11
  },
  {
    "id": 176,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint(makeTheIntegerZero(234772, 0))",
    "execution_output": 8
  },
  {
    "id": 177,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint(makeTheIntegerZero(0, 999999999999))",
    "execution_output": 0
  },
  {
    "id": 178,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint(makeTheIntegerZero(-234772, 3254323))",
    "execution_output": -1
  },
  {
    "id": 179,
    "q_id": "sample_79",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    ops = 0\n    while num1 >= 0:\n        num_ones = bin(num1).count('1')\n        if num_ones <= ops and num1 >= ops:\n            return ops\n        num1 -= num2\n        ops += 1\n    return -1\nprint(makeTheIntegerZero(-1, -999999999999))",
    "execution_output": -1
  },
  {
    "id": 180,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100):\n        num1 -= num2\n        if num1 < to_ret:\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        if to_ret >= s1:\n            return to_ret\n    return -1\nprint(makeTheIntegerZero(1000000000000000000, 0))",
    "execution_output": 24
  },
  {
    "id": 181,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100):\n        num1 -= num2\n        if num1 < to_ret:\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        if to_ret >= s1:\n            return to_ret\n    return -1\nprint(makeTheIntegerZero((1 << 120) - 1, 1))",
    "execution_output": -1
  },
  {
    "id": 182,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100):\n        num1 -= num2\n        if num1 < to_ret:\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        if to_ret >= s1:\n            return to_ret\n    return -1\nprint(makeTheIntegerZero(3254323, 234772))",
    "execution_output": 11
  },
  {
    "id": 183,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100):\n        num1 -= num2\n        if num1 < to_ret:\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        if to_ret >= s1:\n            return to_ret\n    return -1\nprint(makeTheIntegerZero(234772, 3254323))",
    "execution_output": -1
  },
  {
    "id": 184,
    "q_id": "sample_80",
    "code": "def makeTheIntegerZero(num1: int, num2: int) -> int:\n    for to_ret in range(1, 100):\n        num1 -= num2\n        if num1 < to_ret:\n            return -1\n        s1 = len([c for c in bin(num1)[2:] if c == '1'])\n        if to_ret >= s1:\n            return to_ret\n    return -1\nprint(makeTheIntegerZero(0, 7))",
    "execution_output": -1
  },
  {
    "id": 185,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx, v in enumerate(nums):\n        if v == 1:\n            tmp.append(idx)\n    if len(tmp) == 0:\n        return 0\n    if len(tmp) == 1:\n        return 1\n    res = 1\n    mod = 10 ** 9 + 7\n    for a, b in pairwise(tmp):\n        res = res * (b - a) % mod\n    return res\nprint(numberOfGoodSubarraySplits([]))",
    "execution_output": 0
  },
  {
    "id": 186,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx, v in enumerate(nums):\n        if v == 1:\n            tmp.append(idx)\n    if len(tmp) == 0:\n        return 0\n    if len(tmp) == 1:\n        return 1\n    res = 1\n    mod = 10 ** 9 + 7\n    for a, b in pairwise(tmp):\n        res = res * (b - a) % mod\n    return res\nprint(numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 187,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx, v in enumerate(nums):\n        if v == 1:\n            tmp.append(idx)\n    if len(tmp) == 0:\n        return 0\n    if len(tmp) == 1:\n        return 1\n    res = 1\n    mod = 10 ** 9 + 7\n    for a, b in pairwise(tmp):\n        res = res * (b - a) % mod\n    return res\nprint(numberOfGoodSubarraySplits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 1
  },
  {
    "id": 188,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx, v in enumerate(nums):\n        if v == 1:\n            tmp.append(idx)\n    if len(tmp) == 0:\n        return 0\n    if len(tmp) == 1:\n        return 1\n    res = 1\n    mod = 10 ** 9 + 7\n    for a, b in pairwise(tmp):\n        res = res * (b - a) % mod\n    return res\nprint(numberOfGoodSubarraySplits([1] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1]))",
    "execution_output": 2450
  },
  {
    "id": 189,
    "q_id": "sample_81",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    tmp = []\n    for idx, v in enumerate(nums):\n        if v == 1:\n            tmp.append(idx)\n    if len(tmp) == 0:\n        return 0\n    if len(tmp) == 1:\n        return 1\n    res = 1\n    mod = 10 ** 9 + 7\n    for a, b in pairwise(tmp):\n        res = res * (b - a) % mod\n    return res\nprint(numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1, True, 234772, 3254323, float('nan'), 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', float('-inf'), None, False]))",
    "execution_output": 1
  },
  {
    "id": 190,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10 ** 9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1, len(indexs)):\n        ans *= indexs[i] - indexs[i - 1]\n        ans %= Mod\n    return ans\nprint(numberOfGoodSubarraySplits([]))",
    "execution_output": 0
  },
  {
    "id": 191,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10 ** 9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1, len(indexs)):\n        ans *= indexs[i] - indexs[i - 1]\n        ans %= Mod\n    return ans\nprint(numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 192,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10 ** 9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1, len(indexs)):\n        ans *= indexs[i] - indexs[i - 1]\n        ans %= Mod\n    return ans\nprint(numberOfGoodSubarraySplits([1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0] + [1]))",
    "execution_output": 527642103
  },
  {
    "id": 193,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10 ** 9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1, len(indexs)):\n        ans *= indexs[i] - indexs[i - 1]\n        ans %= Mod\n    return ans\nprint(numberOfGoodSubarraySplits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 1
  },
  {
    "id": 194,
    "q_id": "sample_82",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    indexs = []\n    Mod = 10 ** 9 + 7\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            indexs.append(i)\n    if len(indexs) == 0:\n        return 0\n    ans = 1\n    for i in range(1, len(indexs)):\n        ans *= indexs[i] - indexs[i - 1]\n        ans %= Mod\n    return ans\nprint(numberOfGoodSubarraySplits([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [1] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323]))",
    "execution_output": 1
  },
  {
    "id": 195,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = ans * (i - l) % base\n            l = i\n    return ans\nprint(numberOfGoodSubarraySplits([]))",
    "execution_output": 0
  },
  {
    "id": 196,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = ans * (i - l) % base\n            l = i\n    return ans\nprint(numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 197,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = ans * (i - l) % base\n            l = i\n    return ans\nprint(numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 198,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = ans * (i - l) % base\n            l = i\n    return ans\nprint(numberOfGoodSubarraySplits(([1] + [0, 0, 0, 0, 0, 0, 0, 0, 0]) * 10 + [1]))",
    "execution_output": 999999937
  },
  {
    "id": 199,
    "q_id": "sample_83",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    base = 10 ** 9 + 7\n    l = 0\n    while l < len(nums) and nums[l] == 0:\n        l += 1\n    if l == len(nums):\n        return 0\n    ans = 1\n    for i in range(l + 1, len(nums)):\n        if nums[i] == 1:\n            ans = ans * (i - l) % base\n            l = i\n    return ans\nprint(numberOfGoodSubarraySplits([234772, -1, 3254323, 0, 0, -5, 2]))",
    "execution_output": 1
  },
  {
    "id": 200,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t == 0 for t in nums]):\n        return 0\n    ttt = 10 ** 9 + 7\n    base = 1\n    tmp = -1\n    for c in nums:\n        if c == 1:\n            if tmp > 0:\n                base = base * tmp % ttt\n            tmp = 1\n        elif tmp >= 0:\n            tmp += 1\n    return base\nprint(numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 201,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t == 0 for t in nums]):\n        return 0\n    ttt = 10 ** 9 + 7\n    base = 1\n    tmp = -1\n    for c in nums:\n        if c == 1:\n            if tmp > 0:\n                base = base * tmp % ttt\n            tmp = 1\n        elif tmp >= 0:\n            tmp += 1\n    return base\nprint(numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 202,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t == 0 for t in nums]):\n        return 0\n    ttt = 10 ** 9 + 7\n    base = 1\n    tmp = -1\n    for c in nums:\n        if c == 1:\n            if tmp > 0:\n                base = base * tmp % ttt\n            tmp = 1\n        elif tmp >= 0:\n            tmp += 1\n    return base\nprint(numberOfGoodSubarraySplits([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]))",
    "execution_output": 949480669
  },
  {
    "id": 203,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t == 0 for t in nums]):\n        return 0\n    ttt = 10 ** 9 + 7\n    base = 1\n    tmp = -1\n    for c in nums:\n        if c == 1:\n            if tmp > 0:\n                base = base * tmp % ttt\n            tmp = 1\n        elif tmp >= 0:\n            tmp += 1\n    return base\nprint(numberOfGoodSubarraySplits([1] + [234772, -5, 234772, -5, 234772, -5, 234772, -5, 234772, -5, 234772, -5, 234772, -5, 234772, -5, 234772, -5, 234772, -5] + [1] + [3254323, 7, -9, 3254323, 7, -9, 3254323, 7, -9, 3254323, 7, -9, 3254323, 7, -9, 3254323, 7, -9, 3254323, 7, -9, 3254323, 7, -9, 3254323, 7, -9, 3254323, 7, -9] + [1] + [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42] + [1] + [0, 0, 0, 0, 0, 0]))",
    "execution_output": 26691
  },
  {
    "id": 204,
    "q_id": "sample_84",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if all([t == 0 for t in nums]):\n        return 0\n    ttt = 10 ** 9 + 7\n    base = 1\n    tmp = -1\n    for c in nums:\n        if c == 1:\n            if tmp > 0:\n                base = base * tmp % ttt\n            tmp = 1\n        elif tmp >= 0:\n            tmp += 1\n    return base\nprint(numberOfGoodSubarraySplits([2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5, 2, -3, 0, 5]))",
    "execution_output": 1
  },
  {
    "id": 205,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    for i in range(1, len(ones)):\n        ans = ans * (ones[i] - ones[i - 1]) % MOD\n    return ans\nprint(numberOfGoodSubarraySplits([]))",
    "execution_output": 0
  },
  {
    "id": 206,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    for i in range(1, len(ones)):\n        ans = ans * (ones[i] - ones[i - 1]) % MOD\n    return ans\nprint(numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 207,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    for i in range(1, len(ones)):\n        ans = ans * (ones[i] - ones[i - 1]) % MOD\n    return ans\nprint(numberOfGoodSubarraySplits([0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0, 0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0, 0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0, 0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0, 0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0, 0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0, 0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0, 0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0, 0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0, 0, 234772, -5, 0, 0, 0, 3254323, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 208,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    for i in range(1, len(ones)):\n        ans = ans * (ones[i] - ones[i - 1]) % MOD\n    return ans\nprint(numberOfGoodSubarraySplits([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]))",
    "execution_output": 949480669
  },
  {
    "id": 209,
    "q_id": "sample_85",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    if 1 not in nums:\n        return 0\n    MOD = 10 ** 9 + 7\n    ans = 1\n    ones = [i for i in range(len(nums)) if nums[i] == 1]\n    for i in range(1, len(ones)):\n        ans = ans * (ones[i] - ones[i - 1]) % MOD\n    return ans\nprint(numberOfGoodSubarraySplits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 1
  },
  {
    "id": 210,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint(numberOfGoodSubarraySplits([]))",
    "execution_output": 0
  },
  {
    "id": 211,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint(numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 212,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint(numberOfGoodSubarraySplits([3254323]))",
    "execution_output": 1
  },
  {
    "id": 213,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint(numberOfGoodSubarraySplits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 1
  },
  {
    "id": 214,
    "q_id": "sample_86",
    "code": "def numberOfGoodSubarraySplits(nums: List[int]) -> int:\n    mod = 1000000007\n    n = len(nums)\n    last = -1\n    ans = 1\n    for i in range(n):\n        if nums[i]:\n            if last != -1:\n                ans = ans * (i - last) % mod\n            last = i\n    return ans if last != -1 else 0\nprint(numberOfGoodSubarraySplits([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]))",
    "execution_output": 949480669
  },
  {
    "id": 215,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint(continuousSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 216,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint(continuousSubarrays([3254323]))",
    "execution_output": 1
  },
  {
    "id": 217,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint(continuousSubarrays
    "execution_output": 5050
  },
  {
    "id": 218,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint(continuousSubarrays([234700, 234701, 234702, 234703, 234704, 234705, 234706, 234707, 234708, 234709, 234710, 234711, 234712, 234713, 234714, 234715, 234716, 234717, 234718, 234719, 234720, 234721, 234722, 234723, 234724, 234725, 234726, 234727, 234728, 234729, 234730, 234731, 234732, 234733, 234734, 234735, 234736, 234737, 234738, 234739, 234740, 234741, 234742, 234743, 234744, 234745, 234746, 234747, 234748, 234749, 234750, 234751, 234752, 234753, 234754, 234755, 234756, 234757, 234758, 234759, 234760, 234761, 234762, 234763, 234764, 234765, 234766, 234767, 234768, 234769, 234770, 234771, 234772, 234773, 234774, 234775, 234776, 234777, 234778, 234779, 234780, 234781, 234782, 234783, 234784, 234785, 234786, 234787, 234788, 234789, 234790, 234791, 234792, 234793, 234794, 234795, 234796, 234797, 234798, 234799]))",
    "execution_output": 297
  },
  {
    "id": 219,
    "q_id": "sample_93",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    res = i = 0\n    n = len(A)\n    count = Counter()\n    for j in range(n):\n        count[A[j]] += 1\n        while max(count) - min(count) > 2:\n            count[A[i]] -= 1\n            if count[A[i]] == 0:\n                del count[A[i]]\n            i += 1\n        res += j - i + 1\n    return res\nprint(continuousSubarrays([-3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321, 3254322, 3254323, -3254323, -3254322, -3254321, 3254321]))",
    "execution_output": 187
  },
  {
    "id": 220,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i - 2] + h[i - 1] + h[i] + h[i + 1] + h[i + 2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint(continuousSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 221,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i - 2] + h[i - 1] + h[i] + h[i + 1] + h[i + 2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint(continuousSubarrays([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 5050
  },
  {
    "id": 222,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i - 2] + h[i - 1] + h[i] + h[i + 1] + h[i + 2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint(continuousSubarrays(list(range(100))))",
    "execution_output": 297
  },
  {
    "id": 223,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i - 2] + h[i - 1] + h[i] + h[i + 1] + h[i + 2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint(continuousSubarrays([234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321, 234772, 234773, 234774, 3254323, 3254322, 3254321] + [234772, 234773, 3254323, 3254322]))",
    "execution_output": 198
  },
  {
    "id": 224,
    "q_id": "sample_94",
    "code": "def continuousSubarrays(a: List[int]) -> int:\n    h = Counter()\n    mo = deque([])\n    ans = 0\n    for i in a:\n        mo.append(i)\n        h[i] += 1\n        while h[i - 2] + h[i - 1] + h[i] + h[i + 1] + h[i + 2] != len(mo):\n            h[mo.popleft()] -= 1\n        ans += len(mo)\n    return ans\nprint(continuousSubarrays
    "execution_output": 100
  },
  {
    "id": 225,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = (0, 0)\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0:\n            del cnt[nums[l]]\n        l += 1\n    return ans\nprint(continuousSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 226,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = (0, 0)\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0:\n            del cnt[nums[l]]\n        l += 1\n    return ans\nprint(continuousSubarrays([3254323]))",
    "execution_output": 1
  },
  {
    "id": 227,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = (0, 0)\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0:\n            del cnt[nums[l]]\n        l += 1\n    return ans\nprint(continuousSubarrays([0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2]))",
    "execution_output": 5050
  },
  {
    "id": 228,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = (0, 0)\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0:\n            del cnt[nums[l]]\n        l += 1\n    return ans\nprint(continuousSubarrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": 297
  },
  {
    "id": 229,
    "q_id": "sample_95",
    "code": "def continuousSubarrays(nums: List[int]) -> int:\n    l, r = (0, 0)\n    n = len(nums)\n    cnt = Counter()\n    ans = 0\n    while l < n:\n        while r < n and (len(cnt) == 0 or (nums[r] - min(cnt) <= 2 and max(cnt) - nums[r] <= 2)):\n            cnt[nums[r]] += 1\n            r += 1\n        ans += r - l\n        cnt[nums[l]] -= 1\n        if cnt[nums[l]] == 0:\n            del cnt[nums[l]]\n        l += 1\n    return ans\nprint(continuousSubarrays([234772, 234773, 234774, 234775, 3254321, 3254322, 3254323, -1000000, -999999, -1000001, -1000002, -999998]))",
    "execution_output": 24
  },
  {
    "id": 230,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i + 1\n    return ans\nprint(continuousSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 231,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i + 1\n    return ans\nprint(continuousSubarrays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 5050
  },
  {
    "id": 232,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i + 1\n    return ans\nprint(continuousSubarrays([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3] + [1]))",
    "execution_output": 5050
  },
  {
    "id": 233,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i + 1\n    return ans\nprint(continuousSubarrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": 297
  },
  {
    "id": 234,
    "q_id": "sample_96",
    "code": "def continuousSubarrays(A: List[int]) -> int:\n    count = Counter()\n    ans = i = 0\n    for j, x in enumerate(A):\n        count[x] += 1\n        while len(count) > 3 or max(count) - min(count) > 2:\n            y = A[i]\n            count[y] -= 1\n            if count[y] == 0:\n                del count[y]\n            i += 1\n        ans += j - i + 1\n    return ans\nprint(continuousSubarrays([-1000000000, -999999999, -999999998, 234772, 234773, 234774, 3254323, 3254324, 3254325, 999999998, 999999999, 1000000000]))",
    "execution_output": 24
  },
  {
    "id": 235,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j] - nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j] + 1 else dp[j] + 1\n    return dp[-1]\nprint(maximumJumps([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42], 0))",
    "execution_output": 99
  },
  {
    "id": 236,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j] - nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j] + 1 else dp[j] + 1\n    return dp[-1]\nprint(maximumJumps(list(range(100)), 1))",
    "execution_output": 99
  },
  {
    "id": 237,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j] - nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j] + 1 else dp[j] + 1\n    return dp[-1]\nprint(maximumJumps([i * 234772 for i in range(100)], 234772))",
    "execution_output": 99
  },
  {
    "id": 238,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j] - nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j] + 1 else dp[j] + 1\n    return dp[-1]\nprint(maximumJumps([(-1) ** i * i * 500000 for i in range(100)], 3254323))",
    "execution_output": 51
  },
  {
    "id": 239,
    "q_id": "sample_97",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if dp[j] > -1 and -target <= nums[j] - nums[i] <= target:\n                dp[i] = dp[i] if dp[i] >= dp[j] + 1 else dp[j] + 1\n    return dp[-1]\nprint(maximumJumps([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -10))",
    "execution_output": -1
  },
  {
    "id": 240,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i + 1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i] + 1)\n    return dp[-1]\nprint(maximumJumps(list(range(100)), 1))",
    "execution_output": 99
  },
  {
    "id": 241,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i + 1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i] + 1)\n    return dp[-1]\nprint(maximumJumps([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0))",
    "execution_output": 99
  },
  {
    "id": 242,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i + 1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i] + 1)\n    return dp[-1]\nprint(maximumJumps([0] + [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772], 234772))",
    "execution_output": 99
  },
  {
    "id": 243,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i + 1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i] + 1)\n    return dp[-1]\nprint(maximumJumps([-10, -20, -30, -40, -50], -1))",
    "execution_output": -1
  },
  {
    "id": 244,
    "q_id": "sample_98",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] == -1:\n            continue\n        for j in range(i + 1, n):\n            if abs(nums[i] - nums[j]) <= target:\n                dp[j] = max(dp[j], dp[i] + 1)\n    return dp[-1]\nprint(maximumJumps
    "execution_output": 99
  },
  {
    "id": 245,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint(maximumJumps([], 10))",
    "execution_output": -1
  },
  {
    "id": 246,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint(maximumJumps([42], 100))",
    "execution_output": 0
  },
  {
    "id": 247,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint(maximumJumps(list(range(100)), 1))",
    "execution_output": 99
  },
  {
    "id": 248,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint(maximumJumps([0, 234772, 469544, 704316, 939088, 1173860, 1408632, 1643404, 1878176, 2112948, 2347720, 2582492, 2817264, 3052036, 3286808, 3521580], 234772))",
    "execution_output": 15
  },
  {
    "id": 249,
    "q_id": "sample_99",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n\n    @cache\n    def dfs(i):\n        if i == len(nums) - 1:\n            return 0\n        r = -1\n        for j in range(i + 1, len(nums)):\n            if abs(nums[j] - nums[i]) <= target:\n                if dfs(j) > -1:\n                    r = max(r, 1 + dfs(j))\n        return r\n    res = dfs(0)\n    dfs.cache_clear()\n    return res\nprint(maximumJumps([1, 1, 1, 1], -5))",
    "execution_output": -1
  },
  {
    "id": 250,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint(maximumJumps(list(range(100)), 1))",
    "execution_output": 99
  },
  {
    "id": 251,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint(maximumJumps([234772, 234773, 3254323, 3254324, 999999999, 1000000001, -1000000000, -999999999], 2000000000))",
    "execution_output": 6
  },
  {
    "id": 252,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint(maximumJumps([1, 1, 1], -5))",
    "execution_output": -1
  },
  {
    "id": 253,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint(maximumJumps(list(range(0, 1000, 10)), 5))",
    "execution_output": -1
  },
  {
    "id": 254,
    "q_id": "sample_100",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] != -1 and abs(nums[j] - nums[i]) <= target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\nprint(maximumJumps([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], 0))",
    "execution_output": 99
  },
  {
    "id": 255,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint(maximumJumps([42], 0))",
    "execution_output": 0
  },
  {
    "id": 256,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint(maximumJumps([1, 2, 3], -1))",
    "execution_output": -1
  },
  {
    "id": 257,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint(maximumJumps([0, 234772, 469544, 704316, 939088, 1173860, 1408632, 1643404, 1878176, 2112948, 2347720, 2582492, 2817264, 3052036, 3286808, 3521580, 3756352, 3991124, 4225896, 4460668, 4695440, 4930212, 5164984, 5399756, 5634528, 5869300, 6104072, 6338844, 6573616, 6808388, 7043160, 7277932, 7512704, 7747476, 7982248, 8217020, 8451792, 8686564, 8921336, 9156108, 9390880, 9625652, 9860424, 10095196, 10329968, 10564740, 10799512, 11034284, 11269056, 11503828, 11738600, 11973372, 12208144, 12442916, 12677688, 12912460, 13147232, 13382004, 13616776, 13851548, 14086320, 14321092, 14555864, 14790636, 15025408, 15260180, 15494952, 15729724, 15964496, 16199268, 16434040, 16668812, 16903584, 17138356, 17373128, 17607900, 17842672, 18077444, 18312216, 18546988, 18781760, 19016532, 19251304, 19486076, 19720848, 19955620, 20190392, 20425164, 20659936, 20894708, 21129480, 21364252, 21599024, 21833796, 22068568, 22303340, 22538112, 22772884, 23007656, 23242428], 234772))",
    "execution_output": 99
  },
  {
    "id": 258,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint(maximumJumps([7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8], 0))",
    "execution_output": -1
  },
  {
    "id": 259,
    "q_id": "sample_101",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n\n    @cache\n    def dp(idx):\n        if idx == n - 1:\n            return 0\n        res = -1\n        for i in range(idx + 1, n):\n            if abs(nums[i] - nums[idx]) <= target and dp(i) != -1:\n                res = max(res, 1 + dp(i))\n        return res\n    return dp(0)\nprint(maximumJumps([0, 3254323], 3254322))",
    "execution_output": -1
  },
  {
    "id": 260,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint(maximumJumps([12345], 0))",
    "execution_output": 0
  },
  {
    "id": 261,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint(maximumJumps([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], 0))",
    "execution_output": 99
  },
  {
    "id": 262,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint(maximumJumps([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], 0))",
    "execution_output": -1
  },
  {
    "id": 263,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint(maximumJumps([-3254323, -234772, 0, 234772, 3254323, 2147483647, -2147483648, 999999999999, -999999999999], 1000000000000))",
    "execution_output": 7
  },
  {
    "id": 264,
    "q_id": "sample_102",
    "code": "def maximumJumps(nums: List[int], target: int) -> int:\n    n = len(nums)\n    f = [-1] * n\n    f[0] = 0\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= target:\n                    f[j] = max(f[i] + 1, f[j])\n    return f[-1]\nprint(maximumJumps([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], 0))",
    "execution_output": -1
  },
  {
    "id": 265,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (max(a + 1 if nums1[i] >= nums1[i - 1] else 1, b + 1 if nums1[i] >= nums2[i - 1] else 1), max(a + 1 if nums2[i] >= nums1[i - 1] else 1, b + 1 if nums2[i] >= nums2[i - 1] else 1))\n        y = max(y, a, b)\n    return y\nprint(maxNonDecreasingLength(list(range(100)), list(range(100, 0, -1))))",
    "execution_output": 100
  },
  {
    "id": 266,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (max(a + 1 if nums1[i] >= nums1[i - 1] else 1, b + 1 if nums1[i] >= nums2[i - 1] else 1), max(a + 1 if nums2[i] >= nums1[i - 1] else 1, b + 1 if nums2[i] >= nums2[i - 1] else 1))\n        y = max(y, a, b)\n    return y\nprint(maxNonDecreasingLength([234772 if i % 2 == 0 else -3254323 for i in range(100)], [-234772 if i % 2 == 0 else 3254323 for i in range(100)]))",
    "execution_output": 3
  },
  {
    "id": 267,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (max(a + 1 if nums1[i] >= nums1[i - 1] else 1, b + 1 if nums1[i] >= nums2[i - 1] else 1), max(a + 1 if nums2[i] >= nums1[i - 1] else 1, b + 1 if nums2[i] >= nums2[i - 1] else 1))\n        y = max(y, a, b)\n    return y\nprint(maxNonDecreasingLength([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 100
  },
  {
    "id": 268,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (max(a + 1 if nums1[i] >= nums1[i - 1] else 1, b + 1 if nums1[i] >= nums2[i - 1] else 1), max(a + 1 if nums2[i] >= nums1[i - 1] else 1, b + 1 if nums2[i] >= nums2[i - 1] else 1))\n        y = max(y, a, b)\n    return y\nprint(maxNonDecreasingLength(list(range(100, 0, -1)), list(range(200, 100, -1))))",
    "execution_output": 2
  },
  {
    "id": 269,
    "q_id": "sample_103",
    "code": "def maxNonDecreasingLength(nums1: List[int], nums2: List[int]) -> int:\n    a = b = y = 1\n    for i in range(1, len(nums1)):\n        a, b = (max(a + 1 if nums1[i] >= nums1[i - 1] else 1, b + 1 if nums1[i] >= nums2[i - 1] else 1), max(a + 1 if nums2[i] >= nums1[i - 1] else 1, b + 1 if nums2[i] >= nums2[i - 1] else 1))\n        y = max(y, a, b)\n    return y\nprint(maxNonDecreasingLength([3254323], [-234772]))",
    "execution_output": 1
  },
  {
    "id": 270,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = (x, y, t1, t2)\n    return ans\nprint(maxNonDecreasingLength([1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000], [1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1, 1000000, 1]))",
    "execution_output": 100
  },
  {
    "id": 271,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = (x, y, t1, t2)\n    return ans\nprint(maxNonDecreasingLength([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 100
  },
  {
    "id": 272,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = (x, y, t1, t2)\n    return ans\nprint(maxNonDecreasingLength([234772, 234773, 234775, 234780, 234790, 500000, 700000, 900000, 1200000, 1500000, 2000000, 2500000, 3000000, 3254323, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000], [234771, 234772, 234774, 234779, 234789, 499999, 699999, 899999, 1199999, 1499999, 1999999, 2499999, 2999999, 3254322, 3999999, 4999999, 5999999, 6999999, 7999999, 8999999]))",
    "execution_output": 20
  },
  {
    "id": 273,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = (x, y, t1, t2)\n    return ans\nprint(maxNonDecreasingLength([-3254323, -234772, -1000000, -999999, -500000, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], [-4000000, -3000000, -2000000, -1500000, -1200000, -1000000, -500000, -100, 0, 0, 1, 1, 2, 2, 3]))",
    "execution_output": 15
  },
  {
    "id": 274,
    "q_id": "sample_104",
    "code": "def maxNonDecreasingLength(a: List[int], b: List[int]) -> int:\n    p1 = p2 = 0\n    l1 = l2 = ans = 0\n    for x, y in zip(a, b):\n        t1 = t2 = 1\n        if x >= p1:\n            t1 = max(t1, l1 + 1)\n        if x >= p2:\n            t1 = max(t1, l2 + 1)\n        if y >= p1:\n            t2 = max(t2, l1 + 1)\n        if y >= p2:\n            t2 = max(t2, l2 + 1)\n        ans = max(ans, t1, t2)\n        p1, p2, l1, l2 = (x, y, t1, t2)\n    return ans\nprint(maxNonDecreasingLength(list(range(100, 0, -1)), list(range(200, 100, -1))))",
    "execution_output": 2
  },
  {
    "id": 275,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint(checkArray([234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42, 234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42, 234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42, 234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42, 234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42, 234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42, 234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42, 234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42, 234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42, 234772, 3254323, 0, 99999, 123456, 7777777, 5, 444444, 88888888, 42], 1))",
    "execution_output": true
  },
  {
    "id": 276,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint(checkArray([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772], 20))",
    "execution_output": true
  },
  {
    "id": 277,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint(checkArray([1, 2, 3, 4, 5], 10))",
    "execution_output": false
  },
  {
    "id": 278,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint(checkArray([], 3))",
    "execution_output": true
  },
  {
    "id": 279,
    "q_id": "sample_105",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    kq = deque()\n    S = 0\n    while nums:\n        while kq and kq[0][0] - k + 1 >= len(nums):\n            r, t = kq.popleft()\n            S -= t\n        nums[-1] -= S\n        if nums[-1] < 0:\n            return False\n        elif nums[-1] > 0:\n            if len(nums) < k:\n                return False\n            kq.append((len(nums) - 1, nums[-1]))\n            S += kq[-1][1]\n        nums.pop()\n    return True\nprint(checkArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 234772))",
    "execution_output": true
  },
  {
    "id": 280,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint(checkArray
    "execution_output": true
  },
  {
    "id": 281,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint(checkArray
    "execution_output": true
  },
  {
    "id": 282,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint(checkArray
    "execution_output": false
  },
  {
    "id": 283,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint(checkArray([], 1))",
    "execution_output": true
  },
  {
    "id": 284,
    "q_id": "sample_106",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    tag = [0] * (n + 1)\n    sh = 0\n    for i in range(n):\n        sh += tag[i]\n        if nums[i] - sh < 0:\n            return False\n        x = nums[i] - sh\n        if x:\n            if i + k > n:\n                return False\n            sh += x\n            tag[i + k] -= x\n    return True\nprint(checkArray([3254323], 2))",
    "execution_output": false
  },
  {
    "id": 285,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    n = len(set(queue))\n    return n == 1\nprint(checkArray
    "execution_output": true
  },
  {
    "id": 286,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    n = len(set(queue))\n    return n == 1\nprint(checkArray([-3254323] + [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772], 50))",
    "execution_output": false
  },
  {
    "id": 287,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    n = len(set(queue))\n    return n == 1\nprint(checkArray
    "execution_output": true
  },
  {
    "id": 288,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    n = len(set(queue))\n    return n == 1\nprint(checkArray
    "execution_output": true
  },
  {
    "id": 289,
    "q_id": "sample_107",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    queue = deque()\n    for i in range(k):\n        queue.append(nums[i])\n    curr = 0\n    for i in range(k, len(nums)):\n        if curr > queue[0]:\n            return False\n        curr = queue.popleft()\n        queue.append(curr + nums[i])\n    n = len(set(queue))\n    return n == 1\nprint(checkArray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 99))",
    "execution_output": false
  },
  {
    "id": 290,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint(checkArray
    "execution_output": true
  },
  {
    "id": 291,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint(checkArray([3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323], 1))",
    "execution_output": true
  },
  {
    "id": 292,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint(checkArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], 100))",
    "execution_output": false
  },
  {
    "id": 293,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint(checkArray([], 4))",
    "execution_output": true
  },
  {
    "id": 294,
    "q_id": "sample_108",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    a = [0] * (len(nums) + 1)\n    s = 0\n    for i in range(len(nums)):\n        s += a[i]\n        nums[i] -= s\n        if nums[i] < 0:\n            return False\n        if i <= len(nums) - k:\n            s += nums[i]\n            a[i + k] -= nums[i]\n            nums[i] = 0\n    return not any(nums)\nprint(checkArray([3254323, -234772, 0], 2))",
    "execution_output": false
  },
  {
    "id": 295,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0] * (len(nums) + 1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i + k >= len(nums) + 1:\n                return False\n            diff[i + k] -= nums[i] - curr\n            curr = nums[i]\n    return True\nprint(checkArray([], 5))",
    "execution_output": true
  },
  {
    "id": 296,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0] * (len(nums) + 1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i + k >= len(nums) + 1:\n                return False\n            diff[i + k] -= nums[i] - curr\n            curr = nums[i]\n    return True\nprint(checkArray([0, 0, 0], 0))",
    "execution_output": true
  },
  {
    "id": 297,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0] * (len(nums) + 1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i + k >= len(nums) + 1:\n                return False\n            diff[i + k] -= nums[i] - curr\n            curr = nums[i]\n    return True\nprint(checkArray([3, 1, 0], 10))",
    "execution_output": false
  },
  {
    "id": 298,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0] * (len(nums) + 1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i + k >= len(nums) + 1:\n                return False\n            diff[i + k] -= nums[i] - curr\n            curr = nums[i]\n    return True\nprint(checkArray
    "execution_output": true
  },
  {
    "id": 299,
    "q_id": "sample_109",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    diff = [0] * (len(nums) + 1)\n    curr = 0\n    for i in range(len(nums)):\n        curr += diff[i]\n        if curr > nums[i]:\n            return False\n        if nums[i] > curr:\n            if i + k >= len(nums) + 1:\n                return False\n            diff[i + k] -= nums[i] - curr\n            curr = nums[i]\n    return True\nprint(checkArray([3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42, 3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42, 3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42, 3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42, 3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42, 3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42, 3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42, 3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42, 3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42, 3254323, 234772, 99999999, 5000000, 12345678, 7654321, 100000, 1, 0, 42], 1))",
    "execution_output": true
  },
  {
    "id": 300,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n    return max(nums) == 0\nprint(checkArray
    "execution_output": true
  },
  {
    "id": 301,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n    return max(nums) == 0\nprint(checkArray
    "execution_output": false
  },
  {
    "id": 302,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n    return max(nums) == 0\nprint(checkArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1000))",
    "execution_output": true
  },
  {
    "id": 303,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n    return max(nums) == 0\nprint(checkArray([-1, 0, 5], 2))",
    "execution_output": false
  },
  {
    "id": 304,
    "q_id": "sample_110",
    "code": "def checkArray(nums: List[int], k: int) -> bool:\n    n = len(nums)\n    end = [0] * (n * 2)\n    cr = 0\n    for i in range(n):\n        cr -= end[i]\n        nums[i] -= cr\n        if nums[i] < 0:\n            return False\n        if i + k <= n:\n            cr += nums[i]\n            end[i + k] = nums[i]\n            nums[i] = 0\n    return max(nums) == 0\nprint(checkArray([234772, 3254323, 4000000, 980449], 2))",
    "execution_output": true
  },
  {
    "id": 305,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint(maximumBeauty([3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323], 0))",
    "execution_output": 100
  },
  {
    "id": 306,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint(maximumBeauty([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], 0))",
    "execution_output": 1
  },
  {
    "id": 307,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint(maximumBeauty([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], 1000000000))",
    "execution_output": 100
  },
  {
    "id": 308,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint(maximumBeauty([], 5))",
    "execution_output": 1
  },
  {
    "id": 309,
    "q_id": "sample_111",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    ans = 1\n    n = len(nums)\n    l = 0\n    for r in range(n):\n        while nums[r] - nums[l] > 2 * k:\n            l += 1\n        ans = max(ans, r - l + 1)\n    return ans\nprint(maximumBeauty([-3254323, -234772, 0, 234772, 3254323], 1))",
    "execution_output": 1
  },
  {
    "id": 310,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint(maximumBeauty([], 10))",
    "execution_output": 0
  },
  {
    "id": 311,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint(maximumBeauty([-3254323], 0))",
    "execution_output": 1
  },
  {
    "id": 312,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint(maximumBeauty([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42], 0))",
    "execution_output": 100
  },
  {
    "id": 313,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint(maximumBeauty([3254000, 3254001, 3254002, 3254003, 3254004, 3254005, 3254006, 3254007, 3254008, 3254009, 3254010, 3254011, 3254012, 3254013, 3254014, 3254015, 3254016, 3254017, 3254018, 3254019, 3254020, 3254021, 3254022, 3254023, 3254024, 3254025, 3254026, 3254027, 3254028, 3254029, 3254030, 3254031, 3254032, 3254033, 3254034, 3254035, 3254036, 3254037, 3254038, 3254039, 3254040, 3254041, 3254042, 3254043, 3254044, 3254045, 3254046, 3254047, 3254048, 3254049, 3254050, 3254051, 3254052, 3254053, 3254054, 3254055, 3254056, 3254057, 3254058, 3254059, 3254060, 3254061, 3254062, 3254063, 3254064, 3254065, 3254066, 3254067, 3254068, 3254069, 3254070, 3254071, 3254072, 3254073, 3254074, 3254075, 3254076, 3254077, 3254078, 3254079, 3254080, 3254081, 3254082, 3254083, 3254084, 3254085, 3254086, 3254087, 3254088, 3254089, 3254090, 3254091, 3254092, 3254093, 3254094, 3254095, 3254096, 3254097, 3254098, 3254099], 100000))",
    "execution_output": 100
  },
  {
    "id": 314,
    "q_id": "sample_112",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    j = 0\n    ans = 0\n    for i in range(len(nums)):\n        while j < len(nums) and nums[j] - nums[i] <= 2 * k:\n            j += 1\n        ans = max(ans, j - i)\n    return ans\nprint(maximumBeauty([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 50))",
    "execution_output": 90
  },
  {
    "id": 315,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint(maximumBeauty([], 234772))",
    "execution_output": 0
  },
  {
    "id": 316,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint(maximumBeauty([3254323], 0))",
    "execution_output": 1
  },
  {
    "id": 317,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint(maximumBeauty([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], 0))",
    "execution_output": 1
  },
  {
    "id": 318,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint(maximumBeauty([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], 3254323))",
    "execution_output": 100
  },
  {
    "id": 319,
    "q_id": "sample_113",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    res = 0\n    deq = deque()\n    for n in nums:\n        deq.append(n)\n        while deq[0] < n - 2 * k:\n            deq.popleft()\n        res = max(res, len(deq))\n    return res\nprint(maximumBeauty
    "execution_output": 100
  },
  {
    "id": 320,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i] - nums[i0] > 2 * k:\n            i0 += 1\n        answer = max(answer, i - i0 + 1)\n    return answer\nprint(maximumBeauty([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42], 0))",
    "execution_output": 100
  },
  {
    "id": 321,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i] - nums[i0] > 2 * k:\n            i0 += 1\n        answer = max(answer, i - i0 + 1)\n    return answer\nprint(maximumBeauty(list(range(100)), 0))",
    "execution_output": 1
  },
  {
    "id": 322,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i] - nums[i0] > 2 * k:\n            i0 += 1\n        answer = max(answer, i - i0 + 1)\n    return answer\nprint(maximumBeauty(list(range(-50, 50)), 49))",
    "execution_output": 99
  },
  {
    "id": 323,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i] - nums[i0] > 2 * k:\n            i0 += 1\n        answer = max(answer, i - i0 + 1)\n    return answer\nprint(maximumBeauty(list(range(99)) + [98], 49))",
    "execution_output": 100
  },
  {
    "id": 324,
    "q_id": "sample_114",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    i0 = 0\n    answer = 1\n    for i in range(1, n):\n        while nums[i] - nums[i0] > 2 * k:\n            i0 += 1\n        answer = max(answer, i - i0 + 1)\n    return answer\nprint(maximumBeauty([3254323, -3254323, 234772, -234772, 999999999, -999999999, 1234567890123, -1234567890123, 0, 1, -1, 500000000, -500000000], 1000000000000))",
    "execution_output": 12
  },
  {
    "id": 325,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint(maximumBeauty([], 5))",
    "execution_output": 0
  },
  {
    "id": 326,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint(maximumBeauty([42], 0))",
    "execution_output": 1
  },
  {
    "id": 327,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint(maximumBeauty([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], 0))",
    "execution_output": 100
  },
  {
    "id": 328,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint(maximumBeauty([234772, 234773, 234774, 3254321, 3254323, 3254325], 2))",
    "execution_output": 3
  },
  {
    "id": 329,
    "q_id": "sample_115",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    q = deque()\n    ans = 0\n    for x in nums:\n        q.append(x)\n        while q[0] < x - k - k:\n            q.popleft()\n        ans = max(ans, len(q))\n    return ans\nprint(maximumBeauty([-1000000000, -1, 0, 1, 1000000000, 234772, 3254323], 2000000000))",
    "execution_output": 7
  },
  {
    "id": 330,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2 * k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint(maximumBeauty([], 10))",
    "execution_output": 0
  },
  {
    "id": 331,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2 * k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint(maximumBeauty([3254323], 234772))",
    "execution_output": 1
  },
  {
    "id": 332,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2 * k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint(maximumBeauty
    "execution_output": 100
  },
  {
    "id": 333,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2 * k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint(maximumBeauty(list(range(0, 100000, 1000)), 0))",
    "execution_output": 1
  },
  {
    "id": 334,
    "q_id": "sample_116",
    "code": "def maximumBeauty(nums: List[int], k: int) -> int:\n    nums.sort()\n    n = len(nums)\n    maxres = 0\n    right = 0\n    for left in range(n):\n        while right < n and nums[right] <= nums[left] + 2 * k:\n            right += 1\n            maxres = max(maxres, right - left)\n    return maxres\nprint(maximumBeauty(list(range(100)), 3254323))",
    "execution_output": 100
  },
  {
    "id": 335,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key=lambda y: counts[y])\n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        left = i + 1\n        right = len(nums) - i - 1\n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n    return -1\nprint(minimumIndex
    "execution_output": 20
  },
  {
    "id": 336,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key=lambda y: counts[y])\n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        left = i + 1\n        right = len(nums) - i - 1\n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n    return -1\nprint(minimumIndex
    "execution_output": -1
  },
  {
    "id": 337,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key=lambda y: counts[y])\n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        left = i + 1\n        right = len(nums) - i - 1\n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n    return -1\nprint(minimumIndex(['xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa']))",
    "execution_output": 2
  },
  {
    "id": 338,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key=lambda y: counts[y])\n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        left = i + 1\n        right = len(nums) - i - 1\n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n    return -1\nprint(minimumIndex([3254323, -3254323, 234772, 3254323, 3254323, -999999999, 234772, 3254323, 0, 3254323, 234772, 3254323, -234772, 1, 3254323]))",
    "execution_output": -1
  },
  {
    "id": 339,
    "q_id": "sample_117",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    counts = Counter(nums)\n    x = max(counts.keys(), key=lambda y: counts[y])\n    curr = 0\n    for i in range(len(nums)):\n        if nums[i] == x:\n            curr += 1\n            counts[x] -= 1\n        left = i + 1\n        right = len(nums) - i - 1\n        if curr * 2 > left and counts[x] * 2 > right:\n            return i\n    return -1\nprint(minimumIndex([1.0, float('inf'), -1.0, float('inf'), float('inf'), 2.0, float('inf'), 3.0, float('inf')]))",
    "execution_output": -1
  },
  {
    "id": 340,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = (0, 0)\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint(minimumIndex([]))",
    "execution_output": -1
  },
  {
    "id": 341,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = (0, 0)\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint(minimumIndex([234772]))",
    "execution_output": -1
  },
  {
    "id": 342,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = (0, 0)\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint(minimumIndex
    "execution_output": 0
  },
  {
    "id": 343,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = (0, 0)\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint(minimumIndex
    "execution_output": -1
  },
  {
    "id": 344,
    "q_id": "sample_118",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    x, c = (0, 0)\n    for i in nums:\n        if i == x:\n            c += 1\n        else:\n            c -= 1\n            if c < 0:\n                x = i\n                c = 1\n    m = nums.count(x)\n    p = 0\n    for i in range(len(nums)):\n        p += nums[i] == x\n        if p * 2 > i + 1 and (m - p) * 2 > len(nums) - i - 1:\n            return i\n    return -1\nprint(minimumIndex([3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772, 234772, -234772] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323]))",
    "execution_output": 0
  },
  {
    "id": 345,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > n - i - 1:\n            return i\n    return -1\nprint(minimumIndex([3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [99999999, 99999999, 99999999, 99999999, 99999999, 99999999, 99999999, 99999999, 99999999, 99999999] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 0
  },
  {
    "id": 346,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > n - i - 1:\n            return i\n    return -1\nprint(minimumIndex([123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789] + [-123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789, -123456789]))",
    "execution_output": -1
  },
  {
    "id": 347,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > n - i - 1:\n            return i\n    return -1\nprint(minimumIndex([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]))",
    "execution_output": 0
  },
  {
    "id": 348,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > n - i - 1:\n            return i\n    return -1\nprint(minimumIndex([]))",
    "execution_output": -1
  },
  {
    "id": 349,
    "q_id": "sample_119",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    cnt = {}\n    for num in nums:\n        cnt[num] = cnt.get(num, 0) + 1\n    mx = 0\n    for num in cnt:\n        if cnt[num] > mx:\n            mx = cnt[num]\n            x = num\n    cx = 0\n    for i in range(n):\n        cx += int(nums[i] == x)\n        if cx * 2 > i + 1 and (cnt[x] - cx) * 2 > n - i - 1:\n            return i\n    return -1\nprint(minimumIndex([3254323]))",
    "execution_output": -1
  },
  {
    "id": 350,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max(((v, k) for k, v in c.items()))[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0:\n            return i\n    return -1\nprint(minimumIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323]))",
    "execution_output": 60
  },
  {
    "id": 351,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max(((v, k) for k, v in c.items()))[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0:\n            return i\n    return -1\nprint(minimumIndex
    "execution_output": -1
  },
  {
    "id": 352,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max(((v, k) for k, v in c.items()))[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0:\n            return i\n    return -1\nprint(minimumIndex
    "execution_output": -1
  },
  {
    "id": 353,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max(((v, k) for k, v in c.items()))[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0:\n            return i\n    return -1\nprint(minimumIndex([-3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323]))",
    "execution_output": 0
  },
  {
    "id": 354,
    "q_id": "sample_120",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    c = Counter(nums)\n    d = max(((v, k) for k, v in c.items()))[1]\n    n = len(nums)\n    l = 0\n    r = c[d] - (n - c[d])\n    for i, num in enumerate(nums):\n        if num == d:\n            l += 1\n            r -= 1\n        else:\n            l -= 1\n            r += 1\n        if l > 0 and r > 0:\n            return i\n    return -1\nprint(minimumIndex([0, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": -1
  },
  {
    "id": 355,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\n\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i] * 2 > len(nums):\n            dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums) - upto\n        if other[dom] * 2 > upto and dct[dom] * 2 > la:\n            return upto - 1\n    return -1\nprint(minimumIndex([3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999, 999999999] + [-1000000000, -1000000000, -1000000000, -1000000000, -1000000000] + [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]))",
    "execution_output": 0
  },
  {
    "id": 356,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\n\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i] * 2 > len(nums):\n            dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums) - upto\n        if other[dom] * 2 > upto and dct[dom] * 2 > la:\n            return upto - 1\n    return -1\nprint(minimumIndex([-234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1234567890123456789, 1234567890123456789, 1234567890123456789, 1234567890123456789, 1234567890123456789, 1234567890123456789, 1234567890123456789, 1234567890123456789, 1234567890123456789, 1234567890123456789] + [1, 1, 1, 1, 1, 1, 1, 1, 1] + [-234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772]))",
    "execution_output": 0
  },
  {
    "id": 357,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\n\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i] * 2 > len(nums):\n            dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums) - upto\n        if other[dom] * 2 > upto and dct[dom] * 2 > la:\n            return upto - 1\n    return -1\nprint(minimumIndex
    "execution_output": 0
  },
  {
    "id": 358,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\n\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i] * 2 > len(nums):\n            dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums) - upto\n        if other[dom] * 2 > upto and dct[dom] * 2 > la:\n            return upto - 1\n    return -1\nprint(minimumIndex([-100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000] + [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [7, 7, 7, 7, 7, 7, 7, 7, 7, 7] + [-100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000, -100000000] + [0, 0, 0, 0, 0, 0, 0, 0, 0] + [123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789, 123456789]))",
    "execution_output": 0
  },
  {
    "id": 359,
    "q_id": "sample_121",
    "code": "from collections import defaultdict\n\ndef minimumIndex(nums: List[int]) -> int:\n    dct = defaultdict(int)\n    for i in nums:\n        dct[i] += 1\n        if dct[i] * 2 > len(nums):\n            dom = i\n    other = defaultdict(int)\n    upto = 0\n    for i in nums[:-1]:\n        other[i] += 1\n        dct[i] -= 1\n        upto += 1\n        la = len(nums) - upto\n        if other[dom] * 2 > upto and dct[dom] * 2 > la:\n            return upto - 1\n    return -1\nprint(minimumIndex
    "execution_output": 0
  },
  {
    "id": 360,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    C = Counter(nums)\n    m = max(C.values())\n    if n >= m * 2:\n        return -1\n    x = 0\n    for t in C:\n        if C[t] == m:\n            x = t\n    print(n, m, x)\n    c = 0\n    for i, y in enumerate(nums):\n        c += y == x\n        if c * 2 > i + 1:\n            if (C[x] - c) * 2 > n - (i + 1):\n                return i\n    return -1\nprint(minimumIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772]))",
    "execution_output": 80
  },
  {
    "id": 361,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    C = Counter(nums)\n    m = max(C.values())\n    if n >= m * 2:\n        return -1\n    x = 0\n    for t in C:\n        if C[t] == m:\n            x = t\n    print(n, m, x)\n    c = 0\n    for i, y in enumerate(nums):\n        c += y == x\n        if c * 2 > i + 1:\n            if (C[x] - c) * 2 > n - (i + 1):\n                return i\n    return -1\nprint(minimumIndex([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]))",
    "execution_output": -1
  },
  {
    "id": 362,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    C = Counter(nums)\n    m = max(C.values())\n    if n >= m * 2:\n        return -1\n    x = 0\n    for t in C:\n        if C[t] == m:\n            x = t\n    print(n, m, x)\n    c = 0\n    for i, y in enumerate(nums):\n        c += y == x\n        if c * 2 > i + 1:\n            if (C[x] - c) * 2 > n - (i + 1):\n                return i\n    return -1\nprint(minimumIndex([234772]))",
    "execution_output": -1
  },
  {
    "id": 363,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    C = Counter(nums)\n    m = max(C.values())\n    if n >= m * 2:\n        return -1\n    x = 0\n    for t in C:\n        if C[t] == m:\n            x = t\n    print(n, m, x)\n    c = 0\n    for i, y in enumerate(nums):\n        c += y == x\n        if c * 2 > i + 1:\n            if (C[x] - c) * 2 > n - (i + 1):\n                return i\n    return -1\nprint(minimumIndex([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 0
  },
  {
    "id": 364,
    "q_id": "sample_122",
    "code": "def minimumIndex(nums: List[int]) -> int:\n    n = len(nums)\n    C = Counter(nums)\n    m = max(C.values())\n    if n >= m * 2:\n        return -1\n    x = 0\n    for t in C:\n        if C[t] == m:\n            x = t\n    print(n, m, x)\n    c = 0\n    for i, y in enumerate(nums):\n        c += y == x\n        if c * 2 > i + 1:\n            if (C[x] - c) * 2 > n - (i + 1):\n                return i\n    return -1\nprint(minimumIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 49, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323]))",
    "execution_output": 80
  },
  {
    "id": 365,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = (0, 0)\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint(maxIncreasingGroups([0]))",
    "execution_output": 0
  },
  {
    "id": 366,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = (0, 0)\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint(maxIncreasingGroups([3254323]))",
    "execution_output": 1
  },
  {
    "id": 367,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = (0, 0)\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint(maxIncreasingGroups([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 13
  },
  {
    "id": 368,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = (0, 0)\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint(maxIncreasingGroups([-1000000, -5, -1, 0, 0, 1, 2, 234772, 3254323]))",
    "execution_output": 1
  },
  {
    "id": 369,
    "q_id": "sample_129",
    "code": "def maxIncreasingGroups(u: List[int]) -> int:\n    u.sort()\n    n = len(u)\n    j, x = (0, 0)\n    for i in range(1, n + 1):\n        while j < n and x + u[j] < i:\n            x += u[j]\n            j += 1\n        if j < n and x + u[j] >= i:\n            x = x + u[j] - i\n            j += 1\n        else:\n            return i - 1\n    return n\nprint(maxIncreasingGroups(list(range(1, 101))))",
    "execution_output": 100
  },
  {
    "id": 370,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n        a = (total * 2 // k - k - 1) // 2\n        while (a + 1 + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint(maxIncreasingGroups([1]))",
    "execution_output": 1
  },
  {
    "id": 371,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n        a = (total * 2 // k - k - 1) // 2\n        while (a + 1 + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint(maxIncreasingGroups([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23456]))",
    "execution_output": 1
  },
  {
    "id": 372,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n        a = (total * 2 // k - k - 1) // 2\n        while (a + 1 + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint(maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 100
  },
  {
    "id": 373,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n        a = (total * 2 // k - k - 1) // 2\n        while (a + 1 + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint(maxIncreasingGroups([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323]))",
    "execution_output": 98
  },
  {
    "id": 374,
    "q_id": "sample_130",
    "code": "def maxIncreasingGroups(A: List[int]) -> int:\n    A.sort()\n    n = len(A)\n    ii = 0\n    pre = 0\n    ceil = inf\n    k = 1\n    while k <= ceil:\n        while ii < n and A[ii] <= k:\n            pre += A[ii]\n            ii += 1\n        total = pre + k * (n - ii)\n        a = (total * 2 // k - k - 1) // 2\n        while (a + 1 + (a + k)) * k // 2 <= total:\n            a += 1\n        ceil = min(ceil, a + k - 1)\n        if k <= ceil:\n            res = k\n        k += 1\n    return res\nprint(maxIncreasingGroups([3254323]))",
    "execution_output": 1
  },
  {
    "id": 375,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([-3254323, -234772, -1000000, -500000, -10000, -1000, -100, -10, -1, 0, 1, 2, 10, 100, 1000, 10000, 234772, 3254323]))",
    "execution_output": 0
  },
  {
    "id": 376,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([3254323, 234772, 999999999999999999, 1000000000000, 987654321098765432, 123456789012345678, 2147483647, 9223372036854775807, 10, 1]))",
    "execution_output": 10
  },
  {
    "id": 377,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 13
  },
  {
    "id": 378,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 100
  },
  {
    "id": 379,
    "q_id": "sample_131",
    "code": "def maxIncreasingGroups(x: List[int]) -> int:\n    x.sort()\n    n = len(x)\n    vals = list(accumulate(x))\n    ans = 0\n    for v in vals:\n        if (ans + 1) * (ans + 2) // 2 <= v:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([-1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50, -1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50, -1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50, -1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50, -1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50, -1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50, -1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50, -1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50, -1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50, -1000000, -1, 0, 1, 1000000, 234772, -234772, 3254323, -3254323, 50]))",
    "execution_output": 1
  },
  {
    "id": 380,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = (1, len(usageLimits))\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint(maxIncreasingGroups([234772, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 19
  },
  {
    "id": 381,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = (1, len(usageLimits))\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint(maxIncreasingGroups([3254323]))",
    "execution_output": 1
  },
  {
    "id": 382,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = (1, len(usageLimits))\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint(maxIncreasingGroups([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 13
  },
  {
    "id": 383,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = (1, len(usageLimits))\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint(maxIncreasingGroups([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 384,
    "q_id": "sample_132",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n    usageLimits.sort(reverse=True)\n    left, right = (1, len(usageLimits))\n    while left < right:\n        m = (left + right + 1) // 2\n        if test(usageLimits, m):\n            left = m\n        else:\n            right = m - 1\n    return left\n\ndef test(count: List[int], group: int) -> bool:\n    d = 0\n    for i, x in enumerate(count):\n        y = max(group - i, 0)\n        d = min(d + x - y, 0)\n    return d == 0\nprint(maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 100
  },
  {
    "id": 385,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n    ans = 0\n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51]))",
    "execution_output": 100
  },
  {
    "id": 386,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n    ans = 0\n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [3254323]))",
    "execution_output": 1
  },
  {
    "id": 387,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n    ans = 0\n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 100
  },
  {
    "id": 388,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n    ans = 0\n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([3254323, 234772, 999999999]))",
    "execution_output": 3
  },
  {
    "id": 389,
    "q_id": "sample_133",
    "code": "def maxIncreasingGroups(usageLimits: List[int]) -> int:\n\n    def f(x):\n        return (x + 1) * (x + 2) // 2\n    usageLimits.sort()\n    prefix = [usageLimits[0]]\n    for i in range(1, len(usageLimits)):\n        prefix.append(prefix[-1] + usageLimits[i])\n    ans = 0\n    for num in prefix:\n        if f(ans) <= num:\n            ans += 1\n    return ans\nprint(maxIncreasingGroups([-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10] + [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]))",
    "execution_output": 45
  },
  {
    "id": 390,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint(countCompleteSubarrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "execution_output": 4186
  },
  {
    "id": 391,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint(countCompleteSubarrays([234772, 3254323, 234772, 3254323, -3254323, 0, 234772, 0, 3254323, 234772, -234772, 3254323]))",
    "execution_output": 10
  },
  {
    "id": 392,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint(countCompleteSubarrays
    "execution_output": 7
  },
  {
    "id": 393,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint(countCompleteSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 394,
    "q_id": "sample_140",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    m = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == m\n    return ans\nprint(countCompleteSubarrays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": 1
  },
  {
    "id": 395,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint(countCompleteSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 396,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint(countCompleteSubarrays([42]))",
    "execution_output": 1
  },
  {
    "id": 397,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint(countCompleteSubarrays
    "execution_output": 5050
  },
  {
    "id": 398,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint(countCompleteSubarrays([-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]))",
    "execution_output": 1
  },
  {
    "id": 399,
    "q_id": "sample_141",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    d = len(set(nums))\n    n = len(nums)\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            ans += len(s) == d\n    return ans\nprint(countCompleteSubarrays
    "execution_output": 5151
  },
  {
    "id": 400,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)):\n        set_t = set()\n        for j in range(i, len(nums)):\n            set_t.add(nums[j])\n            if len(set_t) == setn:\n                to_ret += 1\n    return to_ret\nprint(countCompleteSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 401,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)):\n        set_t = set()\n        for j in range(i, len(nums)):\n            set_t.add(nums[j])\n            if len(set_t) == setn:\n                to_ret += 1\n    return to_ret\nprint(countCompleteSubarrays([42]))",
    "execution_output": 1
  },
  {
    "id": 402,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)):\n        set_t = set()\n        for j in range(i, len(nums)):\n            set_t.add(nums[j])\n            if len(set_t) == setn:\n                to_ret += 1\n    return to_ret\nprint(countCompleteSubarrays([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 5050
  },
  {
    "id": 403,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)):\n        set_t = set()\n        for j in range(i, len(nums)):\n            set_t.add(nums[j])\n            if len(set_t) == setn:\n                to_ret += 1\n    return to_ret\nprint(countCompleteSubarrays(list(range(100))))",
    "execution_output": 1
  },
  {
    "id": 404,
    "q_id": "sample_142",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    setn = len(set(nums))\n    to_ret = 0\n    for i in range(len(nums)):\n        set_t = set()\n        for j in range(i, len(nums)):\n            set_t.add(nums[j])\n            if len(set_t) == setn:\n                to_ret += 1\n    return to_ret\nprint(countCompleteSubarrays([234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0, 234772, 3254323, -234772, -3254323, 0]))",
    "execution_output": 4656
  },
  {
    "id": 405,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint(countCompleteSubarrays([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "execution_output": 4656
  },
  {
    "id": 406,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint(countCompleteSubarrays(list(range(100))))",
    "execution_output": 1
  },
  {
    "id": 407,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint(countCompleteSubarrays([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 5050
  },
  {
    "id": 408,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint(countCompleteSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 409,
    "q_id": "sample_143",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    le = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i, n):\n            s.add(nums[j])\n            if len(s) == le:\n                ans += n - j\n                break\n    return ans\nprint(countCompleteSubarrays([234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1, 234772, -3254323, 0, 999999999, -1]))",
    "execution_output": 4656
  },
  {
    "id": 410,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint(countCompleteSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 411,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint(countCompleteSubarrays([42]))",
    "execution_output": 1
  },
  {
    "id": 412,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint(countCompleteSubarrays
    "execution_output": 5050
  },
  {
    "id": 413,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint(countCompleteSubarrays(list(range(100))))",
    "execution_output": 1
  },
  {
    "id": 414,
    "q_id": "sample_144",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    s = len(set(nums))\n    n = len(nums)\n    ret = 0\n    for i in range(n):\n        a = set()\n        for j in range(i, n):\n            a.add(nums[j])\n            if len(a) == s:\n                ret += n - j\n                break\n    return ret\nprint(countCompleteSubarrays([234772, 3254323] + [-1000000000, 0, 1000000000] + [234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323] + [0]))",
    "execution_output": 285
  },
  {
    "id": 415,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint(countCompleteSubarrays([]))",
    "execution_output": 0
  },
  {
    "id": 416,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint(countCompleteSubarrays([42]))",
    "execution_output": 1
  },
  {
    "id": 417,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint(countCompleteSubarrays(list(range(100))))",
    "execution_output": 1
  },
  {
    "id": 418,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint(countCompleteSubarrays([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 5050
  },
  {
    "id": 419,
    "q_id": "sample_145",
    "code": "def countCompleteSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    tot = len(set(nums))\n    ans = 0\n    for i in range(n):\n        s = set()\n        for x in nums[i:]:\n            s.add(x)\n            ans += int(len(s) == tot)\n    return ans\nprint(countCompleteSubarrays([234772, -3254323, 234772, 999999999999, -3254323, 999999999999, 234772, 0, -1, 0, -1, 234772]))",
    "execution_output": 20
  },
  {
    "id": 420,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint(canSplitArray([], 10))",
    "execution_output": true
  },
  {
    "id": 421,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint(canSplitArray([1, 1], 1000000))",
    "execution_output": true
  },
  {
    "id": 422,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint(canSplitArray(list(range(1, 101)), 1000))",
    "execution_output": false
  },
  {
    "id": 423,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint(canSplitArray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [120, 80], 200))",
    "execution_output": true
  },
  {
    "id": 424,
    "q_id": "sample_152",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(1, n):\n        if nums[i - 1] + nums[i] >= m:\n            return True\n    return False\nprint(canSplitArray([234772, 3254323, -50, 0, 1], 2000000))",
    "execution_output": true
  },
  {
    "id": 425,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1] + i)\n\n    @lru_cache(None)\n    def dp(i, j):\n        if j - i == 1:\n            return True\n        for k in range(i + 1, j):\n            if k != j - 1 and sums[j] - sums[k] < m:\n                continue\n            if k != i + 1 and sums[k] - sums[i] < m:\n                continue\n            if dp(i, k) and dp(k, j):\n                return True\n        return False\n    return dp(0, len(nums))\nprint(canSplitArray([], 5))",
    "execution_output": false
  },
  {
    "id": 426,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1] + i)\n\n    @lru_cache(None)\n    def dp(i, j):\n        if j - i == 1:\n            return True\n        for k in range(i + 1, j):\n            if k != j - 1 and sums[j] - sums[k] < m:\n                continue\n            if k != i + 1 and sums[k] - sums[i] < m:\n                continue\n            if dp(i, k) and dp(k, j):\n                return True\n        return False\n    return dp(0, len(nums))\nprint(canSplitArray([234772], 3254323))",
    "execution_output": true
  },
  {
    "id": 427,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1] + i)\n\n    @lru_cache(None)\n    def dp(i, j):\n        if j - i == 1:\n            return True\n        for k in range(i + 1, j):\n            if k != j - 1 and sums[j] - sums[k] < m:\n                continue\n            if k != i + 1 and sums[k] - sums[i] < m:\n                continue\n            if dp(i, k) and dp(k, j):\n                return True\n        return False\n    return dp(0, len(nums))\nprint(canSplitArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1))",
    "execution_output": false
  },
  {
    "id": 428,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1] + i)\n\n    @lru_cache(None)\n    def dp(i, j):\n        if j - i == 1:\n            return True\n        for k in range(i + 1, j):\n            if k != j - 1 and sums[j] - sums[k] < m:\n                continue\n            if k != i + 1 and sums[k] - sums[i] < m:\n                continue\n            if dp(i, k) and dp(k, j):\n                return True\n        return False\n    return dp(0, len(nums))\nprint(canSplitArray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 2))",
    "execution_output": true
  },
  {
    "id": 429,
    "q_id": "sample_153",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    sums = [0]\n    for i in nums:\n        sums.append(sums[-1] + i)\n\n    @lru_cache(None)\n    def dp(i, j):\n        if j - i == 1:\n            return True\n        for k in range(i + 1, j):\n            if k != j - 1 and sums[j] - sums[k] < m:\n                continue\n            if k != i + 1 and sums[k] - sums[i] < m:\n                continue\n            if dp(i, k) and dp(k, j):\n                return True\n        return False\n    return dp(0, len(nums))\nprint(canSplitArray
    "execution_output": true
  },
  {
    "id": 430,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) < 3:\n        return True\n    for i, v in enumerate(nums):\n        if i + 1 >= len(nums):\n            continue\n        if v + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([], 10))",
    "execution_output": true
  },
  {
    "id": 431,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) < 3:\n        return True\n    for i, v in enumerate(nums):\n        if i + 1 >= len(nums):\n            continue\n        if v + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([42], 0))",
    "execution_output": true
  },
  {
    "id": 432,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) < 3:\n        return True\n    for i, v in enumerate(nums):\n        if i + 1 >= len(nums):\n            continue\n        if v + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([1, -1], 100))",
    "execution_output": true
  },
  {
    "id": 433,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) < 3:\n        return True\n    for i, v in enumerate(nums):\n        if i + 1 >= len(nums):\n            continue\n        if v + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 3))",
    "execution_output": false
  },
  {
    "id": 434,
    "q_id": "sample_154",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) < 3:\n        return True\n    for i, v in enumerate(nums):\n        if i + 1 >= len(nums):\n            continue\n        if v + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [234772, 3254323], 3489095))",
    "execution_output": true
  },
  {
    "id": 435,
    "q_id": "sample_155",
    "code": "from typing import *\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <= 2:\n        return True\n    for i in range(len(nums) - 1):\n        if sum(nums[i:i + 2]) >= m:\n            return True\n    return False\nprint(canSplitArray([], 10))",
    "execution_output": true
  },
  {
    "id": 436,
    "q_id": "sample_155",
    "code": "from typing import *\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <= 2:\n        return True\n    for i in range(len(nums) - 1):\n        if sum(nums[i:i + 2]) >= m:\n            return True\n    return False\nprint(canSplitArray([42], 1000))",
    "execution_output": true
  },
  {
    "id": 437,
    "q_id": "sample_155",
    "code": "from typing import *\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <= 2:\n        return True\n    for i in range(len(nums) - 1):\n        if sum(nums[i:i + 2]) >= m:\n            return True\n    return False\nprint(canSplitArray([234772, 3254323], 3489095))",
    "execution_output": true
  },
  {
    "id": 438,
    "q_id": "sample_155",
    "code": "from typing import *\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <= 2:\n        return True\n    for i in range(len(nums) - 1):\n        if sum(nums[i:i + 2]) >= m:\n            return True\n    return False\nprint(canSplitArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1))",
    "execution_output": false
  },
  {
    "id": 439,
    "q_id": "sample_155",
    "code": "from typing import *\nfrom math import *\n\ndef canSplitArray(nums: List[int], m: int) -> bool:\n    if len(nums) <= 2:\n        return True\n    for i in range(len(nums) - 1):\n        if sum(nums[i:i + 2]) >= m:\n            return True\n    return False\nprint(canSplitArray([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [234772, 3254323], 3489095))",
    "execution_output": true
  },
  {
    "id": 440,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([], 234772))",
    "execution_output": true
  },
  {
    "id": 441,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([3254323], 234772))",
    "execution_output": true
  },
  {
    "id": 442,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([234772, -3254323], 0))",
    "execution_output": true
  },
  {
    "id": 443,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1))",
    "execution_output": false
  },
  {
    "id": 444,
    "q_id": "sample_156",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386, 117386], 234772))",
    "execution_output": true
  },
  {
    "id": 445,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([], 0))",
    "execution_output": true
  },
  {
    "id": 446,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([42], -5))",
    "execution_output": true
  },
  {
    "id": 447,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray(list(range(1, 101)), 199))",
    "execution_output": true
  },
  {
    "id": 448,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray(list(range(1, 101)), 200))",
    "execution_output": false
  },
  {
    "id": 449,
    "q_id": "sample_157",
    "code": "def canSplitArray(nums: List[int], m: int) -> bool:\n    n = len(nums)\n    if n <= 2:\n        return True\n    for i in range(n - 1):\n        if nums[i] + nums[i + 1] >= m:\n            return True\n    return False\nprint(canSplitArray([234772, 3254323, 999999999999, -999999999998, 1], 2000000000000))",
    "execution_output": false
  },
  {
    "id": 450,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i, c in enumerate(nums):\n        if i >= x:\n            bisect.insort(st, nums[i - x])\n            p = bisect.bisect_left(st, c)\n            if p > 0:\n                ans = min(ans, c - st[p - 1])\n            if p < len(st):\n                ans = min(ans, st[p] - c)\n    return ans\nprint(minAbsoluteDifference([12, -345, 678, -901, 234, -567, 890, -123, 456, -789, 1011, -1213, 1415, -1617, 1819, -2021, 2223, -2425, 2627, -2829, 3031, -3233, 3435, -3637, 3839, -4041, 4243, -4445, 4647, -4849, 5051, -5253, 5455, -5657, 5859, -6061, 6263, -6465, 6667, -6869, 7071, -7273, 7475, -7677, 7879, -8081, 8283, -8485, 8687, -8889, 9091, -9293, 9495, -9697, 9899, -10101, 10303, -10505, 10707, -10909, 11111, -11313, 11515, -11717, 11919, -12121, 12323, -12525, 12727, -12929, 13131, -13333, 13535, -13737, 13939, -14141, 14343, -14545, 14747, -14949, 15151, -15353, 15555, -15757, 15959, -16161, 16363, -16565, 16767, -16969, 17171, -17373, 17575, -17777, 17979, -18181, 18383, -18585, 18787, -18989], 50))",
    "execution_output": 8796
  },
  {
    "id": 451,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i, c in enumerate(nums):\n        if i >= x:\n            bisect.insort(st, nums[i - x])\n            p = bisect.bisect_left(st, c)\n            if p > 0:\n                ans = min(ans, c - st[p - 1])\n            if p < len(st):\n                ans = min(ans, st[p] - c)\n    return ans\nprint(minAbsoluteDifference([3254323, -3254323, 234772, -234772, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648], 4))",
    "execution_output": 120202466
  },
  {
    "id": 452,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i, c in enumerate(nums):\n        if i >= x:\n            bisect.insort(st, nums[i - x])\n            p = bisect.bisect_left(st, c)\n            if p > 0:\n                ans = min(ans, c - st[p - 1])\n            if p < len(st):\n                ans = min(ans, st[p] - c)\n    return ans\nprint(minAbsoluteDifference([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42], 73))",
    "execution_output": 0
  },
  {
    "id": 453,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i, c in enumerate(nums):\n        if i >= x:\n            bisect.insort(st, nums[i - x])\n            p = bisect.bisect_left(st, c)\n            if p > 0:\n                ans = min(ans, c - st[p - 1])\n            if p < len(st):\n                ans = min(ans, st[p] - c)\n    return ans\nprint(minAbsoluteDifference([3, 1, 4, 1, 5, 9, 2, 6, 5, 3], 0))",
    "execution_output": 0
  },
  {
    "id": 454,
    "q_id": "sample_164",
    "code": "def minAbsoluteDifference(nums: List[int], x: int) -> int:\n    st = []\n    ans = float('inf')\n    for i, c in enumerate(nums):\n        if i >= x:\n            bisect.insort(st, nums[i - x])\n            p = bisect.bisect_left(st, c)\n            if p > 0:\n                ans = min(ans, c - st[p - 1])\n            if p < len(st):\n                ans = min(ans, st[p] - c)\n    return ans\nprint(minAbsoluteDifference([1, 2, 3, 4, 5, 6, 7, 8], 10))",
    "execution_output": Infinity
  },
  {
    "id": 455,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if k - now not in st:\n            st.add(now)\n            arr.append(now)\n        now += 1\n    return sum(arr)\nprint(minimumSum(0, 100))",
    "execution_output": 0
  },
  {
    "id": 456,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if k - now not in st:\n            st.add(now)\n            arr.append(now)\n        now += 1\n    return sum(arr)\nprint(minimumSum(1, 1))",
    "execution_output": 1
  },
  {
    "id": 457,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if k - now not in st:\n            st.add(now)\n            arr.append(now)\n        now += 1\n    return sum(arr)\nprint(minimumSum(10000, 3))",
    "execution_output": 50014999
  },
  {
    "id": 458,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if k - now not in st:\n            st.add(now)\n            arr.append(now)\n        now += 1\n    return sum(arr)\nprint(minimumSum(5, 3254323))",
    "execution_output": 15
  },
  {
    "id": 459,
    "q_id": "sample_171",
    "code": "def minimumSum(n: int, k: int) -> int:\n    arr = []\n    st = set()\n    now = 1\n    while len(arr) < n:\n        if k - now not in st:\n            st.add(now)\n            arr.append(now)\n        now += 1\n    return sum(arr)\nprint(minimumSum(234772, 2))",
    "execution_output": 27559063378
  },
  {
    "id": 460,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans) < n:\n        while k - cur in st:\n            cur += 1\n        ans.append(cur)\n        st.add(cur)\n        s += cur\n        cur += 1\n    return s\nprint(minimumSum(0, 100))",
    "execution_output": 0
  },
  {
    "id": 461,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans) < n:\n        while k - cur in st:\n            cur += 1\n        ans.append(cur)\n        st.add(cur)\n        s += cur\n        cur += 1\n    return s\nprint(minimumSum(100, 0))",
    "execution_output": 5050
  },
  {
    "id": 462,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans) < n:\n        while k - cur in st:\n            cur += 1\n        ans.append(cur)\n        st.add(cur)\n        s += cur\n        cur += 1\n    return s\nprint(minimumSum(100, 1))",
    "execution_output": 5050
  },
  {
    "id": 463,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans) < n:\n        while k - cur in st:\n            cur += 1\n        ans.append(cur)\n        st.add(cur)\n        s += cur\n        cur += 1\n    return s\nprint(minimumSum(100, 234772))",
    "execution_output": 5050
  },
  {
    "id": 464,
    "q_id": "sample_172",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = []\n    s = 0\n    cur = 1\n    st = set()\n    while len(ans) < n:\n        while k - cur in st:\n            cur += 1\n        ans.append(cur)\n        st.add(cur)\n        s += cur\n        cur += 1\n    return s\nprint(minimumSum(100, 3254323))",
    "execution_output": 5050
  },
  {
    "id": 465,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k - x not in seen:\n            seen.add(x)\n    return sum(seen)\nprint(minimumSum(1, 1))",
    "execution_output": 1
  },
  {
    "id": 466,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k - x not in seen:\n            seen.add(x)\n    return sum(seen)\nprint(minimumSum(100, 1))",
    "execution_output": 5050
  },
  {
    "id": 467,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k - x not in seen:\n            seen.add(x)\n    return sum(seen)\nprint(minimumSum(234772, 3))",
    "execution_output": 27559298149
  },
  {
    "id": 468,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k - x not in seen:\n            seen.add(x)\n    return sum(seen)\nprint(minimumSum(5, 3254323))",
    "execution_output": 15
  },
  {
    "id": 469,
    "q_id": "sample_173",
    "code": "def minimumSum(n: int, k: int) -> int:\n    seen = set()\n    x = 0\n    while len(seen) < n:\n        x += 1\n        if k - x not in seen:\n            seen.add(x)\n    return sum(seen)\nprint(minimumSum(234772, 3254323))",
    "execution_output": 27559063378
  },
  {
    "id": 470,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint(minimumSum(1, 1))",
    "execution_output": 1
  },
  {
    "id": 471,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint(minimumSum(100, 1))",
    "execution_output": 5050
  },
  {
    "id": 472,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint(minimumSum(100, 2))",
    "execution_output": 5050
  },
  {
    "id": 473,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint(minimumSum(100, 234772))",
    "execution_output": 5050
  },
  {
    "id": 474,
    "q_id": "sample_174",
    "code": "def minimumSum(n: int, k: int) -> int:\n    s = set()\n    current = 1\n    while len(s) < n:\n        if k - current not in s:\n            s.add(current)\n        current += 1\n    return sum(list(s))\nprint(minimumSum(100, 3254323))",
    "execution_output": 5050
  },
  {
    "id": 475,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumSum(0, 10))",
    "execution_output": 0
  },
  {
    "id": 476,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumSum(-5, 7))",
    "execution_output": 0
  },
  {
    "id": 477,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumSum(1, -3254323))",
    "execution_output": 1
  },
  {
    "id": 478,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumSum(100, 234772))",
    "execution_output": 5050
  },
  {
    "id": 479,
    "q_id": "sample_175",
    "code": "def minimumSum(n: int, k: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n:\n        ok = True\n        for ai in a:\n            if i + ai == k:\n                ok = False\n        if ok:\n            a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumSum(100, 3))",
    "execution_output": 5149
  },
  {
    "id": 480,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint(minimumSum(0, 10))",
    "execution_output": 0
  },
  {
    "id": 481,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint(minimumSum(-5, 8))",
    "execution_output": 0
  },
  {
    "id": 482,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint(minimumSum(10, 0))",
    "execution_output": 55
  },
  {
    "id": 483,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint(minimumSum(234772, 3254323))",
    "execution_output": 27559063378
  },
  {
    "id": 484,
    "q_id": "sample_176",
    "code": "def minimumSum(n: int, k: int) -> int:\n    ans = set()\n    i = 1\n    while len(ans) < n:\n        if k - i not in ans:\n            ans.add(i)\n        i += 1\n    return sum(ans)\nprint(minimumSum(3254323, 234772))",
    "execution_output": 5663540071071
  },
  {
    "id": 485,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n    return max(f)\nprint(maximizeTheProfit(10, []))",
    "execution_output": 0
  },
  {
    "id": 486,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n    return max(f)\nprint(maximizeTheProfit(20, [[0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999], [0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999], [0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999], [0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999], [0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999], [0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999], [0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999], [0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999], [0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999], [0, 3, 5000], [4, 7, 8000], [8, 11, 13000], [12, 15, 21000], [16, 19, 34000], [0, 19, 234772], [5, 5, 999], [6, 6, 999], [10, 10, 999], [14, 14, 999]]))",
    "execution_output": 234772
  },
  {
    "id": 487,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n    return max(f)\nprint(maximizeTheProfit
    "execution_output": 3254323
  },
  {
    "id": 488,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n    return max(f)\nprint(maximizeTheProfit(1000, [[0, 0, 1], [999, 999, 234772], [0, 999, 3254323], [100, 200, 50000], [300, 700, 120000], [800, 999, 150000]]))",
    "execution_output": 3254323
  },
  {
    "id": 489,
    "q_id": "sample_177",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    f = [0] * (n + 1)\n    t = 0\n    for x, y, z in sorted(offers, key=lambda it: it[1]):\n        x += 1\n        y += 1\n        while t < y:\n            f[t + 1] = f[t]\n            t += 1\n        f[y] = max(f[x - 1] + z, f[y])\n    return max(f)\nprint(maximizeTheProfit(50, [[0, 4, 3000], [5, 9, 3000], [10, 14, 3000], [15, 19, 3000], [20, 24, 3000], [25, 29, 3000], [30, 34, 3000], [35, 39, 3000], [40, 44, 3000], [45, 49, 3000], [0, 9, 5500], [10, 19, 5500], [20, 29, 5500], [30, 39, 5500], [40, 49, 5500], [0, 49, 20000], [12, 12, 100], [22, 22, 100], [32, 32, 100], [42, 42, 100], [0, 4, 3000], [5, 9, 3000], [10, 14, 3000], [15, 19, 3000], [20, 24, 3000], [25, 29, 3000], [30, 34, 3000], [35, 39, 3000], [40, 44, 3000], [45, 49, 3000], [0, 9, 5500], [10, 19, 5500], [20, 29, 5500], [30, 39, 5500], [40, 49, 5500], [0, 49, 20000], [12, 12, 100], [22, 22, 100], [32, 32, 100], [42, 42, 100], [0, 4, 3000], [5, 9, 3000], [10, 14, 3000], [15, 19, 3000], [20, 24, 3000], [25, 29, 3000], [30, 34, 3000], [35, 39, 3000], [40, 44, 3000], [45, 49, 3000], [0, 9, 5500], [10, 19, 5500], [20, 29, 5500], [30, 39, 5500], [40, 49, 5500], [0, 49, 20000], [12, 12, 100], [22, 22, 100], [32, 32, 100], [42, 42, 100], [0, 4, 3000], [5, 9, 3000], [10, 14, 3000], [15, 19, 3000], [20, 24, 3000], [25, 29, 3000], [30, 34, 3000], [35, 39, 3000], [40, 44, 3000], [45, 49, 3000], [0, 9, 5500], [10, 19, 5500], [20, 29, 5500], [30, 39, 5500], [40, 49, 5500], [0, 49, 20000], [12, 12, 100], [22, 22, 100], [32, 32, 100], [42, 42, 100], [0, 4, 3000], [5, 9, 3000], [10, 14, 3000], [15, 19, 3000], [20, 24, 3000], [25, 29, 3000], [30, 34, 3000], [35, 39, 3000], [40, 44, 3000], [45, 49, 3000], [0, 9, 5500], [10, 19, 5500], [20, 29, 5500], [30, 39, 5500], [40, 49, 5500], [0, 49, 20000], [12, 12, 100], [22, 22, 100], [32, 32, 100], [42, 42, 100]]))",
    "execution_output": 30000
  },
  {
    "id": 490,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint(maximizeTheProfit(100, [[0, 0, 1000000], [1, 1, 1000001], [2, 2, 1000002], [3, 3, 1000003], [4, 4, 1000004], [5, 5, 1000005], [6, 6, 1000006], [7, 7, 1000007], [8, 8, 1000008], [9, 9, 1000009], [10, 10, 1000010], [11, 11, 1000011], [12, 12, 1000012], [13, 13, 1000013], [14, 14, 1000014], [15, 15, 1000015], [16, 16, 1000016], [17, 17, 1000017], [18, 18, 1000018], [19, 19, 1000019], [20, 20, 1000020], [21, 21, 1000021], [22, 22, 1000022], [23, 23, 1000023], [24, 24, 1000024], [25, 25, 1000025], [26, 26, 1000026], [27, 27, 1000027], [28, 28, 1000028], [29, 29, 1000029], [30, 30, 1000030], [31, 31, 1000031], [32, 32, 1000032], [33, 33, 1000033], [34, 34, 1000034], [35, 35, 1000035], [36, 36, 1000036], [37, 37, 1000037], [38, 38, 1000038], [39, 39, 1000039], [40, 40, 1000040], [41, 41, 1000041], [42, 42, 1000042], [43, 43, 1000043], [44, 44, 1000044], [45, 45, 1000045], [46, 46, 1000046], [47, 47, 1000047], [48, 48, 1000048], [49, 49, 1000049], [50, 50, 1000050], [51, 51, 1000051], [52, 52, 1000052], [53, 53, 1000053], [54, 54, 1000054], [55, 55, 1000055], [56, 56, 1000056], [57, 57, 1000057], [58, 58, 1000058], [59, 59, 1000059], [60, 60, 1000060], [61, 61, 1000061], [62, 62, 1000062], [63, 63, 1000063], [64, 64, 1000064], [65, 65, 1000065], [66, 66, 1000066], [67, 67, 1000067], [68, 68, 1000068], [69, 69, 1000069], [70, 70, 1000070], [71, 71, 1000071], [72, 72, 1000072], [73, 73, 1000073], [74, 74, 1000074], [75, 75, 1000075], [76, 76, 1000076], [77, 77, 1000077], [78, 78, 1000078], [79, 79, 1000079], [80, 80, 1000080], [81, 81, 1000081], [82, 82, 1000082], [83, 83, 1000083], [84, 84, 1000084], [85, 85, 1000085], [86, 86, 1000086], [87, 87, 1000087], [88, 88, 1000088], [89, 89, 1000089], [90, 90, 1000090], [91, 91, 1000091], [92, 92, 1000092], [93, 93, 1000093], [94, 94, 1000094], [95, 95, 1000095], [96, 96, 1000096], [97, 97, 1000097], [98, 98, 1000098], [99, 99, 1000099]]))",
    "execution_output": 100004950
  },
  {
    "id": 491,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint(maximizeTheProfit(50, []))",
    "execution_output": 0
  },
  {
    "id": 492,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint(maximizeTheProfit(10, [[0, 9, 234772], [0, 9, 3254323], [0, 9, 99999999], [0, 9, 12345678901234567890], [0, 9, 5000000000]]))",
    "execution_output": 12345678901234567890
  },
  {
    "id": 493,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint(maximizeTheProfit(20, [[0, 0, 100000], [0, 5, 234772], [0, 19, 500000], [1, 3, 150000], [2, 6, 120000], [5, 5, 75000], [6, 10, 200000], [11, 15, 210000], [16, 19, 220000], [5, 14, 3254323], [7, 19, 300000], [3, 4, 90000], [4, 7, 110000], [8, 12, 130000], [12, 12, 80000], [13, 19, 250000], [2, 2, 70000], [9, 11, 95000], [10, 10, 60000], [14, 16, 140000], [15, 18, 160000], [0, 19, 400000], [6, 6, 85000], [6, 19, 1000000], [0, 1, 50000], [18, 19, 180000]]))",
    "execution_output": 3734323
  },
  {
    "id": 494,
    "q_id": "sample_178",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    p = [[] for _ in range(n)]\n    for l, r, w in offers:\n        p[r].append((l, w))\n    dp = [0] * n\n    for i in range(n):\n        if i:\n            dp[i] = max(dp[i], dp[i - 1])\n        for l, w in p[i]:\n            dp[i] = max(dp[i], (dp[l - 1] if l else 0) + w)\n    return dp[-1]\nprint(maximizeTheProfit(100, [[0, 1, 10000], [2, 3, 10001], [4, 5, 10002], [6, 7, 10003], [8, 9, 10004], [10, 11, 10005], [12, 13, 10006], [14, 15, 10007], [16, 17, 10008], [18, 19, 10009], [20, 21, 10010], [22, 23, 10011], [24, 25, 10012], [26, 27, 10013], [28, 29, 10014], [30, 31, 10015], [32, 33, 10016], [34, 35, 10017], [36, 37, 10018], [38, 39, 10019], [40, 41, 10020], [42, 43, 10021], [44, 45, 10022], [46, 47, 10023], [48, 49, 10024], [50, 51, 10025], [52, 53, 10026], [54, 55, 10027], [56, 57, 10028], [58, 59, 10029], [60, 61, 10030], [62, 63, 10031], [64, 65, 10032], [66, 67, 10033], [68, 69, 10034], [70, 71, 10035], [72, 73, 10036], [74, 75, 10037], [76, 77, 10038], [78, 79, 10039], [80, 81, 10040], [82, 83, 10041], [84, 85, 10042], [86, 87, 10043], [88, 89, 10044], [90, 91, 10045], [92, 93, 10046], [94, 95, 10047], [96, 97, 10048], [98, 99, 10049], [0, 99, 1000000], [0, 49, 400000], [50, 99, 450000], [10, 89, 500000], [20, 79, 550000]]))",
    "execution_output": 1000000
  },
  {
    "id": 495,
    "q_id": "sample_179",
    "code": "import heapq\n\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint(maximizeTheProfit(10, []))",
    "execution_output": 0
  },
  {
    "id": 496,
    "q_id": "sample_179",
    "code": "import heapq\n\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint(maximizeTheProfit(200, [[0, 0, 1000], [2, 2, 1001], [4, 4, 1002], [6, 6, 1003], [8, 8, 1004], [10, 10, 1005], [12, 12, 1006], [14, 14, 1007], [16, 16, 1008], [18, 18, 1009], [20, 20, 1010], [22, 22, 1011], [24, 24, 1012], [26, 26, 1013], [28, 28, 1014], [30, 30, 1015], [32, 32, 1016], [34, 34, 1017], [36, 36, 1018], [38, 38, 1019], [40, 40, 1020], [42, 42, 1021], [44, 44, 1022], [46, 46, 1023], [48, 48, 1024], [50, 50, 1025], [52, 52, 1026], [54, 54, 1027], [56, 56, 1028], [58, 58, 1029], [60, 60, 1030], [62, 62, 1031], [64, 64, 1032], [66, 66, 1033], [68, 68, 1034], [70, 70, 1035], [72, 72, 1036], [74, 74, 1037], [76, 76, 1038], [78, 78, 1039], [80, 80, 1040], [82, 82, 1041], [84, 84, 1042], [86, 86, 1043], [88, 88, 1044], [90, 90, 1045], [92, 92, 1046], [94, 94, 1047], [96, 96, 1048], [98, 98, 1049], [100, 100, 1050], [102, 102, 1051], [104, 104, 1052], [106, 106, 1053], [108, 108, 1054], [110, 110, 1055], [112, 112, 1056], [114, 114, 1057], [116, 116, 1058], [118, 118, 1059], [120, 120, 1060], [122, 122, 1061], [124, 124, 1062], [126, 126, 1063], [128, 128, 1064], [130, 130, 1065], [132, 132, 1066], [134, 134, 1067], [136, 136, 1068], [138, 138, 1069], [140, 140, 1070], [142, 142, 1071], [144, 144, 1072], [146, 146, 1073], [148, 148, 1074], [150, 150, 1075], [152, 152, 1076], [154, 154, 1077], [156, 156, 1078], [158, 158, 1079], [160, 160, 1080], [162, 162, 1081], [164, 164, 1082], [166, 166, 1083], [168, 168, 1084], [170, 170, 1085], [172, 172, 1086], [174, 174, 1087], [176, 176, 1088], [178, 178, 1089], [180, 180, 1090], [182, 182, 1091], [184, 184, 1092], [186, 186, 1093], [188, 188, 1094], [190, 190, 1095], [192, 192, 1096], [194, 194, 1097], [196, 196, 1098], [198, 198, 1099]]))",
    "execution_output": 104950
  },
  {
    "id": 497,
    "q_id": "sample_179",
    "code": "import heapq\n\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint(maximizeTheProfit(100, [[0, 99, 234772], [0, 99, 234773], [0, 99, 234774], [0, 99, 234775], [0, 99, 234776], [0, 99, 234777], [0, 99, 234778], [0, 99, 234779], [0, 99, 234780], [0, 99, 234781], [0, 99, 234782], [0, 99, 234783], [0, 99, 234784], [0, 99, 234785], [0, 99, 234786], [0, 99, 234787], [0, 99, 234788], [0, 99, 234789], [0, 99, 234790], [0, 99, 234791], [0, 99, 234792], [0, 99, 234793], [0, 99, 234794], [0, 99, 234795], [0, 99, 234796], [0, 99, 234797], [0, 99, 234798], [0, 99, 234799], [0, 99, 234800], [0, 99, 234801], [0, 99, 234802], [0, 99, 234803], [0, 99, 234804], [0, 99, 234805], [0, 99, 234806], [0, 99, 234807], [0, 99, 234808], [0, 99, 234809], [0, 99, 234810], [0, 99, 234811], [0, 99, 234812], [0, 99, 234813], [0, 99, 234814], [0, 99, 234815], [0, 99, 234816], [0, 99, 234817], [0, 99, 234818], [0, 99, 234819], [0, 99, 234820], [0, 99, 234821], [0, 99, 234822], [0, 99, 234823], [0, 99, 234824], [0, 99, 234825], [0, 99, 234826], [0, 99, 234827], [0, 99, 234828], [0, 99, 234829], [0, 99, 234830], [0, 99, 234831], [0, 99, 234832], [0, 99, 234833], [0, 99, 234834], [0, 99, 234835], [0, 99, 234836], [0, 99, 234837], [0, 99, 234838], [0, 99, 234839], [0, 99, 234840], [0, 99, 234841], [0, 99, 234842], [0, 99, 234843], [0, 99, 234844], [0, 99, 234845], [0, 99, 234846], [0, 99, 234847], [0, 99, 234848], [0, 99, 234849], [0, 99, 234850], [0, 99, 234851], [0, 99, 234852], [0, 99, 234853], [0, 99, 234854], [0, 99, 234855], [0, 99, 234856], [0, 99, 234857], [0, 99, 234858], [0, 99, 234859], [0, 99, 234860], [0, 99, 234861], [0, 99, 234862], [0, 99, 234863], [0, 99, 234864], [0, 99, 234865], [0, 99, 234866], [0, 99, 234867], [0, 99, 234868], [0, 99, 234869], [0, 99, 234870], [0, 99, 234871]]))",
    "execution_output": 234871
  },
  {
    "id": 498,
    "q_id": "sample_179",
    "code": "import heapq\n\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint(maximizeTheProfit(102, [[0, 1, 1], [1, 2, 1], [2, 3, 1], [3, 4, 1], [4, 5, 1], [5, 6, 1], [6, 7, 1], [7, 8, 1], [8, 9, 1], [9, 10, 1], [10, 11, 1], [11, 12, 1], [12, 13, 1], [13, 14, 1], [14, 15, 1], [15, 16, 1], [16, 17, 1], [17, 18, 1], [18, 19, 1], [19, 20, 1], [20, 21, 1], [21, 22, 1], [22, 23, 1], [23, 24, 1], [24, 25, 1], [25, 26, 1], [26, 27, 1], [27, 28, 1], [28, 29, 1], [29, 30, 1], [30, 31, 1], [31, 32, 1], [32, 33, 1], [33, 34, 1], [34, 35, 1], [35, 36, 1], [36, 37, 1], [37, 38, 1], [38, 39, 1], [39, 40, 1], [40, 41, 1], [41, 42, 1], [42, 43, 1], [43, 44, 1], [44, 45, 1], [45, 46, 1], [46, 47, 1], [47, 48, 1], [48, 49, 1], [49, 50, 1], [50, 51, 1], [51, 52, 1], [52, 53, 1], [53, 54, 1], [54, 55, 1], [55, 56, 1], [56, 57, 1], [57, 58, 1], [58, 59, 1], [59, 60, 1], [60, 61, 1], [61, 62, 1], [62, 63, 1], [63, 64, 1], [64, 65, 1], [65, 66, 1], [66, 67, 1], [67, 68, 1], [68, 69, 1], [69, 70, 1], [70, 71, 1], [71, 72, 1], [72, 73, 1], [73, 74, 1], [74, 75, 1], [75, 76, 1], [76, 77, 1], [77, 78, 1], [78, 79, 1], [79, 80, 1], [80, 81, 1], [81, 82, 1], [82, 83, 1], [83, 84, 1], [84, 85, 1], [85, 86, 1], [86, 87, 1], [87, 88, 1], [88, 89, 1], [89, 90, 1], [90, 91, 1], [91, 92, 1], [92, 93, 1], [93, 94, 1], [94, 95, 1], [95, 96, 1], [96, 97, 1], [97, 98, 1], [98, 99, 1], [99, 100, 1]]))",
    "execution_output": 50
  },
  {
    "id": 499,
    "q_id": "sample_179",
    "code": "import heapq\n\ndef maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    offers.sort()\n    q = []\n    ans = 0\n    for s, e, g in offers:\n        while len(q) > 0 and q[0][0] < s:\n            ans = max(ans, q[0][1])\n            heapq.heappop(q)\n        heapq.heappush(q, (e, ans + g))\n    while len(q) > 0:\n        _, v = heapq.heappop(q)\n        ans = max(ans, v)\n    return ans\nprint(maximizeTheProfit(3000000, [[234770, 234771, 100000], [234772, 234773, 3254323], [234774, 234780, 1234567], [234781, 234785, 765432], [234786, 234789, 2000000], [234790, 234792, 1111111], [234793, 234793, 999999], [234794, 234800, 1500000]]))",
    "execution_output": 10965432
  },
  {
    "id": 500,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint(maximizeTheProfit(1, [[0, 0, 234772], [0, 0, 3254323], [0, 0, 999999999], [0, 0, 1234567890], [0, 0, 7777777]]))",
    "execution_output": 1234567890
  },
  {
    "id": 501,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint(maximizeTheProfit(100, [[0, 0, 1], [1, 1, 2], [2, 2, 3], [3, 3, 4], [4, 4, 5], [5, 5, 6], [6, 6, 7], [7, 7, 8], [8, 8, 9], [9, 9, 10], [10, 10, 11], [11, 11, 12], [12, 12, 13], [13, 13, 14], [14, 14, 15], [15, 15, 16], [16, 16, 17], [17, 17, 18], [18, 18, 19], [19, 19, 20], [20, 20, 21], [21, 21, 22], [22, 22, 23], [23, 23, 24], [24, 24, 25], [25, 25, 26], [26, 26, 27], [27, 27, 28], [28, 28, 29], [29, 29, 30], [30, 30, 31], [31, 31, 32], [32, 32, 33], [33, 33, 34], [34, 34, 35], [35, 35, 36], [36, 36, 37], [37, 37, 38], [38, 38, 39], [39, 39, 40], [40, 40, 41], [41, 41, 42], [42, 42, 43], [43, 43, 44], [44, 44, 45], [45, 45, 46], [46, 46, 47], [47, 47, 48], [48, 48, 49], [49, 49, 50], [50, 50, 51], [51, 51, 52], [52, 52, 53], [53, 53, 54], [54, 54, 55], [55, 55, 56], [56, 56, 57], [57, 57, 58], [58, 58, 59], [59, 59, 60], [60, 60, 61], [61, 61, 62], [62, 62, 63], [63, 63, 64], [64, 64, 65], [65, 65, 66], [66, 66, 67], [67, 67, 68], [68, 68, 69], [69, 69, 70], [70, 70, 71], [71, 71, 72], [72, 72, 73], [73, 73, 74], [74, 74, 75], [75, 75, 76], [76, 76, 77], [77, 77, 78], [78, 78, 79], [79, 79, 80], [80, 80, 81], [81, 81, 82], [82, 82, 83], [83, 83, 84], [84, 84, 85], [85, 85, 86], [86, 86, 87], [87, 87, 88], [88, 88, 89], [89, 89, 90], [90, 90, 91], [91, 91, 92], [92, 92, 93], [93, 93, 94], [94, 94, 95], [95, 95, 96], [96, 96, 97], [97, 97, 98], [98, 98, 99], [99, 99, 100]]))",
    "execution_output": 5050
  },
  {
    "id": 502,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint(maximizeTheProfit(100, [[0, 0, 100000], [0, 1, 200000], [0, 2, 300000], [0, 3, 400000], [0, 4, 500000], [0, 5, 600000], [0, 6, 700000], [0, 7, 800000], [0, 8, 900000], [0, 9, 1000000], [0, 10, 1100000], [0, 11, 1200000], [0, 12, 1300000], [0, 13, 1400000], [0, 14, 1500000], [0, 15, 1600000], [0, 16, 1700000], [0, 17, 1800000], [0, 18, 1900000], [0, 19, 2000000], [0, 20, 2100000], [0, 21, 2200000], [0, 22, 2300000], [0, 23, 2400000], [0, 24, 2500000], [0, 25, 2600000], [0, 26, 2700000], [0, 27, 2800000], [0, 28, 2900000], [0, 29, 3000000], [0, 30, 3100000], [0, 31, 3200000], [0, 32, 3300000], [0, 33, 3400000], [0, 34, 3500000], [0, 35, 3600000], [0, 36, 3700000], [0, 37, 3800000], [0, 38, 3900000], [0, 39, 4000000], [0, 40, 4100000], [0, 41, 4200000], [0, 42, 4300000], [0, 43, 4400000], [0, 44, 4500000], [0, 45, 4600000], [0, 46, 4700000], [0, 47, 4800000], [0, 48, 4900000], [0, 49, 5000000], [0, 50, 5100000], [0, 51, 5200000], [0, 52, 5300000], [0, 53, 5400000], [0, 54, 5500000], [0, 55, 5600000], [0, 56, 5700000], [0, 57, 5800000], [0, 58, 5900000], [0, 59, 6000000], [0, 60, 6100000], [0, 61, 6200000], [0, 62, 6300000], [0, 63, 6400000], [0, 64, 6500000], [0, 65, 6600000], [0, 66, 6700000], [0, 67, 6800000], [0, 68, 6900000], [0, 69, 7000000], [0, 70, 7100000], [0, 71, 7200000], [0, 72, 7300000], [0, 73, 7400000], [0, 74, 7500000], [0, 75, 7600000], [0, 76, 7700000], [0, 77, 7800000], [0, 78, 7900000], [0, 79, 8000000], [0, 80, 8100000], [0, 81, 8200000], [0, 82, 8300000], [0, 83, 8400000], [0, 84, 8500000], [0, 85, 8600000], [0, 86, 8700000], [0, 87, 8800000], [0, 88, 8900000], [0, 89, 9000000], [0, 90, 9100000], [0, 91, 9200000], [0, 92, 9300000], [0, 93, 9400000], [0, 94, 9500000], [0, 95, 9600000], [0, 96, 9700000], [0, 97, 9800000], [0, 98, 9900000], [0, 99, 10000000]]))",
    "execution_output": 10000000
  },
  {
    "id": 503,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint(maximizeTheProfit(100, []))",
    "execution_output": 0
  },
  {
    "id": 504,
    "q_id": "sample_180",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort()\n    i = 0\n    for r in range(n + 1):\n        dp[r] = max(dp[r], dp[r - 1])\n        while i < len(offers) and offers[i][0] <= r:\n            dp[offers[i][1] + 1] = max(dp[offers[i][1] + 1], dp[offers[i][0]] + offers[i][2])\n            i += 1\n    return dp[-1]\nprint(maximizeTheProfit(20, [[0, 19, 500000], [0, 0, 1000000], [1, 1, -100], [2, 5, 234772], [6, 10, 3254323], [11, 19, 123456], [5, 5, 0], [3, 3, 999999999], [4, 18, 2500000], [12, 12, 7777777], [13, 13, 8888888], [14, 14, 9999999], [15, 15, 11111111], [16, 16, 22222222], [17, 17, 33333333], [18, 18, 44444444], [19, 19, 55555555]]))",
    "execution_output": 1197587651
  },
  {
    "id": 505,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort(key=lambda x: x[1])\n    m = len(offers)\n    po = 0\n    for j in range(n):\n        dp[j] = max(dp[j], dp[j - 1])\n        while po < m and offers[po][1] == j:\n            dp[j] = max(dp[j], dp[offers[po][0] - 1] + offers[po][2])\n            po += 1\n    return dp[n - 1]\nprint(maximizeTheProfit(1, [[0, 0, 3254323]]))",
    "execution_output": 3254323
  },
  {
    "id": 506,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort(key=lambda x: x[1])\n    m = len(offers)\n    po = 0\n    for j in range(n):\n        dp[j] = max(dp[j], dp[j - 1])\n        while po < m and offers[po][1] == j:\n            dp[j] = max(dp[j], dp[offers[po][0] - 1] + offers[po][2])\n            po += 1\n    return dp[n - 1]\nprint(maximizeTheProfit(100, [[0, 0, 234772], [0, 1, 234900], [1, 2, 235000], [1, 3, 235100], [2, 4, 235200], [3, 5, 235300], [4, 6, 235400], [5, 7, 235500], [6, 8, 235600], [7, 9, 235700], [8, 10, 235800], [9, 11, 235900], [10, 12, 236000], [11, 13, 236100], [12, 14, 236200], [13, 15, 236300], [14, 16, 236400], [15, 17, 236500], [16, 18, 236600], [17, 19, 236700], [18, 20, 236800], [19, 21, 236900], [20, 22, 237000], [21, 23, 237100], [22, 24, 237200], [23, 25, 237300], [24, 26, 237400], [25, 27, 237500], [26, 28, 237600], [27, 29, 237700], [28, 30, 237800], [29, 31, 237900], [30, 32, 238000], [31, 33, 238100], [32, 34, 238200], [33, 35, 238300], [34, 36, 238400], [35, 37, 238500], [36, 38, 238600], [37, 39, 238700], [38, 40, 238800], [39, 41, 238900], [40, 42, 239000], [41, 43, 239100], [42, 44, 239200], [43, 45, 239300], [44, 46, 239400], [45, 47, 239500], [46, 48, 239600], [47, 49, 239700], [48, 50, 239800], [49, 51, 239900], [50, 52, 240000], [51, 53, 240100], [52, 54, 240200], [53, 55, 240300], [54, 56, 240400], [55, 57, 240500], [56, 58, 240600], [57, 59, 240700], [58, 60, 240800], [59, 61, 240900], [60, 62, 241000], [61, 63, 241100], [62, 64, 241200], [63, 65, 241300], [64, 66, 241400], [65, 67, 241500], [66, 68, 241600], [67, 69, 241700], [68, 70, 241800], [69, 71, 241900], [70, 72, 242000], [71, 73, 242100], [72, 74, 242200], [73, 75, 242300], [74, 76, 242400], [75, 77, 242500], [76, 78, 242600], [77, 79, 242700], [78, 80, 242800], [79, 81, 242900], [80, 82, 243000], [81, 83, 243100], [82, 84, 243200], [83, 85, 243300], [84, 86, 243400], [85, 87, 243500], [86, 88, 243600], [87, 89, 243700], [88, 90, 243800], [89, 91, 243900], [90, 92, 244000], [91, 93, 244100], [92, 94, 244200], [93, 95, 244300], [94, 96, 244400], [95, 97, 244500], [96, 98, 244600], [97, 99, 244700]]))",
    "execution_output": 8151472
  },
  {
    "id": 507,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort(key=lambda x: x[1])\n    m = len(offers)\n    po = 0\n    for j in range(n):\n        dp[j] = max(dp[j], dp[j - 1])\n        while po < m and offers[po][1] == j:\n            dp[j] = max(dp[j], dp[offers[po][0] - 1] + offers[po][2])\n            po += 1\n    return dp[n - 1]\nprint(maximizeTheProfit(10, [[1, 3, 1000], [1, 3, 1000], [1, 3, 1000], [1, 3, 1000], [1, 3, 1000], [4, 6, 1500], [7, 9, 2000], [2, 5, 1800]]))",
    "execution_output": 4500
  },
  {
    "id": 508,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort(key=lambda x: x[1])\n    m = len(offers)\n    po = 0\n    for j in range(n):\n        dp[j] = max(dp[j], dp[j - 1])\n        while po < m and offers[po][1] == j:\n            dp[j] = max(dp[j], dp[offers[po][0] - 1] + offers[po][2])\n            po += 1\n    return dp[n - 1]\nprint(maximizeTheProfit(50, []))",
    "execution_output": 0
  },
  {
    "id": 509,
    "q_id": "sample_181",
    "code": "def maximizeTheProfit(n: int, offers: List[List[int]]) -> int:\n    dp = [0] * (n + 1)\n    offers.sort(key=lambda x: x[1])\n    m = len(offers)\n    po = 0\n    for j in range(n):\n        dp[j] = max(dp[j], dp[j - 1])\n        while po < m and offers[po][1] == j:\n            dp[j] = max(dp[j], dp[offers[po][0] - 1] + offers[po][2])\n            po += 1\n    return dp[n - 1]\nprint(maximizeTheProfit(20, [[0, 0, 0], [0, 5, 234772], [10, 10, 0], [0, 19, 100], [1, 19, 3254323], [5, 15, 234772], [2, 2, 0], [3, 4, 500], [6, 6, 0], [7, 7, 0]]))",
    "execution_output": 3254323
  },
  {
    "id": 510,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    prev = collections.defaultdict(list)\n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    return best[N]\nprint(maximizeTheProfit(0, []))",
    "execution_output": 0
  },
  {
    "id": 511,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    prev = collections.defaultdict(list)\n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    return best[N]\nprint(maximizeTheProfit(100, [[0, 0, 1000000], [1, 1, 1000001], [2, 2, 1000002], [3, 3, 1000003], [4, 4, 1000004], [5, 5, 1000005], [6, 6, 1000006], [7, 7, 1000007], [8, 8, 1000008], [9, 9, 1000009], [10, 10, 1000010], [11, 11, 1000011], [12, 12, 1000012], [13, 13, 1000013], [14, 14, 1000014], [15, 15, 1000015], [16, 16, 1000016], [17, 17, 1000017], [18, 18, 1000018], [19, 19, 1000019], [20, 20, 1000020], [21, 21, 1000021], [22, 22, 1000022], [23, 23, 1000023], [24, 24, 1000024], [25, 25, 1000025], [26, 26, 1000026], [27, 27, 1000027], [28, 28, 1000028], [29, 29, 1000029], [30, 30, 1000030], [31, 31, 1000031], [32, 32, 1000032], [33, 33, 1000033], [34, 34, 1000034], [35, 35, 1000035], [36, 36, 1000036], [37, 37, 1000037], [38, 38, 1000038], [39, 39, 1000039], [40, 40, 1000040], [41, 41, 1000041], [42, 42, 1000042], [43, 43, 1000043], [44, 44, 1000044], [45, 45, 1000045], [46, 46, 1000046], [47, 47, 1000047], [48, 48, 1000048], [49, 49, 1000049], [0, 1, 2000000], [2, 3, 2000001], [4, 5, 2000002], [6, 7, 2000003], [8, 9, 2000004], [10, 11, 2000005], [12, 13, 2000006], [14, 15, 2000007], [16, 17, 2000008], [18, 19, 2000009], [20, 21, 2000010], [22, 23, 2000011], [24, 25, 2000012], [26, 27, 2000013], [28, 29, 2000014], [30, 31, 2000015], [32, 33, 2000016], [34, 35, 2000017], [36, 37, 2000018], [38, 39, 2000019], [40, 41, 2000020], [42, 43, 2000021], [44, 45, 2000022], [46, 47, 2000023], [48, 49, 2000024], [10, 14, 3000000], [11, 15, 3000001], [12, 16, 3000002], [13, 17, 3000003], [14, 18, 3000004], [15, 19, 3000005], [16, 20, 3000006], [17, 21, 3000007], [18, 22, 3000008], [19, 23, 3000009], [20, 24, 3000010], [21, 25, 3000011], [22, 26, 3000012], [23, 27, 3000013], [24, 28, 3000014], [25, 29, 3000015], [26, 30, 3000016], [27, 31, 3000017], [28, 32, 3000018], [29, 33, 3000019], [30, 34, 3000020], [31, 35, 3000021], [32, 36, 3000022], [33, 37, 3000023], [34, 38, 3000024]]))",
    "execution_output": 50001225
  },
  {
    "id": 512,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    prev = collections.defaultdict(list)\n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    return best[N]\nprint(maximizeTheProfit(100, [[0, 10, 10000], [1, 10, 10001], [2, 10, 10002], [3, 10, 10003], [4, 10, 10004], [5, 10, 10005], [6, 10, 10006], [7, 10, 10007], [8, 10, 10008], [9, 10, 10009], [10, 20, 20010], [11, 20, 20011], [12, 20, 20012], [13, 20, 20013], [14, 20, 20014], [15, 20, 20015], [16, 20, 20016], [17, 20, 20017], [18, 20, 20018], [19, 20, 20019], [20, 30, 30020], [21, 30, 30021], [22, 30, 30022], [23, 30, 30023], [24, 30, 30024], [25, 30, 30025], [26, 30, 30026], [27, 30, 30027], [28, 30, 30028], [29, 30, 30029], [30, 40, 40030], [31, 40, 40031], [32, 40, 40032], [33, 40, 40033], [34, 40, 40034], [35, 40, 40035], [36, 40, 40036], [37, 40, 40037], [38, 40, 40038], [39, 40, 40039], [40, 50, 50040], [41, 50, 50041], [42, 50, 50042], [43, 50, 50043], [44, 50, 50044], [45, 50, 50045], [46, 50, 50046], [47, 50, 50047], [48, 50, 50048], [49, 50, 50049], [50, 60, 60050], [51, 60, 60051], [52, 60, 60052], [53, 60, 60053], [54, 60, 60054], [55, 60, 60055], [56, 60, 60056], [57, 60, 60057], [58, 60, 60058], [59, 60, 60059], [60, 70, 70060], [61, 70, 70061], [62, 70, 70062], [63, 70, 70063], [64, 70, 70064], [65, 70, 70065], [66, 70, 70066], [67, 70, 70067], [68, 70, 70068], [69, 70, 70069], [70, 80, 80070], [71, 80, 80071], [72, 80, 80072], [73, 80, 80073], [74, 80, 80074], [75, 80, 80075], [76, 80, 80076], [77, 80, 80077], [78, 80, 80078], [79, 80, 80079], [80, 90, 90080], [81, 90, 90081], [82, 90, 90082], [83, 90, 90083], [84, 90, 90084], [85, 90, 90085], [86, 90, 90086], [87, 90, 90087], [88, 90, 90088], [89, 90, 90089], [89, 99, 99089], [90, 99, 99090], [91, 99, 99091], [92, 99, 99092], [93, 99, 99093], [94, 99, 99094], [95, 99, 99095], [96, 99, 99096], [97, 99, 99097], [98, 99, 99098]]))",
    "execution_output": 549539
  },
  {
    "id": 513,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    prev = collections.defaultdict(list)\n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    return best[N]\nprint(maximizeTheProfit(1, [[0, 0, 0], [0, 0, 1], [0, 0, 10], [0, 0, 10], [0, 0, 2]]))",
    "execution_output": 10
  },
  {
    "id": 514,
    "q_id": "sample_182",
    "code": "def maximizeTheProfit(N: int, offers: List[List[int]]) -> int:\n    best = [0] * (N + 1)\n    prev = collections.defaultdict(list)\n    for a, b, w in offers:\n        prev[b].append((a - 1, w))\n    for i in range(N):\n        best[i + 1] = max(best[i], best[i + 1])\n        for p, w in prev[i]:\n            best[i + 1] = max(best[i + 1], best[p + 1] + w)\n    return best[N]\nprint(maximizeTheProfit(50, [[0, 49, 3254323], [0, 49, 3254323], [0, 0, 0], [1, 1, 0], [2, 2, 0], [10, 20, 0], [5, 15, 0], [16, 30, 50000], [31, 49, 234772], [0, 10, 1000], [11, 30, 2000], [0, 30, 1500], [30, 30, 5], [40, 40, 0], [45, 45, 1], [46, 49, 3]]))",
    "execution_output": 3254323
  },
  {
    "id": 515,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray([], 5))",
    "execution_output": 0
  },
  {
    "id": 516,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray([42], 3254323))",
    "execution_output": 1
  },
  {
    "id": 517,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], 0))",
    "execution_output": 100
  },
  {
    "id": 518,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray(list(range(100)), 99))",
    "execution_output": 1
  },
  {
    "id": 519,
    "q_id": "sample_183",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    mp = defaultdict(list)\n    for i, x in enumerate(nums):\n        mp[x].append(i)\n    for a in mp.values():\n        m = len(a)\n        j = 0\n        for i in range(m):\n            while a[i] - a[j] - (i - j) > k:\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray
    "execution_output": 21
  },
  {
    "id": 520,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n + 1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n + 1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed] - cs[i][st] + 1 - (ed - st + 1) > k:\n                st += 1\n            ans = max(ans, ed - st + 1)\n    return ans\nprint(longestEqualSubarray([], 0))",
    "execution_output": 0
  },
  {
    "id": 521,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n + 1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n + 1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed] - cs[i][st] + 1 - (ed - st + 1) > k:\n                st += 1\n            ans = max(ans, ed - st + 1)\n    return ans\nprint(longestEqualSubarray([1], 3254323))",
    "execution_output": 1
  },
  {
    "id": 522,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n + 1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n + 1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed] - cs[i][st] + 1 - (ed - st + 1) > k:\n                st += 1\n            ans = max(ans, ed - st + 1)\n    return ans\nprint(longestEqualSubarray
    "execution_output": 100
  },
  {
    "id": 523,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n + 1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n + 1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed] - cs[i][st] + 1 - (ed - st + 1) > k:\n                st += 1\n            ans = max(ans, ed - st + 1)\n    return ans\nprint(longestEqualSubarray(list(range(1, 101)), 234772))",
    "execution_output": 1
  },
  {
    "id": 524,
    "q_id": "sample_184",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    cs = [[] for _ in range(n + 1)]\n    for i, c in enumerate(nums):\n        cs[c].append(i)\n    ans = 0\n    for i in range(1, n + 1):\n        st = 0\n        m = len(cs[i])\n        for ed in range(m):\n            while st < ed and cs[i][ed] - cs[i][st] + 1 - (ed - st + 1) > k:\n                st += 1\n            ans = max(ans, ed - st + 1)\n    return ans\nprint(longestEqualSubarray([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], 50))",
    "execution_output": 50
  },
  {
    "id": 525,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j - i + 1)\n    return ans\nprint(longestEqualSubarray([], 10))",
    "execution_output": 0
  },
  {
    "id": 526,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j - i + 1)\n    return ans\nprint(longestEqualSubarray([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772], 0))",
    "execution_output": 100
  },
  {
    "id": 527,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j - i + 1)\n    return ans\nprint(longestEqualSubarray
    "execution_output": 51
  },
  {
    "id": 528,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j - i + 1)\n    return ans\nprint(longestEqualSubarray([234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789, 234772, 3254323, -999999999, 888888888, -123456789], 0))",
    "execution_output": 1
  },
  {
    "id": 529,
    "q_id": "sample_185",
    "code": "def longestEqualSubarray(A: List[int], K: int) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = 0\n    for row in locs.values():\n        i = 0\n        for j, jx in enumerate(row):\n            while row[j] - row[i] - (j - i) > K:\n                i += 1\n            ans = max(ans, j - i + 1)\n    return ans\nprint(longestEqualSubarray([3254323, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 3254323], 98))",
    "execution_output": 2
  },
  {
    "id": 530,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    can = n - k\n    table = defaultdict(list)\n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0\n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r] - lst[l] >= r - l + 1 + k:\n                l += 1\n            ans = max(ans, r - l + 1)\n    return ans\nprint(longestEqualSubarray
    "execution_output": 1
  },
  {
    "id": 531,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    can = n - k\n    table = defaultdict(list)\n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0\n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r] - lst[l] >= r - l + 1 + k:\n                l += 1\n            ans = max(ans, r - l + 1)\n    return ans\nprint(longestEqualSubarray
    "execution_output": 100
  },
  {
    "id": 532,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    can = n - k\n    table = defaultdict(list)\n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0\n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r] - lst[l] >= r - l + 1 + k:\n                l += 1\n            ans = max(ans, r - l + 1)\n    return ans\nprint(longestEqualSubarray(list(range(100)), 100))",
    "execution_output": 1
  },
  {
    "id": 533,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    can = n - k\n    table = defaultdict(list)\n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0\n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r] - lst[l] >= r - l + 1 + k:\n                l += 1\n            ans = max(ans, r - l + 1)\n    return ans\nprint(longestEqualSubarray([], 5))",
    "execution_output": 0
  },
  {
    "id": 534,
    "q_id": "sample_186",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    n = len(nums)\n    can = n - k\n    table = defaultdict(list)\n    for j in range(len(nums)):\n        table[nums[j]].append(j)\n    ans = 0\n    for ke in table:\n        lst = table[ke]\n        n1 = len(lst)\n        l = 0\n        for r in range(n1):\n            while lst[r] - lst[l] >= r - l + 1 + k:\n                l += 1\n            ans = max(ans, r - l + 1)\n    return ans\nprint(longestEqualSubarray([-234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0, -234772, 0, 3254323, -234772, 0], 150))",
    "execution_output": 40
  },
  {
    "id": 535,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i - 1] - 1\n            while cnt > k:\n                cnt -= l[j + 1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray([], 5))",
    "execution_output": 0
  },
  {
    "id": 536,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i - 1] - 1\n            while cnt > k:\n                cnt -= l[j + 1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray
    "execution_output": 100
  },
  {
    "id": 537,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i - 1] - 1\n            while cnt > k:\n                cnt -= l[j + 1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 1000))",
    "execution_output": 1
  },
  {
    "id": 538,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i - 1] - 1\n            while cnt > k:\n                cnt -= l[j + 1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray([234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4, 234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4, 234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4, 234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4, 234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4, 234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4, 234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4, 234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4, 234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4, 234772, -234772, 1, -1, 2, -2, 3, -3, 4, -4], 10 ** 9))",
    "execution_output": 10
  },
  {
    "id": 539,
    "q_id": "sample_187",
    "code": "def longestEqualSubarray(nums: List[int], k: int) -> int:\n    ans = 0\n    d = defaultdict(list)\n    for i, a in enumerate(nums):\n        d[a].append(i)\n    for l in d.values():\n        cnt = 0\n        j = 0\n        for i in range(len(l)):\n            if i:\n                cnt += l[i] - l[i - 1] - 1\n            while cnt > k:\n                cnt -= l[j + 1] - l[j] - 1\n                j += 1\n            ans = max(ans, i - j + 1)\n    return ans\nprint(longestEqualSubarray([1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3, 1, 2, 1, 3], 0))",
    "execution_output": 1
  },
  {
    "id": 540,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint(minimumPossibleSum(234772, 1))",
    "execution_output": 27559063378
  },
  {
    "id": 541,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint(minimumPossibleSum(234772, 2))",
    "execution_output": 27559063378
  },
  {
    "id": 542,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint(minimumPossibleSum(1, 1))",
    "execution_output": 1
  },
  {
    "id": 543,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint(minimumPossibleSum(234772, 469544))",
    "execution_output": 27559063378
  },
  {
    "id": 544,
    "q_id": "sample_194",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    k = target // 2\n    m = min(k, n)\n    ans = (1 + m) * m // 2\n    t = n - m\n    ans += (target + target + t - 1) * t // 2\n    return ans\nprint(minimumPossibleSum(3254323, 234772))",
    "execution_output": 5663540071071
  },
  {
    "id": 545,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target // 2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumPossibleSum(0, 10))",
    "execution_output": 0
  },
  {
    "id": 546,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target // 2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumPossibleSum(5, 0))",
    "execution_output": 10
  },
  {
    "id": 547,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target // 2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumPossibleSum(234772, 5))",
    "execution_output": 27559532918
  },
  {
    "id": 548,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target // 2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumPossibleSum(1627161, 3254322))",
    "execution_output": 1323827273541
  },
  {
    "id": 549,
    "q_id": "sample_195",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    a = []\n    i = 1\n    while len(a) < n and i <= target // 2:\n        a.append(i)\n        i += 1\n    i = target\n    while len(a) < n:\n        a.append(i)\n        i += 1\n    return sum(a)\nprint(minimumPossibleSum(4, -3))",
    "execution_output": -6
  },
  {
    "id": 550,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2]:\n        return (1 + n) * n // 2\n    if n - 1 + n < target:\n        return (1 + n) * n // 2\n    not_used = list(range(target // 2 + 1, target))\n    l = n + len(not_used)\n    to_ret = (1 + l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint(minimumPossibleSum(1, 1))",
    "execution_output": 1
  },
  {
    "id": 551,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2]:\n        return (1 + n) * n // 2\n    if n - 1 + n < target:\n        return (1 + n) * n // 2\n    not_used = list(range(target // 2 + 1, target))\n    l = n + len(not_used)\n    to_ret = (1 + l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint(minimumPossibleSum(100000, 2))",
    "execution_output": 5000050000
  },
  {
    "id": 552,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2]:\n        return (1 + n) * n // 2\n    if n - 1 + n < target:\n        return (1 + n) * n // 2\n    not_used = list(range(target // 2 + 1, target))\n    l = n + len(not_used)\n    to_ret = (1 + l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint(minimumPossibleSum(234772, 200000))",
    "execution_output": 41036128606
  },
  {
    "id": 553,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2]:\n        return (1 + n) * n // 2\n    if n - 1 + n < target:\n        return (1 + n) * n // 2\n    not_used = list(range(target // 2 + 1, target))\n    l = n + len(not_used)\n    to_ret = (1 + l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint(minimumPossibleSum(234772, 3254323))",
    "execution_output": 27559063378
  },
  {
    "id": 554,
    "q_id": "sample_196",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    if target in [1, 2]:\n        return (1 + n) * n // 2\n    if n - 1 + n < target:\n        return (1 + n) * n // 2\n    not_used = list(range(target // 2 + 1, target))\n    l = n + len(not_used)\n    to_ret = (1 + l) * l // 2\n    to_ret -= (not_used[0] + not_used[-1]) * len(not_used) // 2\n    return to_ret\nprint(minimumPossibleSum(100000, 199999))",
    "execution_output": 5000149999
  },
  {
    "id": 555,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint(minimumPossibleSum(1, 2))",
    "execution_output": 1
  },
  {
    "id": 556,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint(minimumPossibleSum(0, 100))",
    "execution_output": 1
  },
  {
    "id": 557,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint(minimumPossibleSum(-10, 50))",
    "execution_output": 1
  },
  {
    "id": 558,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint(minimumPossibleSum(100, -234772))",
    "execution_output": 5050
  },
  {
    "id": 559,
    "q_id": "sample_197",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    i = 1\n    arr = {1}\n    while len(arr) < n:\n        i += 1\n        if target - i not in arr:\n            arr.add(i)\n    return sum(arr)\nprint(minimumPossibleSum(10000, 234772))",
    "execution_output": 50005000
  },
  {
    "id": 560,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    return sum(arr)\nprint(minimumPossibleSum(0, 10))",
    "execution_output": 15
  },
  {
    "id": 561,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    return sum(arr)\nprint(minimumPossibleSum(5, 0))",
    "execution_output": 10
  },
  {
    "id": 562,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    return sum(arr)\nprint(minimumPossibleSum(4, -5))",
    "execution_output": -14
  },
  {
    "id": 563,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    return sum(arr)\nprint(minimumPossibleSum(-3, 10))",
    "execution_output": 15
  },
  {
    "id": 564,
    "q_id": "sample_198",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    arr = []\n    for i in range(1, target // 2 + 1):\n        arr.append(i)\n        if len(arr) == n:\n            return sum(arr)\n    counter = target\n    while len(arr) < n:\n        arr.append(counter)\n        counter += 1\n    return sum(arr)\nprint(minimumPossibleSum(234772, 3254323))",
    "execution_output": 27559063378
  },
  {
    "id": 565,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1, 2 * 10 ** 5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target - x)\n        if n == 0:\n            break\n    return curr_sum\nprint(minimumPossibleSum(200010, 3254323))",
    "execution_output": 20001900045
  },
  {
    "id": 566,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1, 2 * 10 ** 5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target - x)\n        if n == 0:\n            break\n    return curr_sum\nprint(minimumPossibleSum(200010, 0))",
    "execution_output": 20001900045
  },
  {
    "id": 567,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1, 2 * 10 ** 5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target - x)\n        if n == 0:\n            break\n    return curr_sum\nprint(minimumPossibleSum(1, 234772))",
    "execution_output": 1
  },
  {
    "id": 568,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1, 2 * 10 ** 5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target - x)\n        if n == 0:\n            break\n    return curr_sum\nprint(minimumPossibleSum(100005, 200010))",
    "execution_output": 5000550015
  },
  {
    "id": 569,
    "q_id": "sample_199",
    "code": "def minimumPossibleSum(n: int, target: int) -> int:\n    curr_sum = 0\n    banned = set()\n    for x in range(1, 2 * 10 ** 5 + 10):\n        if x not in banned:\n            curr_sum += x\n            n -= 1\n            banned.add(target - x)\n        if n == 0:\n            break\n    return curr_sum\nprint(minimumPossibleSum(200010, -999999))",
    "execution_output": 20001900045
  },
  {
    "id": 570,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint(minOperations([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 123))",
    "execution_output": 0
  },
  {
    "id": 571,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint(minOperations([3254323, 234772, 99999], 3141592))",
    "execution_output": 19
  },
  {
    "id": 572,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint(minOperations([123456, 789012], 0))",
    "execution_output": 0
  },
  {
    "id": 573,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint(minOperations([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 2001))",
    "execution_output": -1
  },
  {
    "id": 574,
    "q_id": "sample_200",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    ans = 0\n    while True:\n        mn = None\n        y = target\n        nums.sort(reverse=True)\n        for x in nums:\n            if y >= x:\n                y -= x\n            elif mn is None or mn > x:\n                mn = x\n        if y == 0:\n            return ans\n        ans += 1\n        nums.remove(mn)\n        nums.append(mn // 2)\n        nums.append(mn // 2)\nprint(minOperations([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [2 ** 20] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 2 ** 20 - 1))",
    "execution_output": 20
  },
  {
    "id": 575,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    cnt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for a in nums:\n        l = a.bit_length() - 1\n        cnt[l] += 1\n    ans = 0\n    for k in range(31):\n        if target >> k & 1:\n            i = k\n            while cnt[i] == 0:\n                i += 1\n            while i > k:\n                cnt[i] -= 1\n                cnt[i - 1] += 2\n                ans += 1\n                i -= 1\n            cnt[k] -= 1\n        cnt[k + 1] += cnt[k] // 2\n    return ans\nprint(minOperations
    "execution_output": 10
  },
  {
    "id": 576,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    cnt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for a in nums:\n        l = a.bit_length() - 1\n        cnt[l] += 1\n    ans = 0\n    for k in range(31):\n        if target >> k & 1:\n            i = k\n            while cnt[i] == 0:\n                i += 1\n            while i > k:\n                cnt[i] -= 1\n                cnt[i - 1] += 2\n                ans += 1\n                i -= 1\n            cnt[k] -= 1\n        cnt[k + 1] += cnt[k] // 2\n    return ans\nprint(minOperations([2097152, 1048576, 262144, 8192, 4096, 256, 1], 3254323))",
    "execution_output": 11
  },
  {
    "id": 577,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    cnt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for a in nums:\n        l = a.bit_length() - 1\n        cnt[l] += 1\n    ans = 0\n    for k in range(31):\n        if target >> k & 1:\n            i = k\n            while cnt[i] == 0:\n                i += 1\n            while i > k:\n                cnt[i] -= 1\n                cnt[i - 1] += 2\n                ans += 1\n                i -= 1\n            cnt[k] -= 1\n        cnt[k + 1] += cnt[k] // 2\n    return ans\nprint(minOperations([1, 2, 4], 1000))",
    "execution_output": -1
  },
  {
    "id": 578,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    cnt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for a in nums:\n        l = a.bit_length() - 1\n        cnt[l] += 1\n    ans = 0\n    for k in range(31):\n        if target >> k & 1:\n            i = k\n            while cnt[i] == 0:\n                i += 1\n            while i > k:\n                cnt[i] -= 1\n                cnt[i - 1] += 2\n                ans += 1\n                i -= 1\n            cnt[k] -= 1\n        cnt[k + 1] += cnt[k] // 2\n    return ans\nprint(minOperations([2 ** 31], 2 ** 31 - 123456))",
    "execution_output": 25
  },
  {
    "id": 579,
    "q_id": "sample_201",
    "code": "def minOperations(nums: List[int], target: int) -> int:\n    if sum(nums) < target:\n        return -1\n    cnt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for a in nums:\n        l = a.bit_length() - 1\n        cnt[l] += 1\n    ans = 0\n    for k in range(31):\n        if target >> k & 1:\n            i = k\n            while cnt[i] == 0:\n                i += 1\n            while i > k:\n                cnt[i] -= 1\n                cnt[i - 1] += 2\n                ans += 1\n                i -= 1\n            cnt[k] -= 1\n        cnt[k + 1] += cnt[k] // 2\n    return ans\nprint(minOperations([1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [2, 2, 2, 2, 2, 2, 2, 2, 2, 2] + [4, 4, 4, 4, 4, 4, 4, 4, 4, 4] + [8, 8, 8, 8, 8, 8, 8, 8, 8, 8] + [16, 16, 16, 16, 16, 16, 16, 16, 16, 16] + [32, 32, 32, 32, 32, 32, 32, 32, 32, 32] + [64, 64, 64, 64, 64, 64, 64, 64, 64, 64] + [128, 128, 128, 128, 128, 128, 128, 128, 128, 128] + [256, 256, 256, 256, 256, 256, 256, 256, 256, 256] + [512, 512, 512, 512, 512, 512, 512, 512, 512, 512], 10000))",
    "execution_output": 0
  },
  {
    "id": 580,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count('0')\n    a = ['00', '25', '75', '50']\n    for x in a:\n        i = 1\n        j = n - 1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0:\n            continue\n        ans = min(ans, n - (j + 3))\n    return ans\nprint(minimumOperations('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": 0
  },
  {
    "id": 581,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count('0')\n    a = ['00', '25', '75', '50']\n    for x in a:\n        i = 1\n        j = n - 1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0:\n            continue\n        ans = min(ans, n - (j + 3))\n    return ans\nprint(minimumOperations('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))",
    "execution_output": 4
  },
  {
    "id": 582,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count('0')\n    a = ['00', '25', '75', '50']\n    for x in a:\n        i = 1\n        j = n - 1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0:\n            continue\n        ans = min(ans, n - (j + 3))\n    return ans\nprint(minimumOperations('123467891234678912346789123467891234678912346789123467891234678912346789123467891234678912346789123467891234'))",
    "execution_output": 108
  },
  {
    "id": 583,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count('0')\n    a = ['00', '25', '75', '50']\n    for x in a:\n        i = 1\n        j = n - 1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0:\n            continue\n        ans = min(ans, n - (j + 3))\n    return ans\nprint(minimumOperations('234772'))",
    "execution_output": 6
  },
  {
    "id": 584,
    "q_id": "sample_202",
    "code": "def minimumOperations(num: str) -> int:\n    n = len(num)\n    ans = n - num.count('0')\n    a = ['00', '25', '75', '50']\n    for x in a:\n        i = 1\n        j = n - 1\n        while j >= 0 and i >= 0:\n            if j >= 0 and num[j] == x[i]:\n                i -= 1\n                j -= 1\n            else:\n                j -= 1\n        if i >= 0:\n            continue\n        ans = min(ans, n - (j + 3))\n    return ans\nprint(minimumOperations('3254323'))",
    "execution_output": 4
  },
  {
    "id": 585,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    num = '00' + num\n    ans = len(num) - 2\n    n = len(num)\n    for e in ends:\n        u, v = (e[0], e[1])\n        idx1 = n - 1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1 - 1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n - 2 - idx2)\n    return ans\nprint(minimumOperations('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))",
    "execution_output": 4
  },
  {
    "id": 586,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    num = '00' + num\n    ans = len(num) - 2\n    n = len(num)\n    for e in ends:\n        u, v = (e[0], e[1])\n        idx1 = n - 1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1 - 1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n - 2 - idx2)\n    return ans\nprint(minimumOperations('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": 0
  },
  {
    "id": 587,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    num = '00' + num\n    ans = len(num) - 2\n    n = len(num)\n    for e in ends:\n        u, v = (e[0], e[1])\n        idx1 = n - 1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1 - 1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n - 2 - idx2)\n    return ans\nprint(minimumOperations('7'))",
    "execution_output": 1
  },
  {
    "id": 588,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    num = '00' + num\n    ans = len(num) - 2\n    n = len(num)\n    for e in ends:\n        u, v = (e[0], e[1])\n        idx1 = n - 1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1 - 1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n - 2 - idx2)\n    return ans\nprint(minimumOperations('3254323'))",
    "execution_output": 4
  },
  {
    "id": 589,
    "q_id": "sample_203",
    "code": "def minimumOperations(num: str) -> int:\n    ends = ['00', '25', '50', '75']\n    num = '00' + num\n    ans = len(num) - 2\n    n = len(num)\n    for e in ends:\n        u, v = (e[0], e[1])\n        idx1 = n - 1\n        while idx1 > 0 and num[idx1] != v:\n            idx1 -= 1\n        idx2 = idx1 - 1\n        while idx2 > 0 and num[idx2] != u:\n            idx2 -= 1\n        if idx1 > 0 and idx2 > 0:\n            ans = min(ans, n - 2 - idx2)\n    return ans\nprint(minimumOperations('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'))",
    "execution_output": 1
  },
  {
    "id": 590,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    ans = len(s)\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint(minimumOperations(''))",
    "execution_output": 0
  },
  {
    "id": 591,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    ans = len(s)\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint(minimumOperations('234772'))",
    "execution_output": 6
  },
  {
    "id": 592,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    ans = len(s)\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint(minimumOperations('3254323'))",
    "execution_output": 4
  },
  {
    "id": 593,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    ans = len(s)\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint(minimumOperations('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'))",
    "execution_output": 100
  },
  {
    "id": 594,
    "q_id": "sample_204",
    "code": "def minimumOperations(s: str) -> int:\n    ans = len(s)\n    if s.count('0'):\n        ans = len(s) - 1\n    st = {'00', '25', '50', '75'}\n    for i, x in enumerate(s):\n        for y in s[i + 1:]:\n            if x + y in st:\n                ans = min(ans, len(s) - i - 2)\n    return ans\nprint(minimumOperations('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010'))",
    "execution_output": 1
  },
  {
    "id": 595,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if '0' in num else len(num)\n    modes = ['00', '25', '50', '75']\n    for mode in modes:\n        i, j = (len(num) - 1, len(mode) - 1)\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint(minimumOperations('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))",
    "execution_output": 4
  },
  {
    "id": 596,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if '0' in num else len(num)\n    modes = ['00', '25', '50', '75']\n    for mode in modes:\n        i, j = (len(num) - 1, len(mode) - 1)\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint(minimumOperations('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": 0
  },
  {
    "id": 597,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if '0' in num else len(num)\n    modes = ['00', '25', '50', '75']\n    for mode in modes:\n        i, j = (len(num) - 1, len(mode) - 1)\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint(minimumOperations('234772'))",
    "execution_output": 6
  },
  {
    "id": 598,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if '0' in num else len(num)\n    modes = ['00', '25', '50', '75']\n    for mode in modes:\n        i, j = (len(num) - 1, len(mode) - 1)\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint(minimumOperations('3254323'))",
    "execution_output": 4
  },
  {
    "id": 599,
    "q_id": "sample_205",
    "code": "def minimumOperations(num: str) -> int:\n    ans = len(num) - 1 if '0' in num else len(num)\n    modes = ['00', '25', '50', '75']\n    for mode in modes:\n        i, j = (len(num) - 1, len(mode) - 1)\n        cur = 0\n        while i >= 0:\n            if num[i] == mode[j]:\n                i -= 1\n                j -= 1\n                if j == -1:\n                    ans = min(ans, cur)\n                    break\n            else:\n                i -= 1\n                cur += 1\n    return ans\nprint(minimumOperations('0'))",
    "execution_output": 0
  },
  {
    "id": 600,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    for i, c in enumerate(('00' + num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i - 1\nprint(minimumOperations('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))",
    "execution_output": 4
  },
  {
    "id": 601,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    for i, c in enumerate(('00' + num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i - 1\nprint(minimumOperations('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": 0
  },
  {
    "id": 602,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    for i, c in enumerate(('00' + num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i - 1\nprint(minimumOperations(''))",
    "execution_output": 0
  },
  {
    "id": 603,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    for i, c in enumerate(('00' + num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i - 1\nprint(minimumOperations('5'))",
    "execution_output": 1
  },
  {
    "id": 604,
    "q_id": "sample_206",
    "code": "def minimumOperations(num: str) -> int:\n    l = [list(x) for x in ['00', '25', '50', '75']]\n    for i, c in enumerate(('00' + num)[::-1]):\n        for x in l:\n            if c == x[-1]:\n                x.pop()\n            if not x:\n                return i - 1\nprint(minimumOperations('7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777'))",
    "execution_output": 100
  },
  {
    "id": 605,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint(minimumOperations('111111111111111111111111111111111111111111111111112333333333333333333333333333333333333333333333335'))",
    "execution_output": 47
  },
  {
    "id": 606,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint(minimumOperations('1313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313'))",
    "execution_output": 100
  },
  {
    "id": 607,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint(minimumOperations('0'))",
    "execution_output": 0
  },
  {
    "id": 608,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint(minimumOperations('234772'))",
    "execution_output": 6
  },
  {
    "id": 609,
    "q_id": "sample_207",
    "code": "def minimumOperations(num: str) -> int:\n    min_ops = len(num)\n    for rem in map(list, ('00', '25', '50', '75')):\n        copy = list(num)\n        ops = 0\n        while copy and copy[-1] != rem[-1]:\n            copy.pop(-1)\n            ops += 1\n        while len(copy) >= 2 and copy[-2] != rem[-2]:\n            copy.pop(-2)\n            ops += 1\n        if copy[-2:] == rem:\n            min_ops = min(min_ops, ops)\n    if '0' in num:\n        min_ops = min(min_ops, len(num) - 1)\n    return min_ops\nprint(minimumOperations('3254323'))",
    "execution_output": 4
  },
  {
    "id": 610,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint(countInterestingSubarrays(list(range(1, 101)), 2, 1))",
    "execution_output": 2550
  },
  {
    "id": 611,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint(countInterestingSubarrays
    "execution_output": 5050
  },
  {
    "id": 612,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint(countInterestingSubarrays(list(range(100)), 7, 7))",
    "execution_output": 5050
  },
  {
    "id": 613,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint(countInterestingSubarrays(list(range(49, 49 + 50 * 100, 50)), 50, 49))",
    "execution_output": 54
  },
  {
    "id": 614,
    "q_id": "sample_208",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    h = []\n    for i in nums:\n        if i % modulo == k:\n            h.append(1)\n        else:\n            h.append(0)\n    d = defaultdict(int)\n    d[0] = 1\n    s = 0\n    ans = 0\n    for i in h:\n        s += i\n        s %= modulo\n        ans += d[(s - k) % modulo]\n        d[s] += 1\n    return ans\nprint(countInterestingSubarrays(list(range(0, 300, 3)), 3, 2))",
    "execution_output": 0
  },
  {
    "id": 615,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a % modulo == k\n        s %= modulo\n        ans += cnt[(s - k) % modulo]\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays([], 3, 1))",
    "execution_output": 0
  },
  {
    "id": 616,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a % modulo == k\n        s %= modulo\n        ans += cnt[(s - k) % modulo]\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays
    "execution_output": 5050
  },
  {
    "id": 617,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a % modulo == k\n        s %= modulo\n        ans += cnt[(s - k) % modulo]\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays([0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323, 0, 1, 2, 3, 4, -1, -2, 234772, 3254323] + [0], 5, 7))",
    "execution_output": 0
  },
  {
    "id": 618,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a % modulo == k\n        s %= modulo\n        ans += cnt[(s - k) % modulo]\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays([3, 13, 23, 33, 43, 53, 63, 73, 83, 93, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93, 3, 13, 23, 33, 43, 53, 63, 73, 83, 93], 10, 3))",
    "execution_output": 530
  },
  {
    "id": 619,
    "q_id": "sample_209",
    "code": "from collections import Counter\n\ndef countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    n = len(nums)\n    cnt = Counter()\n    cnt[0] = 1\n    ans = 0\n    s = 0\n    for a in nums:\n        s += a % modulo == k\n        s %= modulo\n        ans += cnt[(s - k) % modulo]\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays([-1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999, -1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999, -1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999, -1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999, -1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999, -1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999, -1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999, -1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999, -1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999, -1, 0, 1, 234771, 234772, 234773, 469543, -234772, 704315, 999999999999], 234772, 234771))",
    "execution_output": 0
  },
  {
    "id": 620,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if nums[i] % m == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint(countInterestingSubarrays([], 5, 2))",
    "execution_output": 0
  },
  {
    "id": 621,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if nums[i] % m == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint(countInterestingSubarrays
    "execution_output": 0
  },
  {
    "id": 622,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if nums[i] % m == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint(countInterestingSubarrays(list(range(-50, 50)), 7, 6))",
    "execution_output": 483
  },
  {
    "id": 623,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if nums[i] % m == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint(countInterestingSubarrays(list(range(100)), 1, 0))",
    "execution_output": 5050
  },
  {
    "id": 624,
    "q_id": "sample_210",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    for i in range(n):\n        nums[i] = 1 if nums[i] % m == k else 0\n    res = 0\n    h = Counter()\n    h[0] = 1\n    s = 0\n    for i in nums:\n        s = (s + i) % m\n        x = (s - k + m) % m\n        if x < 0:\n            x += m\n        res += h[x]\n        h[s] += 1\n    return res\nprint(countInterestingSubarrays(list(range(10 ** 12, 10 ** 12 + 100)), 3254323, 234772345))",
    "execution_output": 0
  },
  {
    "id": 625,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0] = 1\n    ans = 0\n    for c in nums:\n        if c % modulo == k:\n            s += 1\n            s %= modulo\n        ns = s - k\n        if ns < 0:\n            ns += modulo\n        if ns in cnt:\n            ans += cnt[ns]\n        if s not in cnt:\n            cnt[s] = 0\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays([], 5, 3))",
    "execution_output": 0
  },
  {
    "id": 626,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0] = 1\n    ans = 0\n    for c in nums:\n        if c % modulo == k:\n            s += 1\n            s %= modulo\n        ns = s - k\n        if ns < 0:\n            ns += modulo\n        if ns in cnt:\n            ans += cnt[ns]\n        if s not in cnt:\n            cnt[s] = 0\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays([234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1, 234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1, 234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1, 234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1, 234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1, 234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1, 234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1, 234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1, 234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1, 234772, -3254323, 999999999, -1000000000, 123456789, -987654321, 2147483647, -2147483648, 0, 1], 1000, 777))",
    "execution_output": 0
  },
  {
    "id": 627,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0] = 1\n    ans = 0\n    for c in nums:\n        if c % modulo == k:\n            s += 1\n            s %= modulo\n        ns = s - k\n        if ns < 0:\n            ns += modulo\n        if ns in cnt:\n            ans += cnt[ns]\n        if s not in cnt:\n            cnt[s] = 0\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays([20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], 13, 7))",
    "execution_output": 388
  },
  {
    "id": 628,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0] = 1\n    ans = 0\n    for c in nums:\n        if c % modulo == k:\n            s += 1\n            s %= modulo\n        ns = s - k\n        if ns < 0:\n            ns += modulo\n        if ns in cnt:\n            ans += cnt[ns]\n        if s not in cnt:\n            cnt[s] = 0\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 0))",
    "execution_output": 5050
  },
  {
    "id": 629,
    "q_id": "sample_211",
    "code": "def countInterestingSubarrays(nums: List[int], modulo: int, k: int) -> int:\n    cnt = {}\n    s = 0\n    cnt[0] = 1\n    ans = 0\n    for c in nums:\n        if c % modulo == k:\n            s += 1\n            s %= modulo\n        ns = s - k\n        if ns < 0:\n            ns += modulo\n        if ns in cnt:\n            ans += cnt[ns]\n        if s not in cnt:\n            cnt[s] = 0\n        cnt[s] += 1\n    return ans\nprint(countInterestingSubarrays([3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444, 3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444, 3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444, 3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444, 3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444, 3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444, 3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444, 3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444, 3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444, 3254323, -234772, 1000000007, -1000000007, 4294967295, -4294967296, 9223372036854775807, -9223372036854775808, 555555555555555555, -444444444444444444], 1000003, 123456))",
    "execution_output": 0
  },
  {
    "id": 630,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n\n    def zero():\n        return 0\n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint(countInterestingSubarrays([], 3, 0))",
    "execution_output": 0
  },
  {
    "id": 631,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n\n    def zero():\n        return 0\n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint(countInterestingSubarrays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 1, 0))",
    "execution_output": 5050
  },
  {
    "id": 632,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n\n    def zero():\n        return 0\n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint(countInterestingSubarrays([0, 234772, -234772, 3254323, -3254323, 1000000000000000000, -1000000000000000000, 999999999999999999, -999999999999999999, 1234567890123456789], 234772, 3254323))",
    "execution_output": 0
  },
  {
    "id": 633,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n\n    def zero():\n        return 0\n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint(countInterestingSubarrays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 10, 30))",
    "execution_output": 5050
  },
  {
    "id": 634,
    "q_id": "sample_212",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    n = len(nums)\n    a = [0 for _ in range(n + 1)]\n\n    def zero():\n        return 0\n    for i in range(n):\n        if nums[i] % m == k:\n            a[i + 1] = 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    cnt_m = collections.defaultdict(zero)\n    ans = 0\n    for i in range(n + 1):\n        ans += cnt_m[(a[i] - k + m) % m]\n        cnt_m[a[i] % m] += 1\n    return ans\nprint(countInterestingSubarrays([3, 8, 13, 18, 23, 28, 33, 38, 43, 48, 53, 58, 63, 68, 73, 78, 83, 88, 93, 98, 103, 108, 113, 118, 123, 128, 133, 138, 143, 148, 153, 158, 163, 168, 173, 178, 183, 188, 193, 198, 203, 208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363, 368, 373, 378, 383, 388, 393, 398, 403, 408, 413, 418, 423, 428, 433, 438, 443, 448, 453, 458, 463, 468, 473, 478, 483, 488, 493, 498], 5, 3))",
    "execution_output": 1010
  },
  {
    "id": 635,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt = 0\n    ans = 0\n    last = -1\n    c = Counter([0])\n    for x in nums:\n        if x % m == k:\n            cnt += 1\n        ans += c[(cnt - k) % m]\n        c[cnt % m] += 1\n    return ans\nprint(countInterestingSubarrays(list(range(1, 101)), 13, 5))",
    "execution_output": 468
  },
  {
    "id": 636,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt = 0\n    ans = 0\n    last = -1\n    c = Counter([0])\n    for x in nums:\n        if x % m == k:\n            cnt += 1\n        ans += c[(cnt - k) % m]\n        c[cnt % m] += 1\n    return ans\nprint(countInterestingSubarrays([3254323, 234772, 999999937, 2147483647, 4294967295, 1000000000000, 888888888, 777777777, 666666666, 555555555, 444444444, 333333333, 222222222, 111111111, 1234567890, 987654321], 100000, 77777))",
    "execution_output": 0
  },
  {
    "id": 637,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt = 0\n    ans = 0\n    last = -1\n    c = Counter([0])\n    for x in nums:\n        if x % m == k:\n            cnt += 1\n        ans += c[(cnt - k) % m]\n        c[cnt % m] += 1\n    return ans\nprint(countInterestingSubarrays([3, 6, 9, 12, 15, 2, 5, 8, 11, 14], 3, 10))",
    "execution_output": 0
  },
  {
    "id": 638,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt = 0\n    ans = 0\n    last = -1\n    c = Counter([0])\n    for x in nums:\n        if x % m == k:\n            cnt += 1\n        ans += c[(cnt - k) % m]\n        c[cnt % m] += 1\n    return ans\nprint(countInterestingSubarrays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1, 0))",
    "execution_output": 5050
  },
  {
    "id": 639,
    "q_id": "sample_213",
    "code": "def countInterestingSubarrays(nums: List[int], m: int, k: int) -> int:\n    cnt = 0\n    ans = 0\n    last = -1\n    c = Counter([0])\n    for x in nums:\n        if x % m == k:\n            cnt += 1\n        ans += c[(cnt - k) % m]\n        c[cnt % m] += 1\n    return ans\nprint(countInterestingSubarrays([], 5, 2))",
    "execution_output": 0
  },
  {
    "id": 640,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n + 1):\n        l = g == 0 or g > nums[g - 1]\n        r = g == n or g < nums[g]\n        c += l and r\n    return int(c)\nprint(countWays([]))",
    "execution_output": 1
  },
  {
    "id": 641,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n + 1):\n        l = g == 0 or g > nums[g - 1]\n        r = g == n or g < nums[g]\n        c += l and r\n    return int(c)\nprint(countWays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [100]))",
    "execution_output": 1
  },
  {
    "id": 642,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n + 1):\n        l = g == 0 or g > nums[g - 1]\n        r = g == n or g < nums[g]\n        c += l and r\n    return int(c)\nprint(countWays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 643,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n + 1):\n        l = g == 0 or g > nums[g - 1]\n        r = g == n or g < nums[g]\n        c += l and r\n    return int(c)\nprint(countWays([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 2
  },
  {
    "id": 644,
    "q_id": "sample_226",
    "code": "def countWays(nums: List[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    c = 0\n    for g in range(n + 1):\n        l = g == 0 or g > nums[g - 1]\n        r = g == n or g < nums[g]\n        c += l and r\n    return int(c)\nprint(countWays([-999999999999, -234772, 0, 1, 2, 234772, 3254323, 999999999999]))",
    "execution_output": 1
  },
  {
    "id": 645,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-1061109567)\n    nums.append(1061109567)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint(countWays([]))",
    "execution_output": 1
  },
  {
    "id": 646,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-1061109567)\n    nums.append(1061109567)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint(countWays([-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]))",
    "execution_output": 1
  },
  {
    "id": 647,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-1061109567)\n    nums.append(1061109567)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint(countWays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 648,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-1061109567)\n    nums.append(1061109567)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint(countWays([1061109567, -1061109567, 1061109568, -1061109568, 2147483647, -2147483648, 5000000000, -5000000000, 3254323, 234772]))",
    "execution_output": 1
  },
  {
    "id": 649,
    "q_id": "sample_227",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.append(-1061109567)\n    nums.append(1061109567)\n    nums.sort()\n    ans = 0\n    for i in range(len(nums) - 1):\n        if i > nums[i] and i < nums[i + 1]:\n            ans += 1\n    return ans\nprint(countWays([999999999999, -999999999999, 1061109567, -1061109567, 987654321, -123456789, 0, 1, 2, 3]))",
    "execution_output": 1
  },
  {
    "id": 650,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    res = 1\n    if nums.count(0) == 0:\n        res += 1\n    for i, (x, y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            res += 1\n    return res\nprint(countWays([]))",
    "execution_output": 2
  },
  {
    "id": 651,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    res = 1\n    if nums.count(0) == 0:\n        res += 1\n    for i, (x, y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            res += 1\n    return res\nprint(countWays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 652,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    res = 1\n    if nums.count(0) == 0:\n        res += 1\n    for i, (x, y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            res += 1\n    return res\nprint(countWays([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 2
  },
  {
    "id": 653,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    res = 1\n    if nums.count(0) == 0:\n        res += 1\n    for i, (x, y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            res += 1\n    return res\nprint(countWays([0, 234772, 234772, 3254323, 3254323, 999999999]))",
    "execution_output": 2
  },
  {
    "id": 654,
    "q_id": "sample_228",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    res = 1\n    if nums.count(0) == 0:\n        res += 1\n    for i, (x, y) in enumerate(zip(nums, nums[1:]), start=1):\n        if x < i < y:\n            res += 1\n    return res\nprint(countWays
    "execution_output": 2
  },
  {
    "id": 655,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i - 1] >= i:\n            continue\n        if i < n and nums[i] <= i:\n            continue\n        ans += 1\n    return ans\nprint(countWays([]))",
    "execution_output": 1
  },
  {
    "id": 656,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i - 1] >= i:\n            continue\n        if i < n and nums[i] <= i:\n            continue\n        ans += 1\n    return ans\nprint(countWays([3254323]))",
    "execution_output": 1
  },
  {
    "id": 657,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i - 1] >= i:\n            continue\n        if i < n and nums[i] <= i:\n            continue\n        ans += 1\n    return ans\nprint(countWays([-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]))",
    "execution_output": 1
  },
  {
    "id": 658,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i - 1] >= i:\n            continue\n        if i < n and nums[i] <= i:\n            continue\n        ans += 1\n    return ans\nprint(countWays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": 1
  },
  {
    "id": 659,
    "q_id": "sample_229",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    n = len(nums)\n    ans = 0\n    for i in range(n + 1):\n        if i and nums[i - 1] >= i:\n            continue\n        if i < n and nums[i] <= i:\n            continue\n        ans += 1\n    return ans\nprint(countWays([-3254323, -234772, -100000, -99999, -1, 0, 1, 2, 3, 10, 100, 1000, 20000, 234772, 234772, 3254323, 3254323]))",
    "execution_output": 1
  },
  {
    "id": 660,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    ans += n > nums[0]\n    ans += 0 < nums[-1]\n    for i in range(n - 1):\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    return ans\nprint(countWays([100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))",
    "execution_output": 1
  },
  {
    "id": 661,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    ans += n > nums[0]\n    ans += 0 < nums[-1]\n    for i in range(n - 1):\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    return ans\nprint(countWays([3254323, 234772, 999999999999, 2147483647, 9223372036854775807, -9223372036854775808, -2147483648, 0, 1, -1]))",
    "execution_output": 1
  },
  {
    "id": 662,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    ans += n > nums[0]\n    ans += 0 < nums[-1]\n    for i in range(n - 1):\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    return ans\nprint(countWays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 663,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    ans += n > nums[0]\n    ans += 0 < nums[-1]\n    for i in range(n - 1):\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    return ans\nprint(countWays([234772, 234772]))",
    "execution_output": 1
  },
  {
    "id": 664,
    "q_id": "sample_230",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort(reverse=True)\n    n = len(nums)\n    ans = 0\n    ans += n > nums[0]\n    ans += 0 < nums[-1]\n    for i in range(n - 1):\n        v = n - 1 - i\n        ans += v < nums[i] and v > nums[i + 1]\n    return ans\nprint(countWays([3254323]))",
    "execution_output": 1
  },
  {
    "id": 665,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i - 1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint(countWays([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": 1
  },
  {
    "id": 666,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i - 1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint(countWays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 667,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i - 1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint(countWays
    "execution_output": 2
  },
  {
    "id": 668,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i - 1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint(countWays([-10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323, -10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323, -10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323, -10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323, -10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323, -10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323, -10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323, -10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323, -10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323, -10, -1, 0, 1, 2, 3, 10, 100, 234772, 3254323]))",
    "execution_output": 3
  },
  {
    "id": 669,
    "q_id": "sample_231",
    "code": "def countWays(nums: List[int]) -> int:\n    nums.sort()\n    ans = 1\n    if nums[0] != 0:\n        ans += 1\n    for i in range(1, len(nums)):\n        if nums[i - 1] < i and nums[i] > i:\n            ans += 1\n    return ans\nprint(countWays([234772]))",
    "execution_output": 2
  },
  {
    "id": 670,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0:\n        return -1\n    dp0, dp1 = (0, 0)\n    for i in range(1, len(idx)):\n        dp0, dp1 = (dp1, min(dp1, dp0 + (idx[i] - idx[i - 1] - x)))\n    return len(idx) // 2 * x + dp1\nprint(minOperations('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111', 3254323))",
    "execution_output": 50
  },
  {
    "id": 671,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0:\n        return -1\n    dp0, dp1 = (0, 0)\n    for i in range(1, len(idx)):\n        dp0, dp1 = (dp1, min(dp1, dp0 + (idx[i] - idx[i - 1] - x)))\n    return len(idx) // 2 * x + dp1\nprint(minOperations('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101', -234772))",
    "execution_output": -5869300
  },
  {
    "id": 672,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0:\n        return -1\n    dp0, dp1 = (0, 0)\n    for i in range(1, len(idx)):\n        dp0, dp1 = (dp1, min(dp1, dp0 + (idx[i] - idx[i - 1] - x)))\n    return len(idx) // 2 * x + dp1\nprint(minOperations('🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂', '🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃', 234772))",
    "execution_output": 50
  },
  {
    "id": 673,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0:\n        return -1\n    dp0, dp1 = (0, 0)\n    for i in range(1, len(idx)):\n        dp0, dp1 = (dp1, min(dp1, dp0 + (idx[i] - idx[i - 1] - x)))\n    return len(idx) // 2 * x + dp1\nprint(minOperations('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde', 'abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde', 3254323))",
    "execution_output": 0
  },
  {
    "id": 674,
    "q_id": "sample_247",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    n = len(s1)\n    idx = [i for i in range(n) if s1[i] != s2[i]]\n    if len(idx) % 2 != 0:\n        return -1\n    dp0, dp1 = (0, 0)\n    for i in range(1, len(idx)):\n        dp0, dp1 = (dp1, min(dp1, dp0 + (idx[i] - idx[i - 1] - x)))\n    return len(idx) // 2 * x + dp1\nprint(minOperations('', '', 0))",
    "execution_output": 0
  },
  {
    "id": 675,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n\n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n    return dp(tuple(mask)) // 2\nprint(minOperations('00000000000000000000000000000000000000000000000000' + '11111111111111111111111111111111111111111111111111', '11111111111111111111111111111111111111111111111111' + '00000000000000000000000000000000000000000000000000', 3254323))",
    "execution_output": 50
  },
  {
    "id": 676,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n\n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n    return dp(tuple(mask)) // 2\nprint(minOperations('0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101', '1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010', 0))",
    "execution_output": 0
  },
  {
    "id": 677,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n\n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n    return dp(tuple(mask)) // 2\nprint(minOperations('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 123456))",
    "execution_output": 0
  },
  {
    "id": 678,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n\n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n    return dp(tuple(mask)) // 2\nprint(minOperations('', '', 234772))",
    "execution_output": 0
  },
  {
    "id": 679,
    "q_id": "sample_248",
    "code": "def minOperations(s1: str, s2: str, x: int) -> int:\n    if (s1.count('1') + s2.count('1')) % 2 == 1:\n        return -1\n    mask = [i for i, (x, y) in enumerate(zip(s1, s2)) if x != y]\n\n    @lru_cache\n    def dp(down):\n        if not down:\n            return 0\n        if len(down) == 1:\n            return x\n        return min(2 * (down[1] - down[0]) + dp(tuple(down[2:])), x + dp(tuple(down[1:])))\n    return dp(tuple(mask)) // 2\nprint(minOperations('1', '0', 5))",
    "execution_output": -1
  },
  {
    "id": 680,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j + 1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return '' if ans is None else ans\nprint(shortestBeautifulSubstring('', 0))",
    "execution_output": ""
  },
  {
    "id": 681,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j + 1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return '' if ans is None else ans\nprint(shortestBeautifulSubstring('', 234772))",
    "execution_output": ""
  },
  {
    "id": 682,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j + 1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return '' if ans is None else ans\nprint(shortestBeautifulSubstring('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 1))",
    "execution_output": ""
  },
  {
    "id": 683,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j + 1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return '' if ans is None else ans\nprint(shortestBeautifulSubstring('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111', 100))",
    "execution_output": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
  },
  {
    "id": 684,
    "q_id": "sample_249",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    ans = None\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            t = s[i:j + 1]\n            if t.count('1') == k and (ans is None or len(t) < len(ans) or (len(t) == len(ans) and t < ans)):\n                ans = t\n    return '' if ans is None else ans\nprint(shortestBeautifulSubstring('1010101010101010', 3254323))",
    "execution_output": ""
  },
  {
    "id": 685,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint(shortestBeautifulSubstring('', 1))",
    "execution_output": ""
  },
  {
    "id": 686,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint(shortestBeautifulSubstring('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 1))",
    "execution_output": ""
  },
  {
    "id": 687,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint(shortestBeautifulSubstring('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111', 100))",
    "execution_output": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
  },
  {
    "id": 688,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint(shortestBeautifulSubstring('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010', 234772))",
    "execution_output": ""
  },
  {
    "id": 689,
    "q_id": "sample_250",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ans = []\n    for i in range(n):\n        cnt = 0\n        min_j = -1\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            if cnt == k:\n                min_j = j\n                break\n        if min_j > -1:\n            ans.append((min_j - i + 1, s[i:min_j + 1]))\n    ans.sort()\n    if ans:\n        return ans[0][1]\n    else:\n        return ''\nprint(shortestBeautifulSubstring('1010011100101001110010100111001010011100101001110010100111001010011100101001110010100111001010011100', 3254323))",
    "execution_output": ""
  },
  {
    "id": 690,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n    return '' if min_len == inf else ans\nprint(shortestBeautifulSubstring('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010', 50))",
    "execution_output": "101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
  },
  {
    "id": 691,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n    return '' if min_len == inf else ans\nprint(shortestBeautifulSubstring('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 234772))",
    "execution_output": ""
  },
  {
    "id": 692,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n    return '' if min_len == inf else ans\nprint(shortestBeautifulSubstring('**************************************************' + '1' + '#################################################', 1))",
    "execution_output": "1"
  },
  {
    "id": 693,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n    return '' if min_len == inf else ans\nprint(shortestBeautifulSubstring('00000000000000000000000000000000000000000000000000' + '11111111111111111111111111111111111111111111111111', 0))",
    "execution_output": "0"
  },
  {
    "id": 694,
    "q_id": "sample_251",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    N = len(s)\n    min_len = inf\n    ans = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    for right in range(N + 1):\n        for left in range(right):\n            ss = s[left:right]\n            if ss.count('1') == k:\n                if len(ss) < min_len or (len(ss) == min_len and ss < ans):\n                    min_len = len(ss)\n                    ans = ss\n    return '' if min_len == inf else ans\nprint(shortestBeautifulSubstring('', 1))",
    "execution_output": ""
  },
  {
    "id": 695,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = ''\n    n = len(s)\n    min_len = None\n    for ln in range(k, n + 1):\n        for i in range(n - ln + 1):\n            ss = s[i:i + ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint(shortestBeautifulSubstring('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010', 50))",
    "execution_output": "101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
  },
  {
    "id": 696,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = ''\n    n = len(s)\n    min_len = None\n    for ln in range(k, n + 1):\n        for i in range(n - ln + 1):\n            ss = s[i:i + ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint(shortestBeautifulSubstring('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 1))",
    "execution_output": ""
  },
  {
    "id": 697,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = ''\n    n = len(s)\n    min_len = None\n    for ln in range(k, n + 1):\n        for i in range(n - ln + 1):\n            ss = s[i:i + ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint(shortestBeautifulSubstring('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111', 3254323))",
    "execution_output": ""
  },
  {
    "id": 698,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = ''\n    n = len(s)\n    min_len = None\n    for ln in range(k, n + 1):\n        for i in range(n - ln + 1):\n            ss = s[i:i + ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint(shortestBeautifulSubstring('1010101', 0))",
    "execution_output": "0"
  },
  {
    "id": 699,
    "q_id": "sample_252",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    beauty = ''\n    n = len(s)\n    min_len = None\n    for ln in range(k, n + 1):\n        for i in range(n - ln + 1):\n            ss = s[i:i + ln]\n            if len([c for c in ss if c == '1']) == k:\n                min_len = ln\n                if not beauty or ss < beauty:\n                    beauty = ss\n        if min_len:\n            break\n    return beauty\nprint(shortestBeautifulSubstring('', 234772))",
    "execution_output": ""
  },
  {
    "id": 700,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), '')\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i:j + 1]))\n    return res[1]\nprint(shortestBeautifulSubstring('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010', 50))",
    "execution_output": "101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
  },
  {
    "id": 701,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), '')\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i:j + 1]))\n    return res[1]\nprint(shortestBeautifulSubstring('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 0))",
    "execution_output": "0"
  },
  {
    "id": 702,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), '')\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i:j + 1]))\n    return res[1]\nprint(shortestBeautifulSubstring('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111', 100))",
    "execution_output": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
  },
  {
    "id": 703,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), '')\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i:j + 1]))\n    return res[1]\nprint(shortestBeautifulSubstring('0011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011', 234772))",
    "execution_output": ""
  },
  {
    "id": 704,
    "q_id": "sample_253",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    res = (float('inf'), '')\n    for i in range(n):\n        ctr = 0\n        for j in range(i, n):\n            ctr += int(s[j])\n            if ctr == k:\n                res = min(res, (j - i + 1, s[i:j + 1]))\n    return res[1]\nprint(shortestBeautifulSubstring('', 3254323))",
    "execution_output": ""
  },
  {
    "id": 705,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i] == '1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n + 1)])]\n    for i in range(k - 1, len(ones)):\n        i1 = ones[i - k + 1]\n        i2 = ones[i]\n        answer = min(answer, [i2 - i1, s[i1:i2 + 1]])\n    return answer[1]\nprint(shortestBeautifulSubstring('0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101', 50))",
    "execution_output": "101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
  },
  {
    "id": 706,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i] == '1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n + 1)])]\n    for i in range(k - 1, len(ones)):\n        i1 = ones[i - k + 1]\n        i2 = ones[i]\n        answer = min(answer, [i2 - i1, s[i1:i2 + 1]])\n    return answer[1]\nprint(shortestBeautifulSubstring('0000000000000000000000000000000000000000000000000' + '1' + '00000000000000000000000000000000000000000000000000', 234772))",
    "execution_output": ""
  },
  {
    "id": 707,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i] == '1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n + 1)])]\n    for i in range(k - 1, len(ones)):\n        i1 = ones[i - k + 1]\n        i2 = ones[i]\n        answer = min(answer, [i2 - i1, s[i1:i2 + 1]])\n    return answer[1]\nprint(shortestBeautifulSubstring('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111', 100))",
    "execution_output": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
  },
  {
    "id": 708,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i] == '1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n + 1)])]\n    for i in range(k - 1, len(ones)):\n        i1 = ones[i - k + 1]\n        i2 = ones[i]\n        answer = min(answer, [i2 - i1, s[i1:i2 + 1]])\n    return answer[1]\nprint(shortestBeautifulSubstring('', 1))",
    "execution_output": ""
  },
  {
    "id": 709,
    "q_id": "sample_254",
    "code": "def shortestBeautifulSubstring(s: str, k: int) -> str:\n    n = len(s)\n    ones = []\n    for i in range(n):\n        if s[i] == '1':\n            ones.append(i)\n    if len(ones) < k:\n        return ''\n    answer = [float('inf'), ''.join(['1' for i in range(n + 1)])]\n    for i in range(k - 1, len(ones)):\n        i1 = ones[i - k + 1]\n        i2 = ones[i]\n        answer = min(answer, [i2 - i1, s[i1:i2 + 1]])\n    return answer[1]\nprint(shortestBeautifulSubstring('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', 3254323))",
    "execution_output": ""
  },
  {
    "id": 710,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0:\n                break\n            res += freq[x] * v\n        else:\n            ans = min(ans, res)\n    return ans\nprint(minGroupsForValidAssignment([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))",
    "execution_output": 1
  },
  {
    "id": 711,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0:\n                break\n            res += freq[x] * v\n        else:\n            ans = min(ans, res)\n    return ans\nprint(minGroupsForValidAssignment([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 100
  },
  {
    "id": 712,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0:\n                break\n            res += freq[x] * v\n        else:\n            ans = min(ans, res)\n    return ans\nprint(minGroupsForValidAssignment([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323]))",
    "execution_output": 2
  },
  {
    "id": 713,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0:\n                break\n            res += freq[x] * v\n        else:\n            ans = min(ans, res)\n    return ans\nprint(minGroupsForValidAssignment([999999999999999999]))",
    "execution_output": 1
  },
  {
    "id": 714,
    "q_id": "sample_261",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    cnt = Counter(nums)\n    freq = Counter(cnt.values())\n    k = min(freq)\n    ans = inf\n    for i in range(1, k + 2):\n        res = 0\n        for x in freq:\n            v = (x + i - 1) // i\n            k1 = x - v * (i - 1)\n            k2 = v - k1\n            if k1 < 0 or k2 < 0:\n                break\n            res += freq[x] * v\n        else:\n            ans = min(ans, res)\n    return ans\nprint(minGroupsForValidAssignment([-1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000] + [0] + [1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000, 1000000000000]))",
    "execution_output": 51
  },
  {
    "id": 715,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in d]\n    s.sort()\n\n    def f(x, n):\n        b = x // (n - 1)\n        if x % (n - 1) == 0:\n            return True\n        a = x - (n - 1) * b\n        if a <= b:\n            return True\n    for i in range(s[0] + 1, 1, -1):\n        if all((f(j, i) for j in s)):\n            return sum([j // i + (j % i != 0) for j in s])\nprint(minGroupsForValidAssignment([0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [2, 2, 2, 2, 2, 2, 2, 2, 2, 2] + [3, 3, 3, 3, 3, 3, 3, 3, 3, 3] + [4, 4, 4, 4, 4, 4, 4, 4, 4, 4] + [5, 5, 5, 5, 5, 5, 5, 5, 5, 5] + [6, 6, 6, 6, 6, 6, 6, 6, 6, 6] + [7, 7, 7, 7, 7, 7, 7, 7, 7, 7] + [8, 8, 8, 8, 8, 8, 8, 8, 8, 8] + [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]))",
    "execution_output": 10
  },
  {
    "id": 716,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in d]\n    s.sort()\n\n    def f(x, n):\n        b = x // (n - 1)\n        if x % (n - 1) == 0:\n            return True\n        a = x - (n - 1) * b\n        if a <= b:\n            return True\n    for i in range(s[0] + 1, 1, -1):\n        if all((f(j, i) for j in s)):\n            return sum([j // i + (j % i != 0) for j in s])\nprint(minGroupsForValidAssignment([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323]))",
    "execution_output": 2
  },
  {
    "id": 717,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in d]\n    s.sort()\n\n    def f(x, n):\n        b = x // (n - 1)\n        if x % (n - 1) == 0:\n            return True\n        a = x - (n - 1) * b\n        if a <= b:\n            return True\n    for i in range(s[0] + 1, 1, -1):\n        if all((f(j, i) for j in s)):\n            return sum([j // i + (j % i != 0) for j in s])\nprint(minGroupsForValidAssignment(['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'] + ['bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'] + ['cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc']))",
    "execution_output": 10
  },
  {
    "id": 718,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in d]\n    s.sort()\n\n    def f(x, n):\n        b = x // (n - 1)\n        if x % (n - 1) == 0:\n            return True\n        a = x - (n - 1) * b\n        if a <= b:\n            return True\n    for i in range(s[0] + 1, 1, -1):\n        if all((f(j, i) for j in s)):\n            return sum([j // i + (j % i != 0) for j in s])\nprint(minGroupsForValidAssignment([float('nan')] * 50 + [float('inf')] * 25 + [float('-inf')] * 25))",
    "execution_output": 4
  },
  {
    "id": 719,
    "q_id": "sample_262",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    d = collections.Counter(nums)\n    s = [d[i] for i in d]\n    s.sort()\n\n    def f(x, n):\n        b = x // (n - 1)\n        if x % (n - 1) == 0:\n            return True\n        a = x - (n - 1) * b\n        if a <= b:\n            return True\n    for i in range(s[0] + 1, 1, -1):\n        if all((f(j, i) for j in s)):\n            return sum([j // i + (j % i != 0) for j in s])\nprint(minGroupsForValidAssignment(list(range(100))))",
    "execution_output": 100
  },
  {
    "id": 720,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _, v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0] + 1, 1, -1):\n        good = True\n        cnt = 0\n        for n in a:\n            q, r = divmod(n, sz)\n            if r != 0:\n                q += 1\n                r = sz - r\n            if r > q:\n                good = False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print('bad')\n    return len(nums)\nprint(minGroupsForValidAssignment([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]))",
    "execution_output": 10
  },
  {
    "id": 721,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _, v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0] + 1, 1, -1):\n        good = True\n        cnt = 0\n        for n in a:\n            q, r = divmod(n, sz)\n            if r != 0:\n                q += 1\n                r = sz - r\n            if r > q:\n                good = False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print('bad')\n    return len(nums)\nprint(minGroupsForValidAssignment([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772]))",
    "execution_output": 75
  },
  {
    "id": 722,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _, v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0] + 1, 1, -1):\n        good = True\n        cnt = 0\n        for n in a:\n            q, r = divmod(n, sz)\n            if r != 0:\n                q += 1\n                r = sz - r\n            if r > q:\n                good = False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print('bad')\n    return len(nums)\nprint(minGroupsForValidAssignment
    "execution_output": 3
  },
  {
    "id": 723,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _, v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0] + 1, 1, -1):\n        good = True\n        cnt = 0\n        for n in a:\n            q, r = divmod(n, sz)\n            if r != 0:\n                q += 1\n                r = sz - r\n            if r > q:\n                good = False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print('bad')\n    return len(nums)\nprint(minGroupsForValidAssignment([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 1
  },
  {
    "id": 724,
    "q_id": "sample_263",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    c = Counter(nums)\n    a = list(sorted([v for _, v in c.items()]))\n    lim = a[0]\n    for sz in range(a[0] + 1, 1, -1):\n        good = True\n        cnt = 0\n        for n in a:\n            q, r = divmod(n, sz)\n            if r != 0:\n                q += 1\n                r = sz - r\n            if r > q:\n                good = False\n                break\n            cnt += q\n        if good:\n            return cnt\n    print('bad')\n    return len(nums)\nprint(minGroupsForValidAssignment([42]))",
    "execution_output": 1
  },
  {
    "id": 725,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n    return m\nprint(minGroupsForValidAssignment(['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'] + ['bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb']))",
    "execution_output": 5
  },
  {
    "id": 726,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n    return m\nprint(minGroupsForValidAssignment
    "execution_output": 7
  },
  {
    "id": 727,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n    return m\nprint(minGroupsForValidAssignment
    "execution_output": 4
  },
  {
    "id": 728,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n    return m\nprint(minGroupsForValidAssignment([-3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 5
  },
  {
    "id": 729,
    "q_id": "sample_264",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    x = Counter(nums).values()\n    m = inf\n    for n in range(1, min(x) + 1):\n        y = 0\n        for v in x:\n            if v // n < (v + n) // (n + 1):\n                break\n            y += (v + n) // (n + 1)\n        else:\n            m = min(m, y)\n    return m\nprint(minGroupsForValidAssignment(list(range(100))))",
    "execution_output": 100
  },
  {
    "id": 730,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    x = A[0]\n\n    @lru_cache(None)\n    def dp(y, x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y == x or y == x + 1:\n            return 1\n        return 1 + min(dp(y - x, x), dp(y - x - 1, x))\n    while x:\n        ans = sum((dp(y, x) for y in A))\n        if ans < math.inf:\n            return ans\n        x = x - 1\nprint(minGroupsForValidAssignment([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": 100
  },
  {
    "id": 731,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    x = A[0]\n\n    @lru_cache(None)\n    def dp(y, x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y == x or y == x + 1:\n            return 1\n        return 1 + min(dp(y - x, x), dp(y - x - 1, x))\n    while x:\n        ans = sum((dp(y, x) for y in A))\n        if ans < math.inf:\n            return ans\n        x = x - 1\nprint(minGroupsForValidAssignment
    "execution_output": 8
  },
  {
    "id": 732,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    x = A[0]\n\n    @lru_cache(None)\n    def dp(y, x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y == x or y == x + 1:\n            return 1\n        return 1 + min(dp(y - x, x), dp(y - x - 1, x))\n    while x:\n        ans = sum((dp(y, x) for y in A))\n        if ans < math.inf:\n            return ans\n        x = x - 1\nprint(minGroupsForValidAssignment([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 1
  },
  {
    "id": 733,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    x = A[0]\n\n    @lru_cache(None)\n    def dp(y, x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y == x or y == x + 1:\n            return 1\n        return 1 + min(dp(y - x, x), dp(y - x - 1, x))\n    while x:\n        ans = sum((dp(y, x) for y in A))\n        if ans < math.inf:\n            return ans\n        x = x - 1\nprint(minGroupsForValidAssignment([-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]))",
    "execution_output": 10
  },
  {
    "id": 734,
    "q_id": "sample_265",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n    n = len(nums)\n    A = sorted(list(Counter(nums).values()))\n    x = A[0]\n\n    @lru_cache(None)\n    def dp(y, x):\n        if y == 0:\n            return 0\n        if y < x:\n            return math.inf\n        if y == x or y == x + 1:\n            return 1\n        return 1 + min(dp(y - x, x), dp(y - x - 1, x))\n    while x:\n        ans = sum((dp(y, x) for y in A))\n        if ans < math.inf:\n            return ans\n        x = x - 1\nprint(minGroupsForValidAssignment([3254323]))",
    "execution_output": 1
  },
  {
    "id": 735,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n    counter, n = (Counter(nums), len(nums))\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint(minGroupsForValidAssignment([3254323]))",
    "execution_output": 1
  },
  {
    "id": 736,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n    counter, n = (Counter(nums), len(nums))\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint(minGroupsForValidAssignment(list(range(100))))",
    "execution_output": 100
  },
  {
    "id": 737,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n    counter, n = (Counter(nums), len(nums))\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint(minGroupsForValidAssignment([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 2
  },
  {
    "id": 738,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n    counter, n = (Counter(nums), len(nums))\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint(minGroupsForValidAssignment([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [-99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999, -99999999]))",
    "execution_output": 5
  },
  {
    "id": 739,
    "q_id": "sample_266",
    "code": "def minGroupsForValidAssignment(nums: List[int]) -> int:\n\n    def count(unit):\n        res = 0\n        for value in counter.values():\n            d, r = divmod(value, unit)\n            if r > d:\n                return -1\n            res += -(-value // (unit + 1))\n        return res\n    counter, n = (Counter(nums), len(nums))\n    for unit in range(min(counter.values()), 0, -1):\n        res = count(unit)\n        if res != -1:\n            return res\nprint(minGroupsForValidAssignment
    "execution_output": 51
  },
  {
    "id": 740,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n\n    def f(nums):\n        return sum((max(1, x) for x in nums))\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = (b, a)\n        nums1, nums2 = (nums2, nums1)\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint(minSum([], []))",
    "execution_output": 0
  },
  {
    "id": 741,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n\n    def f(nums):\n        return sum((max(1, x) for x in nums))\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = (b, a)\n        nums1, nums2 = (nums2, nums1)\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint(minSum([], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": -1
  },
  {
    "id": 742,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n\n    def f(nums):\n        return sum((max(1, x) for x in nums))\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = (b, a)\n        nums1, nums2 = (nums2, nums1)\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint(minSum
    "execution_output": 23477200
  },
  {
    "id": 743,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n\n    def f(nums):\n        return sum((max(1, x) for x in nums))\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = (b, a)\n        nums1, nums2 = (nums2, nums1)\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint(minSum
    "execution_output": 23477200
  },
  {
    "id": 744,
    "q_id": "sample_267",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n\n    def f(nums):\n        return sum((max(1, x) for x in nums))\n    a = f(nums1)\n    b = f(nums2)\n    if a > b:\n        a, b = (b, a)\n        nums1, nums2 = (nums2, nums1)\n    if a != b and 0 not in nums1:\n        return -1\n    return max(a, b)\nprint(minSum([], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234567]))",
    "execution_output": -1
  },
  {
    "id": 745,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        return sum(nums1)\n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint(minSum([234772], [3254323]))",
    "execution_output": -1
  },
  {
    "id": 746,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        return sum(nums1)\n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint(minSum([], []))",
    "execution_output": 0
  },
  {
    "id": 747,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        return sum(nums1)\n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint(minSum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 100
  },
  {
    "id": 748,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        return sum(nums1)\n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint(minSum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [100]))",
    "execution_output": 100
  },
  {
    "id": 749,
    "q_id": "sample_268",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    if nums1.count(0) == 0 and nums2.count(0) == 0:\n        return -1 if sum(nums1) != sum(nums2) else sum(nums1)\n    if nums1.count(0) == 0:\n        ot = sum(nums2) + nums2.count(0)\n        if ot > sum(nums1):\n            return -1\n        return sum(nums1)\n    if nums2.count(0) == 0:\n        return Solution().minSum(nums2, nums1)\n    return max(nums1.count(0) + sum(nums1), nums2.count(0) + sum(nums2))\nprint(minSum([234772], [234770, 0, 0, 0, 0]))",
    "execution_output": -1
  },
  {
    "id": 750,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint(minSum([3254323, -3254322], [1]))",
    "execution_output": 1
  },
  {
    "id": 751,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint(minSum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [5, 0, 10, 0, 15, 0, 20, 0, 25, 0, 5, 0, 10, 0, 15, 0, 20, 0, 25, 0, 5, 0, 10, 0, 15, 0, 20, 0, 25, 0, 5, 0, 10, 0, 15, 0, 20, 0, 25, 0, 5, 0, 10, 0, 15, 0, 20, 0, 25, 0, 5, 0, 10, 0, 15, 0, 20, 0, 25, 0, 5, 0, 10, 0, 15, 0, 20, 0, 25, 0, 5, 0, 10, 0, 15, 0, 20, 0, 25, 0, 5, 0, 10, 0, 15, 0, 20, 0, 25, 0, 5, 0, 10, 0, 15, 0, 20, 0, 25, 0]))",
    "execution_output": 800
  },
  {
    "id": 752,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint(minSum([3254323, 0, 234772, 0, 1], [1000000, 2250000, 0]))",
    "execution_output": 3489098
  },
  {
    "id": 753,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint(minSum([], []))",
    "execution_output": 0
  },
  {
    "id": 754,
    "q_id": "sample_269",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    sa = sum(nums1)\n    sb = sum(nums2)\n    a = nums1.count(0)\n    b = nums2.count(0)\n    if sa + a > sb and b == 0:\n        return -1\n    if sb + b > sa and a == 0:\n        return -1\n    return max(sa + a, sb + b)\nprint(minSum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": -1
  },
  {
    "id": 755,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint(minSum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": -1
  },
  {
    "id": 756,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint(minSum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3254323] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 3254422
  },
  {
    "id": 757,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint(minSum([], []))",
    "execution_output": 0
  },
  {
    "id": 758,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint(minSum([-234772, -3254323, -1], [0, 0, 0]))",
    "execution_output": -1
  },
  {
    "id": 759,
    "q_id": "sample_270",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    has0_1 = has0_2 = False\n    s1 = s2 = 0\n    for n in nums1:\n        if n == 0:\n            s1 += 1\n            has0_1 = True\n        else:\n            s1 += n\n    for n in nums2:\n        if n == 0:\n            s2 += 1\n            has0_2 = True\n        else:\n            s2 += n\n    if s1 > s2 and (not has0_2):\n        return -1\n    if s1 < s2 and (not has0_1):\n        return -1\n    return max(s1, s2)\nprint(minSum([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772], [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772]))",
    "execution_output": 23477200
  },
  {
    "id": 760,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    return max(s1 + n1z, s2 + n2z)\nprint(minSum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))",
    "execution_output": 160
  },
  {
    "id": 761,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    return max(s1 + n1z, s2 + n2z)\nprint(minSum([234772, 0, 3254323], [12345, 67890]))",
    "execution_output": -1
  },
  {
    "id": 762,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    return max(s1 + n1z, s2 + n2z)\nprint(minSum([], []))",
    "execution_output": 0
  },
  {
    "id": 763,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    return max(s1 + n1z, s2 + n2z)\nprint(minSum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 100
  },
  {
    "id": 764,
    "q_id": "sample_271",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    n1z = 0\n    n2z = 0\n    for num in nums1:\n        n1z += num == 0\n    for num in nums2:\n        n2z += num == 0\n    if n2z == 0 and s1 + n1z > s2:\n        return -1\n    if n1z == 0 and s2 + n2z > s1:\n        return -1\n    return max(s1 + n1z, s2 + n2z)\nprint(minSum([-100, 0, -200], [-400, 0]))",
    "execution_output": -299
  },
  {
    "id": 765,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0 for x in nums1))\n    empty2 = sum((x == 0 for x in nums2))\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint(minSum([], []))",
    "execution_output": 0
  },
  {
    "id": 766,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0 for x in nums1))\n    empty2 = sum((x == 0 for x in nums2))\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint(minSum
    "execution_output": 90716522
  },
  {
    "id": 767,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0 for x in nums1))\n    empty2 = sum((x == 0 for x in nums2))\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint(minSum([], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": -1
  },
  {
    "id": 768,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0 for x in nums1))\n    empty2 = sum((x == 0 for x in nums2))\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint(minSum([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 100
  },
  {
    "id": 769,
    "q_id": "sample_272",
    "code": "def minSum(nums1: List[int], nums2: List[int]) -> int:\n    s1 = sum(nums1)\n    s2 = sum(nums2)\n    empty1 = sum((x == 0 for x in nums1))\n    empty2 = sum((x == 0 for x in nums2))\n    mins1 = s1 + empty1\n    mins2 = s2 + empty2\n    if empty1 == 0 and s1 < mins2:\n        return -1\n    if empty2 == 0 and s2 < mins1:\n        return -1\n    return max(mins1, mins2)\nprint(minSum([0, 0, 3254323, -234772, 0, 99999999, -88888888, 0], [-50, -25, -25]))",
    "execution_output": -1
  },
  {
    "id": 770,
    "q_id": "sample_279",
    "code": "def min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]), min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint(minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 4000000, 234772], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 3254323]))",
    "execution_output": -1
  },
  {
    "id": 771,
    "q_id": "sample_279",
    "code": "def min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]), min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint(minOperations([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 1000], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 5]))",
    "execution_output": -1
  },
  {
    "id": 772,
    "q_id": "sample_279",
    "code": "def min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]), min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint(minOperations([-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -10], [-99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, -20]))",
    "execution_output": -1
  },
  {
    "id": 773,
    "q_id": "sample_279",
    "code": "def min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]), min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint(minOperations([999999999999, 888888888888, 777777777777, 666666666666, 555555555555, 444444444444, 333333333333, 222222222222, 111111111111, 123456789012, 1000000], [999999999998, 888888888887, 777777777776, 666666666665, 555555555554, 444444444443, 333333333332, 222222222221, 111111111110, 109876543210, 1000000]))",
    "execution_output": -1
  },
  {
    "id": 774,
    "q_id": "sample_279",
    "code": "def min_swaps(nums1, nums2, max1, max2):\n    total = 0\n    for a, b in zip(nums1, nums2):\n        if max1 >= a and max2 >= b:\n            pass\n        elif max2 >= a and max1 >= b:\n            total += 1\n        else:\n            return -1\n    return total\n\ndef minOperations(nums1: List[int], nums2: List[int]) -> int:\n    return min(min_swaps(nums1, nums2, nums1[-1], nums2[-1]), min_swaps(nums1, nums2, nums2[-1], nums1[-1]))\nprint(minOperations([999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 500], [999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 500]))",
    "execution_output": -1
  },
  {
    "id": 775,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n\n    @cache\n    def f(idx, a, b):\n        if idx == n - 1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx + 1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx + 1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10 ** 9 else -1\nprint(minOperations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]))",
    "execution_output": 0
  },
  {
    "id": 776,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n\n    @cache\n    def f(idx, a, b):\n        if idx == n - 1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx + 1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx + 1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10 ** 9 else -1\nprint(minOperations
    "execution_output": 50
  },
  {
    "id": 777,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n\n    @cache\n    def f(idx, a, b):\n        if idx == n - 1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx + 1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx + 1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10 ** 9 else -1\nprint(minOperations([-5, -3, -2, 0, -1], [-1, 0, -4, -3, 0]))",
    "execution_output": 1
  },
  {
    "id": 778,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n\n    @cache\n    def f(idx, a, b):\n        if idx == n - 1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx + 1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx + 1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10 ** 9 else -1\nprint(minOperations([5], [10]))",
    "execution_output": 0
  },
  {
    "id": 779,
    "q_id": "sample_280",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n    n = len(nums1)\n\n    @cache\n    def f(idx, a, b):\n        if idx == n - 1:\n            return 0\n        if nums1[idx] <= a and nums2[idx] <= b:\n            return f(idx + 1, a, b)\n        elif nums2[idx] <= a and nums1[idx] <= b:\n            return 1 + f(idx + 1, a, b)\n        else:\n            return inf\n    ans = min(f(0, nums1[-1], nums2[-1]), 1 + f(0, nums2[-1], nums1[-1]))\n    return ans if ans < 10 ** 9 else -1\nprint(minOperations
    "execution_output": 0
  },
  {
    "id": 780,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n\n    def f():\n        ret = 0\n        aa, bb = (a[:], b[:])\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = (b[i], a[i])\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    ans = f()\n    a[-1], b[-1] = (b[-1], a[-1])\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint(minOperations([100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 100, 1200, 300, 1500, 700, 1800, 950, 1700, 500, 1000], [200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000]))",
    "execution_output": 1
  },
  {
    "id": 781,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n\n    def f():\n        ret = 0\n        aa, bb = (a[:], b[:])\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = (b[i], a[i])\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    ans = f()\n    a[-1], b[-1] = (b[-1], a[-1])\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint(minOperations([100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 100000, 500000, 234772, 100, 999999, 1234567, 234771, 2000000, 3254323, 234772], [1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 1000, 234772, 200000, 1, 500, 12345, 234770, 111111, 222222, 3254323]))",
    "execution_output": 1
  },
  {
    "id": 782,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n\n    def f():\n        ret = 0\n        aa, bb = (a[:], b[:])\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = (b[i], a[i])\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    ans = f()\n    a[-1], b[-1] = (b[-1], a[-1])\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint(minOperations([1000000000000, 999999999999, 1000000, 1000000000001, 100000000, 1000000000005], [100000, 1000000000005, 999999999999, 1000, 500000000000, 1000000000000]))",
    "execution_output": 1
  },
  {
    "id": 783,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n\n    def f():\n        ret = 0\n        aa, bb = (a[:], b[:])\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = (b[i], a[i])\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    ans = f()\n    a[-1], b[-1] = (b[-1], a[-1])\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint(minOperations([-12, -6, -11, -5, -7, -10], [-7, -10, -6, -12, -10, -5]))",
    "execution_output": 3
  },
  {
    "id": 784,
    "q_id": "sample_281",
    "code": "def minOperations(a: List[int], b: List[int]) -> int:\n\n    def f():\n        ret = 0\n        aa, bb = (a[:], b[:])\n        for i in range(len(a)):\n            if a[i] > a[-1] or b[i] > b[-1]:\n                a[i], b[i] = (b[i], a[i])\n                ret += 1\n            if a[i] > a[-1] or b[i] > b[-1]:\n                return inf\n        a[:] = aa\n        b[:] = bb\n        return ret\n    ans = f()\n    a[-1], b[-1] = (b[-1], a[-1])\n    ans = min(ans, f() + 1)\n    return -1 if ans > len(a) else ans\nprint(minOperations([234772], [3254323]))",
    "execution_output": 0
  },
  {
    "id": 785,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint(minOperations([10], [20]))",
    "execution_output": 0
  },
  {
    "id": 786,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint(minOperations([1111], [123]))",
    "execution_output": 0
  },
  {
    "id": 787,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint(minOperations
    "execution_output": 51
  },
  {
    "id": 788,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint(minOperations
    "execution_output": -1
  },
  {
    "id": 789,
    "q_id": "sample_282",
    "code": "def minOperations(nums1: List[int], nums2: List[int]) -> int:\n\n    def check(m1, m2):\n        ans = 0\n        for x1, x2 in zip(nums1, nums2):\n            if x1 > m1 or x2 > m2:\n                if x2 > m1 or x1 > m2:\n                    return inf\n                ans += 1\n        return ans\n    m1 = nums1[-1]\n    m2 = nums2[-1]\n    ans = min(check(m1, m2), check(m2, m1))\n    return -1 if ans == inf else ans\nprint(minOperations
    "execution_output": 1
  },
  {
    "id": 790,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    return ret\nprint(minOperations([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0]))",
    "execution_output": 1
  },
  {
    "id": 791,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    return ret\nprint(minOperations
    "execution_output": 0
  },
  {
    "id": 792,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    return ret\nprint(minimumSteps(''))",
    "execution_output": 0
  },
  {
    "id": 793,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    return ret\nprint(minimumSteps('0'))",
    "execution_output": 0
  },
  {
    "id": 794,
    "q_id": "sample_289",
    "code": "def minimumSteps(s: str) -> int:\n    r = len(s) - 1\n    ret = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '1':\n            ret += r - i\n            r -= 1\n    return ret\nprint(minimumSteps('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'))",
    "execution_output": 0
  },
  {
    "id": 795,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i - a[i])\n    return ans\nprint(minimumSteps(''))",
    "execution_output": 0
  },
  {
    "id": 796,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i - a[i])\n    return ans\nprint(minimumSteps('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": 0
  },
  {
    "id": 797,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i - a[i])\n    return ans\nprint(minimumSteps('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'))",
    "execution_output": 0
  },
  {
    "id": 798,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i - a[i])\n    return ans\nprint(minimumSteps('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))",
    "execution_output": 495
  },
  {
    "id": 799,
    "q_id": "sample_290",
    "code": "def minimumSteps(s: str) -> int:\n    a = []\n    for i in range(len(s)):\n        if s[i] == '0':\n            a.append(i)\n    ans = 0\n    for i in range(len(a)):\n        ans += abs(i - a[i])\n    return ans\nprint(minimumSteps('😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀' + '00000000000000000000000000000000000000000000000000'))",
    "execution_output": 2500
  },
  {
    "id": 800,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint(minimumSteps(''))",
    "execution_output": 0
  },
  {
    "id": 801,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint(minimumSteps('1'))",
    "execution_output": 0
  },
  {
    "id": 802,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint(minimumSteps('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010'))",
    "execution_output": 1275
  },
  {
    "id": 803,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint(minimumSteps('11111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000'))",
    "execution_output": 2400
  },
  {
    "id": 804,
    "q_id": "sample_291",
    "code": "def minimumSteps(s: str) -> int:\n    cnt = 0\n    res = 0\n    for c in s:\n        if c == '1':\n            cnt += 1\n        else:\n            res += cnt\n    return res\nprint(minimumSteps('00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111'))",
    "execution_output": 0
  },
  {
    "id": 805,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint(minimumSteps('11111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000'))",
    "execution_output": 2400
  },
  {
    "id": 806,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint(minimumSteps('00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111'))",
    "execution_output": 0
  },
  {
    "id": 807,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint(minimumSteps(''))",
    "execution_output": 0
  },
  {
    "id": 808,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint(minimumSteps('1a1b0🎉0π0Ω1★0✓1é0ß1'))",
    "execution_output": 36
  },
  {
    "id": 809,
    "q_id": "sample_292",
    "code": "def minimumSteps(s: str) -> int:\n    ans = c1 = 0\n    for x in s:\n        if x == '1':\n            c1 += 1\n        else:\n            ans += c1\n    return ans\nprint(minimumSteps('3254323'))",
    "execution_output": 0
  },
  {
    "id": 810,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    return sum(idx) - m * (m - 1) // 2\nprint(minimumSteps(''))",
    "execution_output": 0
  },
  {
    "id": 811,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    return sum(idx) - m * (m - 1) // 2\nprint(minimumSteps('0'))",
    "execution_output": 0
  },
  {
    "id": 812,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    return sum(idx) - m * (m - 1) // 2\nprint(minimumSteps('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": 0
  },
  {
    "id": 813,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    return sum(idx) - m * (m - 1) // 2\nprint(minimumSteps('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'))",
    "execution_output": 0
  },
  {
    "id": 814,
    "q_id": "sample_293",
    "code": "def minimumSteps(s: str) -> int:\n    n = len(s)\n    idx = [i for i, c in enumerate(s) if c == '0']\n    m = len(idx)\n    return sum(idx) - m * (m - 1) // 2\nprint(minimumSteps('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010'))",
    "execution_output": 1275
  },
  {
    "id": 815,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1':\n            b += 1\n        else:\n            re += b\n    return re\nprint(minimumSteps(''))",
    "execution_output": 0
  },
  {
    "id": 816,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1':\n            b += 1\n        else:\n            re += b\n    return re\nprint(minimumSteps('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'))",
    "execution_output": 0
  },
  {
    "id": 817,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1':\n            b += 1\n        else:\n            re += b\n    return re\nprint(minimumSteps('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": 0
  },
  {
    "id": 818,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1':\n            b += 1\n        else:\n            re += b\n    return re\nprint(minimumSteps('1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010'))",
    "execution_output": 1275
  },
  {
    "id": 819,
    "q_id": "sample_294",
    "code": "def minimumSteps(s: str) -> int:\n    b = 0\n    re = 0\n    for i in s:\n        if i == '1':\n            b += 1\n        else:\n            re += b\n    return re\nprint(minimumSteps('11111111111111111111111111111111111111111111111111' + '00000000000000000000000000000000000000000000000000'))",
    "execution_output": 2500
  },
  {
    "id": 820,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = (0, 0)\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint(beautifulSubstrings('', 1))",
    "execution_output": 0
  },
  {
    "id": 821,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = (0, 0)\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint(beautifulSubstrings('a', 234772))",
    "execution_output": 0
  },
  {
    "id": 822,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = (0, 0)\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint(beautifulSubstrings('abababababababababababababababababababababababababababababababababababababababababababababababababab', 3254323))",
    "execution_output": 0
  },
  {
    "id": 823,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = (0, 0)\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint(beautifulSubstrings('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou', 234772))",
    "execution_output": 0
  },
  {
    "id": 824,
    "q_id": "sample_295",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    n = len(s)\n    tmp = set('aeiou')\n    s = [1 if c in tmp else 0 for c in s]\n    ans = 0\n    for i in range(n):\n        c1, c2 = (0, 0)\n        for j in range(i, n):\n            c1 += s[j]\n            c2 += 1 - s[j]\n            if c1 == c2 and c1 * c2 % k == 0:\n                ans += 1\n    return ans\nprint(beautifulSubstrings('A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! A1! ', 987654321))",
    "execution_output": 0
  },
  {
    "id": 825,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint(beautifulSubstrings('abababababababababababababababababababababababababababababababababababababababababababababababababab', 234772))",
    "execution_output": 0
  },
  {
    "id": 826,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint(beautifulSubstrings('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou', 3254323))",
    "execution_output": 0
  },
  {
    "id": 827,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint(beautifulSubstrings('                                                                                                    ', 8))",
    "execution_output": 0
  },
  {
    "id": 828,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint(beautifulSubstrings('', 5))",
    "execution_output": 0
  },
  {
    "id": 829,
    "q_id": "sample_296",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    for i in range(1, k + 1):\n        if i * i % k == 0:\n            k = i * 2\n            break\n    cc = [Counter() for _ in range(k)]\n    cc[0][0] = 1\n    ans = cur = 0\n    for i, x in enumerate(s, 1):\n        cur += 1 if x in 'aeiou' else -1\n        ans += cc[i % k][cur]\n        cc[i % k][cur] += 1\n    return ans\nprint(beautifulSubstrings('A', 1))",
    "execution_output": 0
  },
  {
    "id": 830,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = 'aeiou'\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = (0, 0)\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and numVowels * numCons % k == 0:\n                res += 1\n    return res\nprint(beautifulSubstrings('', 10))",
    "execution_output": 0
  },
  {
    "id": 831,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = 'aeiou'\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = (0, 0)\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and numVowels * numCons % k == 0:\n                res += 1\n    return res\nprint(beautifulSubstrings('a', 3254323))",
    "execution_output": 0
  },
  {
    "id": 832,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = 'aeiou'\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = (0, 0)\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and numVowels * numCons % k == 0:\n                res += 1\n    return res\nprint(beautifulSubstrings('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 2))",
    "execution_output": 0
  },
  {
    "id": 833,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = 'aeiou'\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = (0, 0)\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and numVowels * numCons % k == 0:\n                res += 1\n    return res\nprint(beautifulSubstrings('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 2))",
    "execution_output": 0
  },
  {
    "id": 834,
    "q_id": "sample_297",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    res = 0\n    vowels = 'aeiou'\n    n = len(s)\n    for i in range(n):\n        numVowels, numCons = (0, 0)\n        for j in range(i, n):\n            if s[j] in vowels:\n                numVowels += 1\n            else:\n                numCons += 1\n            if numVowels == numCons and numVowels * numCons % k == 0:\n                res += 1\n    return res\nprint(beautifulSubstrings('aeioubcdfgaeioubcdfgaeioubcdfgaeioubcdfgaeioubcdfgaeioubcdfgaeioubcdfgaeioubcdfgaeioubcdfgaeioubcdfg', 234772))",
    "execution_output": 0
  },
  {
    "id": 835,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n            output += diff == 0 and count ** 2 % k == 0\n    return output\nprint(beautifulSubstrings('abababababababababababababababababababababababababababababababababababababababababababababababababab', 1))",
    "execution_output": 2500
  },
  {
    "id": 836,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n            output += diff == 0 and count ** 2 % k == 0\n    return output\nprint(beautifulSubstrings('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 234772))",
    "execution_output": 0
  },
  {
    "id": 837,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n            output += diff == 0 and count ** 2 % k == 0\n    return output\nprint(beautifulSubstrings('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', 3254323))",
    "execution_output": 0
  },
  {
    "id": 838,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n            output += diff == 0 and count ** 2 % k == 0\n    return output\nprint(beautifulSubstrings('AeIoU123!?AeIoU123!?AeIoU123!?AeIoU123!?AeIoU123!?AeIoU123!?AeIoU123!?AeIoU123!?AeIoU123!?AeIoU123!?', 16))",
    "execution_output": 0
  },
  {
    "id": 839,
    "q_id": "sample_298",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    vowels = set('aeiou')\n    n = len(s)\n    output = 0\n    for i in range(n):\n        diff = 0\n        count = 0\n        for j in range(i, n):\n            if s[j] in vowels:\n                diff += 1\n                count += 1\n            else:\n                diff -= 1\n            output += diff == 0 and count ** 2 % k == 0\n    return output\nprint(beautifulSubstrings('', 7))",
    "execution_output": 0
  },
  {
    "id": 840,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa = []\n    for c in s:\n        if c in 'aiueo':\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i = defaultdict(list)\n    a2i[0].append(0)\n    ans = s = 0\n    for i, a in enumerate(aa):\n        s += a\n        for j in a2i[s]:\n            if ((i + 1 - j) // 2) ** 2 % k == 0:\n                ans += 1\n        a2i[s].append(i + 1)\n    return ans\nprint(beautifulSubstrings('', 7))",
    "execution_output": 0
  },
  {
    "id": 841,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa = []\n    for c in s:\n        if c in 'aiueo':\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i = defaultdict(list)\n    a2i[0].append(0)\n    ans = s = 0\n    for i, a in enumerate(aa):\n        s += a\n        for j in a2i[s]:\n            if ((i + 1 - j) // 2) ** 2 % k == 0:\n                ans += 1\n        a2i[s].append(i + 1)\n    return ans\nprint(beautifulSubstrings('a', 234772))",
    "execution_output": 0
  },
  {
    "id": 842,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa = []\n    for c in s:\n        if c in 'aiueo':\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i = defaultdict(list)\n    a2i[0].append(0)\n    ans = s = 0\n    for i, a in enumerate(aa):\n        s += a\n        for j in a2i[s]:\n            if ((i + 1 - j) // 2) ** 2 % k == 0:\n                ans += 1\n        a2i[s].append(i + 1)\n    return ans\nprint(beautifulSubstrings('abababababababababababababababababababababababababababababababababababababababababababababababababab', 3254323))",
    "execution_output": 0
  },
  {
    "id": 843,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa = []\n    for c in s:\n        if c in 'aiueo':\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i = defaultdict(list)\n    a2i[0].append(0)\n    ans = s = 0\n    for i, a in enumerate(aa):\n        s += a\n        for j in a2i[s]:\n            if ((i + 1 - j) // 2) ** 2 % k == 0:\n                ans += 1\n        a2i[s].append(i + 1)\n    return ans\nprint(beautifulSubstrings('                                                  ' + '🙂👍🔥' + '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!', 8))",
    "execution_output": 0
  },
  {
    "id": 844,
    "q_id": "sample_299",
    "code": "from collections import defaultdict\n\ndef beautifulSubstrings(s: str, k: int) -> int:\n    aa = []\n    for c in s:\n        if c in 'aiueo':\n            aa.append(1)\n        else:\n            aa.append(-1)\n    a2i = defaultdict(list)\n    a2i[0].append(0)\n    ans = s = 0\n    for i, a in enumerate(aa):\n        s += a\n        for j in a2i[s]:\n            if ((i + 1 - j) // 2) ** 2 % k == 0:\n                ans += 1\n        a2i[s].append(i + 1)\n    return ans\nprint(beautifulSubstrings('aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU', -25))",
    "execution_output": 460
  },
  {
    "id": 845,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k + 1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod((x ** ((v + 1) // 2) for x, v in p.items()))\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[x, i % k] += 1\n    return sum((v * (v - 1) // 2 for v in m.values()))\nprint(beautifulSubstrings('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv', 234772))",
    "execution_output": 0
  },
  {
    "id": 846,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k + 1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod((x ** ((v + 1) // 2) for x, v in p.items()))\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[x, i % k] += 1\n    return sum((v * (v - 1) // 2 for v in m.values()))\nprint(beautifulSubstrings('bcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzbcdfghjklmnpqrst', 3254323))",
    "execution_output": 0
  },
  {
    "id": 847,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k + 1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod((x ** ((v + 1) // 2) for x, v in p.items()))\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[x, i % k] += 1\n    return sum((v * (v - 1) // 2 for v in m.values()))\nprint(beautifulSubstrings('', 10))",
    "execution_output": 0
  },
  {
    "id": 848,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k + 1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod((x ** ((v + 1) // 2) for x, v in p.items()))\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[x, i % k] += 1\n    return sum((v * (v - 1) // 2 for v in m.values()))\nprint(beautifulSubstrings('a', 1))",
    "execution_output": 0
  },
  {
    "id": 849,
    "q_id": "sample_300",
    "code": "def beautifulSubstrings(s: str, k: int) -> int:\n    p = defaultdict(int)\n    for i in range(2, k + 1):\n        while k % i == 0:\n            p[i] += 1\n            k //= i\n    k = 2 * prod((x ** ((v + 1) // 2) for x, v in p.items()))\n    a = [2 * (x in 'aeiou') - 1 for x in s]\n    m = defaultdict(int)\n    for i, x in enumerate((0, *accumulate(a))):\n        m[x, i % k] += 1\n    return sum((v * (v - 1) // 2 for v in m.values()))\nprint(beautifulSubstrings('😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇', 131072))",
    "execution_output": 0
  },
  {
    "id": 850,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    order = sorted(range(n), key=lambda x: nums[x])\n    out = [-1] * n\n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l:i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint(lexicographicallySmallestArray([-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 1))",
    "execution_output": [
      -50,
      -49,
      -48,
      -47,
      -46,
      -45,
      -44,
      -43,
      -42,
      -41,
      -40,
      -39,
      -38,
      -37,
      -36,
      -35,
      -34,
      -33,
      -32,
      -31,
      -30,
      -29,
      -28,
      -27,
      -26,
      -25,
      -24,
      -23,
      -22,
      -21,
      -20,
      -19,
      -18,
      -17,
      -16,
      -15,
      -14,
      -13,
      -12,
      -11,
      -10,
      -9,
      -8,
      -7,
      -6,
      -5,
      -4,
      -3,
      -2,
      -1,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49
    ]
  },
  {
    "id": 851,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    order = sorted(range(n), key=lambda x: nums[x])\n    out = [-1] * n\n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l:i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint(lexicographicallySmallestArray([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], 1000000))",
    "execution_output": [
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7,
      7
    ]
  },
  {
    "id": 852,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    order = sorted(range(n), key=lambda x: nums[x])\n    out = [-1] * n\n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l:i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint(lexicographicallySmallestArray([0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4], 0))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4,
      0,
      1,
      2,
      3,
      4
    ]
  },
  {
    "id": 853,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    order = sorted(range(n), key=lambda x: nums[x])\n    out = [-1] * n\n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l:i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint(lexicographicallySmallestArray([3254323, 234772, -234772, -3254323, 0, 1, -1, 2147483647, -2147483648, 999999999, -999999999, 123456789, -123456789, 987654321, -987654321, 500000, -500000], 100000))",
    "execution_output": [
      3254323,
      234772,
      -234772,
      -3254323,
      -1,
      0,
      1,
      2147483647,
      -2147483648,
      999999999,
      -999999999,
      123456789,
      -123456789,
      987654321,
      -987654321,
      500000,
      -500000
    ]
  },
  {
    "id": 854,
    "q_id": "sample_301",
    "code": "def lexicographicallySmallestArray(nums: List[int], limit: int) -> List[int]:\n    n = len(nums)\n    order = sorted(range(n), key=lambda x: nums[x])\n    out = [-1] * n\n    l = 0\n    for i in range(n):\n        if i == n - 1 or nums[order[i]] + limit < nums[order[i + 1]]:\n            ind = sorted(order[l:i + 1])\n            for j in range(i - l + 1):\n                out[ind[j]] = nums[order[l + j]]\n            l = i + 1\n    return out\nprint(lexicographicallySmallestArray([5, 5, 5, 4, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, -1, -1], -1))",
    "execution_output": [
      5,
      5,
      5,
      4,
      4,
      4,
      3,
      3,
      2,
      2,
      1,
      1,
      0,
      0,
      -1,
      -1
    ]
  },
  {
    "id": 855,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = (len(nums), len(nums[0]))\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint(matrixSum([[234772, -3254323, 999999999], [123456789, 987654321, -1000000000], [2147483647, -2147483648, 0]]))",
    "execution_output": 2270940436
  },
  {
    "id": 856,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = (len(nums), len(nums[0]))\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint(matrixSum([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]))",
    "execution_output": 5050
  },
  {
    "id": 857,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = (len(nums), len(nums[0]))\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint(matrixSum([[], [], []]))",
    "execution_output": 0
  },
  {
    "id": 858,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = (len(nums), len(nums[0]))\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint(matrixSum([[5], [-10], [0], [234772], [-99999]]))",
    "execution_output": 234772
  },
  {
    "id": 859,
    "q_id": "sample_308",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    n, m = (len(nums), len(nums[0]))\n    for i in range(n):\n        nums[i].sort(reverse=1)\n    res = 0\n    for k in range(m):\n        maxi = 0\n        for i in range(n):\n            maxi = max(maxi, nums[i][k])\n        res += maxi\n    return res\nprint(matrixSum([[1e309, -1e309, 3.14, float('nan'), 42.0], [9999999999.0, -123456789.0, float('nan'), 1e+308, -1e+308]]))",
    "execution_output": Infinity
  },
  {
    "id": 860,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint(matrixSum([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102]]))",
    "execution_output": 5250
  },
  {
    "id": 861,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint(matrixSum([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323]]))",
    "execution_output": 90717745
  },
  {
    "id": 862,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint(matrixSum
    "execution_output": 325432300
  },
  {
    "id": 863,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint(matrixSum([[234772], [3254323], [0], [-3254323], [999999], [123456789], [1], [2], [3], [4]]))",
    "execution_output": 123456789
  },
  {
    "id": 864,
    "q_id": "sample_309",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    for l in nums:\n        l.sort()\n    out = 0\n    while nums[0]:\n        top = 0\n        for l in nums:\n            top = max(top, l.pop())\n        out += top\n    return out\nprint(matrixSum([[-3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]))",
    "execution_output": 0
  },
  {
    "id": 865,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint(matrixSum([[3254323]]))",
    "execution_output": 3254323
  },
  {
    "id": 866,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint(matrixSum([[3254323, 234772, 999999999, -999999999, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 123456789, -123456789, 987654321, -987654321, 2147483647, -2147483648, 42, -42, 73, -73, 88, -88, 100, -100, 256, -256, 1024, -1024, 4096, -4096, 8192, -8192, 16384, -16384, 32768, -32768, 65536, -65536, 131072, -131072, 262144, -262144, 524288, -524288, 1048576, -1048576, 2097152, -2097152, 4194304, -4194304, 8388608, -8388608, 16777216, -16777216, 33554432, -33554432, 67108864, -67108864, 134217728, -134217728, 268435456, -268435456, 536870912, -536870912, 1073741824, -1073741824, 20, -30, 40, -50, 60, -70, 80, -90, 1000, -2000, 3000, -4000, 5000, -6000, 7000, -8000, 9000, -10000, 11000, -12000, 13000, -14000, 15000, -16000, 17000, -18000, 18000, -19000, 20000]]))",
    "execution_output": 6409684201
  },
  {
    "id": 867,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint(matrixSum([[-49], [-48], [-47], [-46], [-45], [-44], [-43], [-42], [-41], [-40], [-39], [-38], [-37], [-36], [-35], [-34], [-33], [-32], [-31], [-30], [-29], [-28], [-27], [-26], [-25], [-24], [-23], [-22], [-21], [-20], [-19], [-18], [-17], [-16], [-15], [-14], [-13], [-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1], [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34], [35], [36], [37], [38], [39], [40], [41], [42], [43], [44], [45], [46], [47], [48], [49], [1000000000000]]))",
    "execution_output": 1000000000000
  },
  {
    "id": 868,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint(matrixSum([[-1000000000000000000, 1000000000000000000], [3254323, -234772]]))",
    "execution_output": 1000000000000000000
  },
  {
    "id": 869,
    "q_id": "sample_310",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    for i in range(len(a)):\n        a[i].sort()\n    ans = 0\n    for j in range(len(a[0])):\n        x = 0\n        for i in range(len(a)):\n            x = max(x, a[i][j])\n        ans += x\n    return ans\nprint(matrixSum([[0, 0, 0], [234772, 234772, 234772], [-234772, -234772, -234772]]))",
    "execution_output": 704316
  },
  {
    "id": 870,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = (len(nums), len(nums[0]))\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint(matrixSum([[234772, 3254323, -999999999, 0], [999999999999, -234772, 3254323, 42], [123456789, 987654321, -1, -2]]))",
    "execution_output": 1000123456830
  },
  {
    "id": 871,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = (len(nums), len(nums[0]))\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint(matrixSum([[-1, -2, -3, -4, -5], [-10, -20, -30, -40, -50], [-6, -7, -8, -9, -10]]))",
    "execution_output": 0
  },
  {
    "id": 872,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = (len(nums), len(nums[0]))\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint(matrixSum([[10, 9, 8, 7, 6], [1], [100, 90, 80, 70, 60, 50, 40, 30]]))",
    "execution_output": 400
  },
  {
    "id": 873,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = (len(nums), len(nums[0]))\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint(matrixSum([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51, 50, 51]]))",
    "execution_output": 6275
  },
  {
    "id": 874,
    "q_id": "sample_311",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    ans = 0\n    m, n = (len(nums), len(nums[0]))\n    for _ in range(n):\n        cur = 0\n        for i in range(m):\n            val = max(nums[i])\n            j = nums[i].index(val)\n            nums[i][j] = 0\n            cur = max(cur, val)\n        ans += cur\n    return ans\nprint(matrixSum([[234772, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 3254323]]))",
    "execution_output": 3493946
  },
  {
    "id": 875,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list((list(l) for l in zip(*matrix)))\n    return sum(map(max, mat))\nprint(matrixSum([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 234772, 3254323, 987654321, 999999999999, -1000000000, 500000000, -999999999999, 2147483647, -2147483648, 12345678901234567890]]))",
    "execution_output": 12345678901725715400
  },
  {
    "id": 876,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list((list(l) for l in zip(*matrix)))\n    return sum(map(max, mat))\nprint(matrixSum([[12345678901234567890, -12345678901234567890, 999999999999999999], [9223372036854775807, -9223372036854775808, 0], [3254323, -234772, 234772]]))",
    "execution_output": 13345678901234333117
  },
  {
    "id": 877,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list((list(l) for l in zip(*matrix)))\n    return sum(map(max, mat))\nprint(matrixSum([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1]]))",
    "execution_output": 1
  },
  {
    "id": 878,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list((list(l) for l in zip(*matrix)))\n    return sum(map(max, mat))\nprint(matrixSum([]))",
    "execution_output": 0
  },
  {
    "id": 879,
    "q_id": "sample_312",
    "code": "def matrixSum(nums: List[List[int]]) -> int:\n    matrix = [sorted(l) for l in nums]\n    mat = list((list(l) for l in zip(*matrix)))\n    return sum(map(max, mat))\nprint(matrixSum([[234772, -3254323, 3254323], [999999999, -999999999, 0]]))",
    "execution_output": 996980448
  },
  {
    "id": 880,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = (len(a), len(a[0]))\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint(matrixSum([[], [], []]))",
    "execution_output": 0
  },
  {
    "id": 881,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = (len(a), len(a[0]))\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint(matrixSum([[95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -234772, 234772, -999999, 3254323]]))",
    "execution_output": 3493655
  },
  {
    "id": 882,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = (len(a), len(a[0]))\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint(matrixSum([[-50], [-49], [-48], [-47], [-46], [-45], [-44], [-43], [-42], [-41], [-40], [-39], [-38], [-37], [-36], [-35], [-34], [-33], [-32], [-31], [-30], [-29], [-28], [-27], [-26], [-25], [-24], [-23], [-22], [-21], [-20], [-19], [-18], [-17], [-16], [-15], [-14], [-13], [-12], [-11], [-10], [-9], [-8], [-7], [-6], [-5], [-4], [-3], [-2], [-1], [0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34], [35], [36], [37], [38], [39], [40], [41], [42], [43], [44], [45], [46], [47], [48], [3254323]]))",
    "execution_output": 3254323
  },
  {
    "id": 883,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = (len(a), len(a[0]))\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint(matrixSum([[7, 7, 7, 7, 7], [7, 7, 7, 7, 7], [7, 7, 7, 7, 7]]))",
    "execution_output": 35
  },
  {
    "id": 884,
    "q_id": "sample_313",
    "code": "def matrixSum(a: List[List[int]]) -> int:\n    n, m = (len(a), len(a[0]))\n    for i in range(n):\n        a[i] = sorted(a[i])\n    ans = 0\n    for j in range(m):\n        tmp = 0\n        for i in range(n):\n            tmp = max(tmp, a[i][j])\n        ans += tmp\n    return ans\nprint(matrixSum([[-1, -2, -3, -4], [-10, -20, -30, -40], [-234772, -3254323, -123456, -99999], [-5, -5, -5, -5]]))",
    "execution_output": 0
  },
  {
    "id": 885,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n    return max_strength\nprint(maxStrength([234772, 3254323, -987654321, -123456789]))",
    "execution_output": 93159446720064945315097366764
  },
  {
    "id": 886,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n    return max_strength\nprint(maxStrength([]))",
    "execution_output": -Infinity
  },
  {
    "id": 887,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n    return max_strength\nprint(maxStrength([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25]))",
    "execution_output": 25
  },
  {
    "id": 888,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n    return max_strength\nprint(maxStrength([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "execution_output": 435456000
  },
  {
    "id": 889,
    "q_id": "sample_320",
    "code": "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef maxStrength(nums: List[int]) -> int:\n    n = len(nums)\n    max_strength = float('-inf')\n    for r in range(1, n + 1):\n        for combination in combinations(nums, r):\n            product = reduce(operator.mul, combination, 1)\n            max_strength = max(max_strength, product)\n    return max_strength\nprint(maxStrength([-3254323]))",
    "execution_output": -3254323
  },
  {
    "id": 890,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint(maxStrength([-3254323]))",
    "execution_output": -3254323
  },
  {
    "id": 891,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint(maxStrength([0]))",
    "execution_output": 0
  },
  {
    "id": 892,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint(maxStrength([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 893,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint(maxStrength([0, -234772] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 894,
    "q_id": "sample_321",
    "code": "def maxStrength(nums: List[int]) -> int:\n    ans = max(nums)\n    p = [num for num in nums if num > 0]\n    pmax = 1\n    if len(p) > 0:\n        pmax *= prod(p)\n    n = [num for num in nums if num < 0]\n    n.sort()\n    nmax = 1\n    if len(n) > 0:\n        m = len(n) - len(n) % 2\n        nmax *= prod(n[:m])\n    if len(p) == 0 and len(n) < 2:\n        return ans\n    return pmax * nmax\nprint(maxStrength([234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323, 234772, -3254323, -234772, 3254323]))",
    "execution_output": 1430038612361500645570036535554435747656329929924762787517281981226707271221780271506691148522319379882767858474176975076019907148813542312123006651560097867543482449083649341839124056094502370185542946887400533247281163714715519824811795338499032889983161953852506886840345667843008842229133314558973870802785736832598553067686432725869297928059912763206937403468136087622219645687672156315579558066405666565635197179185216041919784538557567671583889624291166035045182870707848973010359205963889779046394280887211826066542834852928896199945682570032645892600465950558442890464232068952019173376
  },
  {
    "id": 895,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            ii.append(i + 1)\n    if len(ii) < 3:\n        return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]):\n        ans = max(ans, r - l)\n    return ans\nprint(longestSemiRepetitiveSubstring(''))",
    "execution_output": 0
  },
  {
    "id": 896,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            ii.append(i + 1)\n    if len(ii) < 3:\n        return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]):\n        ans = max(ans, r - l)\n    return ans\nprint(longestSemiRepetitiveSubstring('a'))",
    "execution_output": 1
  },
  {
    "id": 897,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            ii.append(i + 1)\n    if len(ii) < 3:\n        return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]):\n        ans = max(ans, r - l)\n    return ans\nprint(longestSemiRepetitiveSubstring('0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'))",
    "execution_output": 100
  },
  {
    "id": 898,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            ii.append(i + 1)\n    if len(ii) < 3:\n        return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]):\n        ans = max(ans, r - l)\n    return ans\nprint(longestSemiRepetitiveSubstring('                                                                                                    '))",
    "execution_output": 2
  },
  {
    "id": 899,
    "q_id": "sample_328",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    ii = [0]\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            ii.append(i + 1)\n    if len(ii) < 3:\n        return n\n    ii.append(n)\n    ans = 0\n    for l, r in zip(ii, ii[2:]):\n        ans = max(ans, r - l)\n    return ans\nprint(longestSemiRepetitiveSubstring('🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß 🙂🙂aß '))",
    "execution_output": 10
  },
  {
    "id": 900,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    left = 0\n    best = 1\n    count = 0\n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n        best = max(best, right - left + 1)\n    return best\nprint(longestSemiRepetitiveSubstring(''))",
    "execution_output": 1
  },
  {
    "id": 901,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    left = 0\n    best = 1\n    count = 0\n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n        best = max(best, right - left + 1)\n    return best\nprint(longestSemiRepetitiveSubstring('😀'))",
    "execution_output": 1
  },
  {
    "id": 902,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    left = 0\n    best = 1\n    count = 0\n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n        best = max(best, right - left + 1)\n    return best\nprint(longestSemiRepetitiveSubstring('                                                                                                    '))",
    "execution_output": 2
  },
  {
    "id": 903,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    left = 0\n    best = 1\n    count = 0\n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n        best = max(best, right - left + 1)\n    return best\nprint(longestSemiRepetitiveSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 2
  },
  {
    "id": 904,
    "q_id": "sample_329",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    N = len(s)\n    left = 0\n    best = 1\n    count = 0\n    for right in range(1, N):\n        if s[right] == s[right - 1]:\n            count += 1\n        while count > 1:\n            if s[left] == s[left + 1]:\n                count -= 1\n            left += 1\n        best = max(best, right - left + 1)\n    return best\nprint(longestSemiRepetitiveSubstring('abababababababababababababababababababababababababababababababababababababababababababababababababab'))",
    "execution_output": 100
  },
  {
    "id": 905,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s) - 1):\n        if s[i + 1] == s[i]:\n            ans.append(i)\n    ans.append(len(s) - 1)\n    if len(ans) == 2:\n        return len(s)\n    return max((ans[i + 2] - ans[i] for i in range(len(ans) - 2)))\nprint(longestSemiRepetitiveSubstring(''))",
    "execution_output": 0
  },
  {
    "id": 906,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s) - 1):\n        if s[i + 1] == s[i]:\n            ans.append(i)\n    ans.append(len(s) - 1)\n    if len(ans) == 2:\n        return len(s)\n    return max((ans[i + 2] - ans[i] for i in range(len(ans) - 2)))\nprint(longestSemiRepetitiveSubstring('a'))",
    "execution_output": 1
  },
  {
    "id": 907,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s) - 1):\n        if s[i + 1] == s[i]:\n            ans.append(i)\n    ans.append(len(s) - 1)\n    if len(ans) == 2:\n        return len(s)\n    return max((ans[i + 2] - ans[i] for i in range(len(ans) - 2)))\nprint(longestSemiRepetitiveSubstring('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'))",
    "execution_output": 2
  },
  {
    "id": 908,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s) - 1):\n        if s[i + 1] == s[i]:\n            ans.append(i)\n    ans.append(len(s) - 1)\n    if len(ans) == 2:\n        return len(s)\n    return max((ans[i + 2] - ans[i] for i in range(len(ans) - 2)))\nprint(longestSemiRepetitiveSubstring('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'[:100]))",
    "execution_output": 100
  },
  {
    "id": 909,
    "q_id": "sample_330",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    ans = [-1]\n    for i in range(len(s) - 1):\n        if s[i + 1] == s[i]:\n            ans.append(i)\n    ans.append(len(s) - 1)\n    if len(ans) == 2:\n        return len(s)\n    return max((ans[i + 2] - ans[i] for i in range(len(ans) - 2)))\nprint(longestSemiRepetitiveSubstring('😀😀 😁😁\\t\\t\\n\\n'))",
    "execution_output": 5
  },
  {
    "id": 910,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]:\n            t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]:\n                t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint(longestSemiRepetitiveSubstring(''))",
    "execution_output": 0
  },
  {
    "id": 911,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]:\n            t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]:\n                t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint(longestSemiRepetitiveSubstring('a'))",
    "execution_output": 1
  },
  {
    "id": 912,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]:\n            t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]:\n                t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint(longestSemiRepetitiveSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 2
  },
  {
    "id": 913,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]:\n            t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]:\n                t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint(longestSemiRepetitiveSubstring('😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃' + '😀😀'))",
    "execution_output": 100
  },
  {
    "id": 914,
    "q_id": "sample_331",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    n = len(s)\n    i = 0\n    t = 0\n    res = 0\n    for j in range(n):\n        if j and s[j - 1] == s[j]:\n            t += 1\n        while t > 1:\n            i += 1\n            if s[i - 1] == s[i]:\n                t -= 1\n        res = max(res, j - i + 1)\n    return res\nprint(longestSemiRepetitiveSubstring('aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabb'))",
    "execution_output": 4
  },
  {
    "id": 915,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i] - bak[i - 2])\n    return mx\nprint(longestSemiRepetitiveSubstring(''))",
    "execution_output": 0
  },
  {
    "id": 916,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i] - bak[i - 2])\n    return mx\nprint(longestSemiRepetitiveSubstring('Z'))",
    "execution_output": 1
  },
  {
    "id": 917,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i] - bak[i - 2])\n    return mx\nprint(longestSemiRepetitiveSubstring('abababababababababababababababababababababababababababababababababababababababababababababababababab'))",
    "execution_output": 100
  },
  {
    "id": 918,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i] - bak[i - 2])\n    return mx\nprint(longestSemiRepetitiveSubstring('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'))",
    "execution_output": 2
  },
  {
    "id": 919,
    "q_id": "sample_332",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    bak = [0]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            bak.append(i)\n    bak.append(len(s))\n    if len(bak) <= 3:\n        return len(s)\n    mx = 0\n    for i in range(2, len(bak)):\n        mx = max(mx, bak[i] - bak[i - 2])\n    return mx\nprint(longestSemiRepetitiveSubstring('1234554321123455432112345543211234554321123455432112345543211234554321123455432112345543211234554321'))",
    "execution_output": 10
  },
  {
    "id": 920,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = (0, 0)\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r - 1] and r > 0) < 2:\n            cnt += s[r] == s[r - 1] and r > 0\n            r += 1\n        ans = max(ans, r - l)\n        if l == n - 1:\n            break\n        cnt -= s[l] == s[l + 1]\n        l += 1\n    return ans\nprint(longestSemiRepetitiveSubstring(''))",
    "execution_output": 0
  },
  {
    "id": 921,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = (0, 0)\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r - 1] and r > 0) < 2:\n            cnt += s[r] == s[r - 1] and r > 0\n            r += 1\n        ans = max(ans, r - l)\n        if l == n - 1:\n            break\n        cnt -= s[l] == s[l + 1]\n        l += 1\n    return ans\nprint(longestSemiRepetitiveSubstring('x'))",
    "execution_output": 1
  },
  {
    "id": 922,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = (0, 0)\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r - 1] and r > 0) < 2:\n            cnt += s[r] == s[r - 1] and r > 0\n            r += 1\n        ans = max(ans, r - l)\n        if l == n - 1:\n            break\n        cnt -= s[l] == s[l + 1]\n        l += 1\n    return ans\nprint(longestSemiRepetitiveSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 2
  },
  {
    "id": 923,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = (0, 0)\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r - 1] and r > 0) < 2:\n            cnt += s[r] == s[r - 1] and r > 0\n            r += 1\n        ans = max(ans, r - l)\n        if l == n - 1:\n            break\n        cnt -= s[l] == s[l + 1]\n        l += 1\n    return ans\nprint(longestSemiRepetitiveSubstring('ababababababababababababababababababababababababababababababababababababababababababababababababab' + 'aa'))",
    "execution_output": 100
  },
  {
    "id": 924,
    "q_id": "sample_333",
    "code": "def longestSemiRepetitiveSubstring(s: str) -> int:\n    l, r = (0, 0)\n    cnt = 0\n    ans = 0\n    n = len(s)\n    while l < n:\n        while r < n and cnt + (s[r] == s[r - 1] and r > 0) < 2:\n            cnt += s[r] == s[r - 1] and r > 0\n            r += 1\n        ans = max(ans, r - l)\n        if l == n - 1:\n            break\n        cnt -= s[l] == s[l + 1]\n        l += 1\n    return ans\nprint(longestSemiRepetitiveSubstring('234772234772234772234772234772234772234772234772234772234772234772234772234772234772234772234772' + '3254'))",
    "execution_output": 10
  },
  {
    "id": 925,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint(longestString(0, 0, 0))",
    "execution_output": 0
  },
  {
    "id": 926,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint(longestString(3254323, 234772, 234772))",
    "execution_output": 1408634
  },
  {
    "id": 927,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint(longestString(-5, 10, 3))",
    "execution_output": -12
  },
  {
    "id": 928,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint(longestString(10, -5, -7))",
    "execution_output": -32
  },
  {
    "id": 929,
    "q_id": "sample_340",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    return z * 2 + (min(x, y + 1) + min(y, x + 1)) * 2\nprint(longestString(2147483647, 2147483647, 2147483647))",
    "execution_output": 12884901882
  },
  {
    "id": 930,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint(longestString(0, 0, 0))",
    "execution_output": 0
  },
  {
    "id": 931,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint(longestString(3254323, 234772, 999999999))",
    "execution_output": 2000939088
  },
  {
    "id": 932,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint(longestString(-1000000, -1000001, 5000000))",
    "execution_output": 5999998
  },
  {
    "id": 933,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint(longestString(10 ** 18, 10 ** 18, -10 ** 18))",
    "execution_output": 2000000000000000000
  },
  {
    "id": 934,
    "q_id": "sample_341",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    if x > y:\n        return 2 * (y + min(y + 1, x) + z)\n    else:\n        return 2 * (x + min(x + 1, y) + z)\nprint(longestString(1, 10 ** 30, 2))",
    "execution_output": 10
  },
  {
    "id": 935,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans + z) * 2\nprint(longestString(0, 0, 0))",
    "execution_output": 0
  },
  {
    "id": 936,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans + z) * 2\nprint(longestString(0, 10, 100000))",
    "execution_output": 200002
  },
  {
    "id": 937,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans + z) * 2\nprint(longestString(3254323, 234772, 999999))",
    "execution_output": 2939088
  },
  {
    "id": 938,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans + z) * 2\nprint(longestString(-5, 3, 2))",
    "execution_output": -14
  },
  {
    "id": 939,
    "q_id": "sample_342",
    "code": "def longestString(x: int, y: int, z: int) -> int:\n    ans = min(x, y) * 2\n    if x != y:\n        ans += 1\n    return (ans + z) * 2\nprint(longestString(1000000000000, 1, 1000000000000))",
    "execution_output": 2000000000006
  },
  {
    "id": 940,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda: inf)\n    A[words[0][0] + words[0][-1]] = len(words[0])\n    for w in words[1:]:\n        B = defaultdict(lambda: inf)\n        for a, x in A.items():\n            B[a[0] + w[-1]] = min(B[a[0] + w[-1]], x + len(w) - (a[-1] == w[0]))\n            B[w[0] + a[-1]] = min(B[w[0] + a[-1]], x + len(w) - (w[-1] == a[0]))\n        A, B = (B, A)\n    return min(A.values())\nprint(minimizeConcatenatedLength(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'] + ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']))",
    "execution_output": 2
  },
  {
    "id": 941,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda: inf)\n    A[words[0][0] + words[0][-1]] = len(words[0])\n    for w in words[1:]:\n        B = defaultdict(lambda: inf)\n        for a, x in A.items():\n            B[a[0] + w[-1]] = min(B[a[0] + w[-1]], x + len(w) - (a[-1] == w[0]))\n            B[w[0] + a[-1]] = min(B[w[0] + a[-1]], x + len(w) - (w[-1] == a[0]))\n        A, B = (B, A)\n    return min(A.values())\nprint(minimizeConcatenatedLength(['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' + 'b', 'b' + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'a' + 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' + 'a']))",
    "execution_output": 497
  },
  {
    "id": 942,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda: inf)\n    A[words[0][0] + words[0][-1]] = len(words[0])\n    for w in words[1:]:\n        B = defaultdict(lambda: inf)\n        for a, x in A.items():\n            B[a[0] + w[-1]] = min(B[a[0] + w[-1]], x + len(w) - (a[-1] == w[0]))\n            B[w[0] + a[-1]] = min(B[w[0] + a[-1]], x + len(w) - (w[-1] == a[0]))\n        A, B = (B, A)\n    return min(A.values())\nprint(minimizeConcatenatedLength(['😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀', '😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀' + '😎', '😎' + '😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀', '😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎😎']))",
    "execution_output": 397
  },
  {
    "id": 943,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda: inf)\n    A[words[0][0] + words[0][-1]] = len(words[0])\n    for w in words[1:]:\n        B = defaultdict(lambda: inf)\n        for a, x in A.items():\n            B[a[0] + w[-1]] = min(B[a[0] + w[-1]], x + len(w) - (a[-1] == w[0]))\n            B[w[0] + a[-1]] = min(B[w[0] + a[-1]], x + len(w) - (w[-1] == a[0]))\n        A, B = (B, A)\n    return min(A.values())\nprint(minimizeConcatenatedLength(['9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', '234772234772234772234772234772234772234772234772234772234772234772234772234772234772234772234772' + '2347', '32543233254323325432332543233254323325432332543233254323325432332543233254323325432332543233254323' + '32', '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', '1' + '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000' + '1']))",
    "execution_output": 499
  },
  {
    "id": 944,
    "q_id": "sample_343",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    A = defaultdict(lambda: inf)\n    A[words[0][0] + words[0][-1]] = len(words[0])\n    for w in words[1:]:\n        B = defaultdict(lambda: inf)\n        for a, x in A.items():\n            B[a[0] + w[-1]] = min(B[a[0] + w[-1]], x + len(w) - (a[-1] == w[0]))\n            B[w[0] + a[-1]] = min(B[w[0] + a[-1]], x + len(w) - (w[-1] == a[0]))\n        A, B = (B, A)\n    return min(A.values())\nprint(minimizeConcatenatedLength
    "execution_output": 498
  },
  {
    "id": 945,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij', 'klmnopqrstklmnopqrstklmnopqrstklmnopqrstklmnopqrstklmnopqrstklmnopqrstklmnopqrstklmnopqrstklmnopqrst', 'uvwxyzabcduvwxyzabcduvwxyzabcduvwxyzabcduvwxyzabcduvwxyzabcduvwxyzabcduvwxyzabcduvwxyzabcduvwxyzabcd', 'mnopqrstuvmnopqrstuvmnopqrstuvmnopqrstuvmnopqrstuvmnopqrstuvmnopqrstuvmnopqrstuvmnopqrstuvmnopqrstuv', 'qrstuvwxyzqrstuvwxyzqrstuvwxyzqrstuvwxyzqrstuvwxyzqrstuvwxyzqrstuvwxyzqrstuvwxyzqrstuvwxyzqrstuvwxyz']))",
    "execution_output": 500
  },
  {
    "id": 946,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb', 'aa', 'ab', 'ba', 'bb']))",
    "execution_output": 106
  },
  {
    "id": 947,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['😀a', 'a😀', '😀😀', 'b😂', '😂b', 'c😊', '😊c', '😀c', 'c😀']))",
    "execution_output": 12
  },
  {
    "id": 948,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['   ', '  ', '\\t\\t', ' \\t', '\\t ', '   \\t', '\\t   ']))",
    "execution_output": 14
  },
  {
    "id": 949,
    "q_id": "sample_344",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dp(i, first, last):\n        if i == n:\n            return 0\n        ans1 = dp(i + 1, first, words[i][-1]) - int(last == words[i][0])\n        ans2 = dp(i + 1, words[i][0], last) - int(words[i][-1] == first)\n        if ans1 > ans2:\n            return ans2 + len(words[i])\n        return ans1 + len(words[i])\n    return dp(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['234772', '3254323', '12345678901234567890123456789012345678901234567890', '98765432109876543210987654321098765432109876543210', '12345678901234567890123456789012345678901234567890123456789012345678901234567890', '2222222222222222', '0']))",
    "execution_output": 208
  },
  {
    "id": 950,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']))",
    "execution_output": 2
  },
  {
    "id": 951,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789', '9876543210987654321098765432109876543210987654321098765432109876543210987654321098765432109876543210', '234772', '3254323']))",
    "execution_output": 212
  },
  {
    "id": 952,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['     a', 'a     ', '          ', ' \\t\\t ', '\\t    \\t']))",
    "execution_output": 29
  },
  {
    "id": 953,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['😊a', 'a😊', '😊', 'åß', 'ẞa', 'aẞ', '😀😀', '😀a']))",
    "execution_output": 11
  },
  {
    "id": 954,
    "q_id": "sample_345",
    "code": "def minimizeConcatenatedLength(words: List[str]) -> int:\n    n = len(words)\n\n    @cache\n    def dfs(i, l, r):\n        if i == n:\n            return 0\n        s = words[i]\n        nl = s[0]\n        nr = s[-1]\n        return len(s) + min(dfs(i + 1, l, nr) - (r == nl), dfs(i + 1, nl, r) - (l == nr))\n    return dfs(1, words[0][0], words[0][-1]) + len(words[0])\nprint(minimizeConcatenatedLength(['!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()!@#$%^&*()', ')(*&^%$#@!', '@start!', '!end@', 'middle-middle']))",
    "execution_output": 132
  },
  {
    "id": 955,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x, y in zip(moveFrom, moveTo):\n        tmp = d[x]\n        d[x] -= tmp\n        d[y] += tmp\n    return [x for x in sorted(d) if d[x] > 0]\nprint(relocateMarbles([], [1, 2, 3], [4, 5, 6]))",
    "execution_output": []
  },
  {
    "id": 956,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x, y in zip(moveFrom, moveTo):\n        tmp = d[x]\n        d[x] -= tmp\n        d[y] += tmp\n    return [x for x in sorted(d) if d[x] > 0]\nprint(relocateMarbles([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772]))",
    "execution_output": [
      234772
    ]
  },
  {
    "id": 957,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x, y in zip(moveFrom, moveTo):\n        tmp = d[x]\n        d[x] -= tmp\n        d[y] += tmp\n    return [x for x in sorted(d) if d[x] > 0]\nprint(relocateMarbles([3254323, 3254323, 3254323, 234772, 234772, 999999937], [3254323, 234772, 999999937, 888888888, 777777777, 666666666], [999999937, 888888888, 777777777, 3254323, 666666666, 3254323]))",
    "execution_output": [
      3254323
    ]
  },
  {
    "id": 958,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x, y in zip(moveFrom, moveTo):\n        tmp = d[x]\n        d[x] -= tmp\n        d[y] += tmp\n    return [x for x in sorted(d) if d[x] > 0]\nprint(relocateMarbles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1]))",
    "execution_output": [
      1
    ]
  },
  {
    "id": 959,
    "q_id": "sample_352",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    d = defaultdict(int)\n    for x in nums:\n        d[x] += 1\n    for x, y in zip(moveFrom, moveTo):\n        tmp = d[x]\n        d[x] -= tmp\n        d[y] += tmp\n    return [x for x in sorted(d) if d[x] > 0]\nprint(relocateMarbles([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42], [42, 1000, 42, 1001, 42, 1002, 42, 1003, 42, 1004, 42, 1005, 42, 1006, 42, 1007, 42, 1008, 42, 1009, 42, 1010, 42, 1011, 42, 1012, 42, 1013, 42, 1014, 42, 1015, 42, 1016, 42, 1017, 42, 1018, 42, 1019, 42, 1020, 42, 1021, 42, 1022, 42, 1023, 42, 1024, 42, 1025, 42, 1026, 42, 1027, 42, 1028, 42, 1029, 42, 1030, 42, 1031, 42, 1032, 42, 1033, 42, 1034, 42, 1035, 42, 1036, 42, 1037, 42, 1038, 42, 1039, 42, 1040, 42, 1041, 42, 1042, 42, 1043, 42, 1044, 42, 1045, 42, 1046, 42, 1047, 42, 1048, 42, 1049], [1000, 42, 1001, 42, 1002, 42, 1003, 42, 1004, 42, 1005, 42, 1006, 42, 1007, 42, 1008, 42, 1009, 42, 1010, 42, 1011, 42, 1012, 42, 1013, 42, 1014, 42, 1015, 42, 1016, 42, 1017, 42, 1018, 42, 1019, 42, 1020, 42, 1021, 42, 1022, 42, 1023, 42, 1024, 42, 1025, 42, 1026, 42, 1027, 42, 1028, 42, 1029, 42, 1030, 42, 1031, 42, 1032, 42, 1033, 42, 1034, 42, 1035, 42, 1036, 42, 1037, 42, 1038, 42, 1039, 42, 1040, 42, 1041, 42, 1042, 42, 1043, 42, 1044, 42, 1045, 42, 1046, 42, 1047, 42, 1048, 42, 1049, 42]))",
    "execution_output": [
      42
    ]
  },
  {
    "id": 960,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)\n        loc.add(j)\n    return sorted(loc)\nprint(relocateMarbles([234772, 3254323, 99999999], [234772, 3254323, 777777777777, 99999999], [3254323, 777777777777, 234772, 999999990000000]))",
    "execution_output": [
      234772,
      999999990000000
    ]
  },
  {
    "id": 961,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)\n        loc.add(j)\n    return sorted(loc)\nprint(relocateMarbles([0, -1, -1, -2], [-1, -2, 0], [-1, 0, -3]))",
    "execution_output": [
      -3,
      -1
    ]
  },
  {
    "id": 962,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)\n        loc.add(j)\n    return sorted(loc)\nprint(relocateMarbles([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]))",
    "execution_output": [
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199
    ]
  },
  {
    "id": 963,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)\n        loc.add(j)\n    return sorted(loc)\nprint(relocateMarbles(['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'], ['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'], ['cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc', 'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa']))",
    "execution_output": [
      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    ]
  },
  {
    "id": 964,
    "q_id": "sample_353",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    loc = set(nums)\n    for i, j in zip(moveFrom, moveTo):\n        loc.remove(i)\n        loc.add(j)\n    return sorted(loc)\nprint(relocateMarbles([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]))",
    "execution_output": [
      101
    ]
  },
  {
    "id": 965,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint(relocateMarbles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [100000, 100001, 100002, 100003, 100004, 100005, 100006, 100007, 100008, 100009, 100010, 100011, 100012, 100013, 100014, 100015, 100016, 100017, 100018, 100019, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100071, 100072, 100073, 100074, 100075, 100076, 100077, 100078, 100079, 100080, 100081, 100082, 100083, 100084, 100085, 100086, 100087, 100088, 100089, 100090, 100091, 100092, 100093, 100094, 100095, 100096, 100097, 100098, 100099]))",
    "execution_output": [
      100000,
      100001,
      100002,
      100003,
      100004,
      100005,
      100006,
      100007,
      100008,
      100009,
      100010,
      100011,
      100012,
      100013,
      100014,
      100015,
      100016,
      100017,
      100018,
      100019,
      100020,
      100021,
      100022,
      100023,
      100024,
      100025,
      100026,
      100027,
      100028,
      100029,
      100030,
      100031,
      100032,
      100033,
      100034,
      100035,
      100036,
      100037,
      100038,
      100039,
      100040,
      100041,
      100042,
      100043,
      100044,
      100045,
      100046,
      100047,
      100048,
      100049,
      100050,
      100051,
      100052,
      100053,
      100054,
      100055,
      100056,
      100057,
      100058,
      100059,
      100060,
      100061,
      100062,
      100063,
      100064,
      100065,
      100066,
      100067,
      100068,
      100069,
      100070,
      100071,
      100072,
      100073,
      100074,
      100075,
      100076,
      100077,
      100078,
      100079,
      100080,
      100081,
      100082,
      100083,
      100084,
      100085,
      100086,
      100087,
      100088,
      100089,
      100090,
      100091,
      100092,
      100093,
      100094,
      100095,
      100096,
      100097,
      100098,
      100099
    ]
  },
  {
    "id": 966,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint(relocateMarbles([234772, 3254323, 999999999999999999999999, -999999999999999999999998], [234772, 3254323, 999999999999999999999999, -999999999999999999999998], [3254323, 234772, 3254323, 234772]))",
    "execution_output": [
      234772,
      3254323
    ]
  },
  {
    "id": 967,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint(relocateMarbles([0, -1, -1, 0, -1000000, 1000000, 0], [0, -1, 1000000, -1000000, 0], [1, 0, -1000000, 1000000, -1]))",
    "execution_output": [
      -1,
      1,
      1000000
    ]
  },
  {
    "id": 968,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint(relocateMarbles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1]))",
    "execution_output": [
      1
    ]
  },
  {
    "id": 969,
    "q_id": "sample_354",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for x in nums:\n        s.add(x)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(list(s))\nprint(relocateMarbles([], [], []))",
    "execution_output": []
  },
  {
    "id": 970,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint(relocateMarbles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]))",
    "execution_output": [
      101
    ]
  },
  {
    "id": 971,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint(relocateMarbles([-1000000000000, -1, 0, 1, 234772, 3254323, 1000000000000], [-1000000000000, -1, 0, 1, 234772, 3254323, 1000000000000], [-1, 0, 1, 234772, 3254323, 1000000000000, 999999999999]))",
    "execution_output": [
      999999999999
    ]
  },
  {
    "id": 972,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint(relocateMarbles([], [], []))",
    "execution_output": []
  },
  {
    "id": 973,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint(relocateMarbles([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8], [8, 7, 8, 7, 8, 7, 8, 7, 8, 9]))",
    "execution_output": [
      9
    ]
  },
  {
    "id": 974,
    "q_id": "sample_355",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    s = set()\n    for i in nums:\n        s.add(i)\n    for i in range(len(moveFrom)):\n        s.remove(moveFrom[i])\n        s.add(moveTo[i])\n    return sorted(s)\nprint(relocateMarbles([1000000000000000, -1000000000000000], [1000000000000000, -1000000000000000, 2000000000000000, -2000000000000000], [2000000000000000, -2000000000000000, 3000000000000000, -3000000000000000]))",
    "execution_output": [
      -3000000000000000,
      3000000000000000
    ]
  },
  {
    "id": 975,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint(relocateMarbles([], [], []))",
    "execution_output": []
  },
  {
    "id": 976,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint(relocateMarbles([234772, 3254323, -3254323, 0], [234772, 0, -3254323, 3254323], [3254323, 234772, 999999999, -999999999]))",
    "execution_output": [
      -999999999,
      234772,
      999999999
    ]
  },
  {
    "id": 977,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint(relocateMarbles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]))",
    "execution_output": [
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200
    ]
  },
  {
    "id": 978,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint(relocateMarbles([1, 2, 3, 4, 5], [1, 2, 3, 999, 1000], [10, 20, 30]))",
    "execution_output": [
      4,
      5,
      10,
      20,
      30
    ]
  },
  {
    "id": 979,
    "q_id": "sample_356",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    tmp = set(nums)\n    for x, y in zip(moveFrom, moveTo):\n        tmp.remove(x)\n        tmp.add(y)\n    return sorted(tmp)\nprint(relocateMarbles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]))",
    "execution_output": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      2000,
      2001,
      2002,
      2003,
      2004,
      2005,
      2006,
      2007,
      2008,
      2009,
      2010,
      2011,
      2012,
      2013,
      2014,
      2015,
      2016,
      2017,
      2018,
      2019,
      2020,
      2021,
      2022,
      2023,
      2024,
      2025,
      2026,
      2027,
      2028,
      2029,
      2030,
      2031,
      2032,
      2033,
      2034,
      2035,
      2036,
      2037,
      2038,
      2039,
      2040,
      2041,
      2042,
      2043,
      2044,
      2045,
      2046,
      2047,
      2048,
      2049
    ]
  },
  {
    "id": 980,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a, b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint(relocateMarbles([-1000000000000, 0, 234772, 3254323], [-1000000000000, 0, 234772, 3254323, 999999999999], [999999999999, -999999999999, 234773, -1000000000000, 0]))",
    "execution_output": [
      -1000000000000,
      -999999999999,
      0,
      234773
    ]
  },
  {
    "id": 981,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a, b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint(relocateMarbles([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": [
      100
    ]
  },
  {
    "id": 982,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a, b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint(relocateMarbles([], [], []))",
    "execution_output": []
  },
  {
    "id": 983,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a, b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint(relocateMarbles([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7], [7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5]))",
    "execution_output": [
      5
    ]
  },
  {
    "id": 984,
    "q_id": "sample_357",
    "code": "def relocateMarbles(nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n    nums = sorted(list(set(nums)))\n    dd = {}\n    for item in nums:\n        dd[item] = 1\n    for a, b in zip(moveFrom, moveTo):\n        del dd[a]\n        dd[b] = 1\n    ll = dd.keys()\n    return sorted(ll)\nprint(relocateMarbles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": [
      0
    ]
  },
  {
    "id": 985,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1000000000.0)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1000000000.0) else dp[n]\nprint(minimumBeautifulSubstrings(''))",
    "execution_output": 0
  },
  {
    "id": 986,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1000000000.0)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1000000000.0) else dp[n]\nprint(minimumBeautifulSubstrings('0'))",
    "execution_output": -1
  },
  {
    "id": 987,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1000000000.0)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1000000000.0) else dp[n]\nprint(minimumBeautifulSubstrings('1'))",
    "execution_output": 1
  },
  {
    "id": 988,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1000000000.0)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1000000000.0) else dp[n]\nprint(minimumBeautifulSubstrings('0' + '111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'))",
    "execution_output": -1
  },
  {
    "id": 989,
    "q_id": "sample_358",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    good = []\n    num = 1\n    n = len(s)\n    while True:\n        b = bin(num)[2:]\n        if len(b) > n:\n            break\n        good.append(b)\n        num *= 5\n    dp = [int(1000000000.0)] * (n + 1)\n    dp[0] = 0\n    gs = set(good)\n    for i in range(n):\n        for j in range(i + 1):\n            if s[j:i + 1] in gs:\n                dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n    return -1 if dp[n] == int(1000000000.0) else dp[n]\nprint(minimumBeautifulSubstrings('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'))",
    "execution_output": 100
  },
  {
    "id": 990,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint(minimumBeautifulSubstrings(''))",
    "execution_output": 0
  },
  {
    "id": 991,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint(minimumBeautifulSubstrings('0'))",
    "execution_output": -1
  },
  {
    "id": 992,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint(minimumBeautifulSubstrings('1'))",
    "execution_output": 1
  },
  {
    "id": 993,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint(minimumBeautifulSubstrings('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'))",
    "execution_output": 100
  },
  {
    "id": 994,
    "q_id": "sample_359",
    "code": "def minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n    f = [-1] * (n + 1)\n    f[0] = 0\n    sp = set()\n    p = 1\n    while len(bin(p)[2:]) <= n:\n        sp.add(str(bin(p)[2:]))\n        p *= 5\n    for i in range(n):\n        if f[i] >= 0:\n            for j in range(i + 1, n + 1):\n                if s[i:j] in sp:\n                    if f[j] == -1 or f[j] > f[i] + 1:\n                        f[j] = f[i] + 1\n    return f[-1]\nprint(minimumBeautifulSubstrings('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": -1
  },
  {
    "id": 995,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15:\n        break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n\n    @cache\n    def getRes(idx):\n        if idx == n:\n            return 0\n        ans = inf\n        for j in range(idx + 1, n + 1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint(minimumBeautifulSubstrings(''))",
    "execution_output": 0
  },
  {
    "id": 996,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15:\n        break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n\n    @cache\n    def getRes(idx):\n        if idx == n:\n            return 0\n        ans = inf\n        for j in range(idx + 1, n + 1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint(minimumBeautifulSubstrings('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))",
    "execution_output": -1
  },
  {
    "id": 997,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15:\n        break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n\n    @cache\n    def getRes(idx):\n        if idx == n:\n            return 0\n        ans = inf\n        for j in range(idx + 1, n + 1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint(minimumBeautifulSubstrings('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'))",
    "execution_output": 100
  },
  {
    "id": 998,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15:\n        break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n\n    @cache\n    def getRes(idx):\n        if idx == n:\n            return 0\n        ans = inf\n        for j in range(idx + 1, n + 1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint(minimumBeautifulSubstrings('1100111001110011100111001110011100111001110011100111001110011100111001110011100111001110011100111001'))",
    "execution_output": 20
  },
  {
    "id": 999,
    "q_id": "sample_360",
    "code": "tmp = set()\nfor i in range(30):\n    x = bin(pow(5, i))[2:]\n    if len(x) > 15:\n        break\n    tmp.add(x)\n\ndef minimumBeautifulSubstrings(s: str) -> int:\n    n = len(s)\n\n    @cache\n    def getRes(idx):\n        if idx == n:\n            return 0\n        ans = inf\n        for j in range(idx + 1, n + 1):\n            if s[idx:j] in tmp:\n                ans = min(ans, getRes(j) + 1)\n        return ans\n    ans = getRes(0)\n    getRes.cache_clear()\n    return ans if ans < inf else -1\nprint(minimumBeautifulSubstrings('🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂'))",
    "execution_output": -1
  },
  {
    "id": 1000,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = 'aeiouAEIOU'\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return ''.join(ans)\nprint(sortVowels(''))",
    "execution_output": ""
  },
  {
    "id": 1001,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = 'aeiouAEIOU'\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return ''.join(ans)\nprint(sortVowels('A'))",
    "execution_output": "A"
  },
  {
    "id": 1002,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = 'aeiouAEIOU'\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return ''.join(ans)\nprint(sortVowels('UOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEAUOIEA'))",
    "execution_output": "AAAAAAAAAAAAAAAAAAEEEEEEEEEEEEEEEEEEIIIIIIIIIIIIIIIIIIOOOOOOOOOOOOOOOOOOUUUUUUUUUUUUUUUUUU"
  },
  {
    "id": 1003,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = 'aeiouAEIOU'\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return ''.join(ans)\nprint(sortVowels('bcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzbcdfghjklmnpqr'))",
    "execution_output": "bcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzbcdfghjklmnpqr"
  },
  {
    "id": 1004,
    "q_id": "sample_367",
    "code": "def sortVowels(s: str) -> str:\n    ss = 'aeiouAEIOU'\n    ans = []\n    qs = [c for c in s if c in ss]\n    qs.sort()\n    pos = 0\n    for c in s:\n        if c in ss:\n            ans.append(qs[pos])\n            pos += 1\n        else:\n            ans.append(c)\n    return ''.join(ans)\nprint(sortVowels('Code1234!Code1234!Code1234!Code1234!Code1234!Code1234!Code1234!Code1234!Code1234!Code1234!Code1234!X'))",
    "execution_output": "Cede1234!Cede1234!Cede1234!Cede1234!Cede1234!Cedo1234!Codo1234!Codo1234!Codo1234!Codo1234!Codo1234!X"
  },
  {
    "id": 1005,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = (vowels[i], v2[i])\n        answer[j] = c\n    return ''.join(answer)\nprint(sortVowels(''))",
    "execution_output": ""
  },
  {
    "id": 1006,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = (vowels[i], v2[i])\n        answer[j] = c\n    return ''.join(answer)\nprint(sortVowels('a'))",
    "execution_output": "a"
  },
  {
    "id": 1007,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = (vowels[i], v2[i])\n        answer[j] = c\n    return ''.join(answer)\nprint(sortVowels('aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU'))",
    "execution_output": "AAAAAAAAAEEEEEEEEEIIIIIIIIIOOOOOOOOOUUUUUUUUUaaaaaaaaaeeeeeeeeeiiiiiiiiiooooooooouuuuuuuuu"
  },
  {
    "id": 1008,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = (vowels[i], v2[i])\n        answer[j] = c\n    return ''.join(answer)\nprint(sortVowels('bcdfgBCDFG12345-bcdfgBCDFG12345-bcdfgBCDFG12345-bcdfgBCDFG12345-bcdfgBCDFG12345-bcdfgBCDFG12345-bcdf'))",
    "execution_output": "bcdfgBCDFG12345-bcdfgBCDFG12345-bcdfgBCDFG12345-bcdfgBCDFG12345-bcdfgBCDFG12345-bcdfgBCDFG12345-bcdf"
  },
  {
    "id": 1009,
    "q_id": "sample_368",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    answer = [None for i in range(n)]\n    vowels = []\n    v2 = []\n    for i in range(n):\n        if s[i] not in 'aeiouAEIOU':\n            answer[i] = s[i]\n        else:\n            vowels.append(s[i])\n            v2.append(i)\n    vowels = sorted(vowels, key=lambda a: ord(a))\n    m = len(vowels)\n    for i in range(m):\n        c, j = (vowels[i], v2[i])\n        answer[j] = c\n    return ''.join(answer)\nprint(sortVowels('Value-234772-and-3254323-with-Emojis-😊-and-Accents-áéíóú-AEIOUaeiou'))",
    "execution_output": "VAlAE-234772-End-3254323-wIth-OmUjas-😊-and-accants-áéíóú-eeeiiioouu"
  },
  {
    "id": 1010,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    n = len(s)\n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    vs = sorted(v, key=lambda i: s[i])\n    ss = s[:]\n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    return ''.join(s)\nprint(sortVowels(''))",
    "execution_output": ""
  },
  {
    "id": 1011,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    n = len(s)\n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    vs = sorted(v, key=lambda i: s[i])\n    ss = s[:]\n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    return ''.join(s)\nprint(sortVowels('A'))",
    "execution_output": "A"
  },
  {
    "id": 1012,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    n = len(s)\n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    vs = sorted(v, key=lambda i: s[i])\n    ss = s[:]\n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    return ''.join(s)\nprint(sortVowels('bcdfg BCDFG 12345 !@#'))",
    "execution_output": "bcdfg BCDFG 12345 !@#"
  },
  {
    "id": 1013,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    n = len(s)\n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    vs = sorted(v, key=lambda i: s[i])\n    ss = s[:]\n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    return ''.join(s)\nprint(sortVowels('uUoOiIeEaAuUoOiIeEaAuUoOiIeEaAuUoOiIeEaAuUoOiIeEaAuUoOiIeEaAuUoOiIeEaAuUoOiIeEaAuUoOiIeEaAuUoOiIeEaA'))",
    "execution_output": "AAAAAAAAAAEEEEEEEEEEIIIIIIIIIIOOOOOOOOOOUUUUUUUUUUaaaaaaaaaaeeeeeeeeeeiiiiiiiiiioooooooooouuuuuuuuuu"
  },
  {
    "id": 1014,
    "q_id": "sample_369",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    n = len(s)\n    v = []\n    for i in range(n):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            v.append(i)\n    vs = sorted(v, key=lambda i: s[i])\n    ss = s[:]\n    for i in range(len(v)):\n        s[v[i]] = ss[vs[i]]\n    return ''.join(s)\nprint(sortVowels('Start-234772-End-3254323-ABCDEFGHIJKLMNOPQRSTUVWXYZ-abcdefghijklmnopqrstuvwxyz-!!! VowelsAEIOUaeiou.'))",
    "execution_output": "StArt-234772-And-3254323-EBCDEFGHEJKLMNIPQRSTIVWXYZ-ObcdOfghUjklmnUpqrstavwxyz-!!! Vawalseeeiiooouu."
  },
  {
    "id": 1015,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    a = []\n    n = len(s)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            a.append(s[i])\n    a.sort(reverse=True)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            s[i] = a.pop()\n    return ''.join(s)\nprint(sortVowels(''))",
    "execution_output": ""
  },
  {
    "id": 1016,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    a = []\n    n = len(s)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            a.append(s[i])\n    a.sort(reverse=True)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            s[i] = a.pop()\n    return ''.join(s)\nprint(sortVowels('A'))",
    "execution_output": "A"
  },
  {
    "id": 1017,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    a = []\n    n = len(s)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            a.append(s[i])\n    a.sort(reverse=True)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            s[i] = a.pop()\n    return ''.join(s)\nprint(sortVowels('bcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfg'))",
    "execution_output": "bcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfgbcdfg"
  },
  {
    "id": 1018,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    a = []\n    n = len(s)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            a.append(s[i])\n    a.sort(reverse=True)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            s[i] = a.pop()\n    return ''.join(s)\nprint(sortVowels('aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU'))",
    "execution_output": "AAAAAAAAAAEEEEEEEEEEIIIIIIIIIIOOOOOOOOOOUUUUUUUUUUaaaaaaaaaaeeeeeeeeeeiiiiiiiiiioooooooooouuuuuuuuuu"
  },
  {
    "id": 1019,
    "q_id": "sample_370",
    "code": "def sortVowels(s: str) -> str:\n    s = list(s)\n    a = []\n    n = len(s)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            a.append(s[i])\n    a.sort(reverse=True)\n    for i in range(n):\n        if s[i] in 'aeiouAEIOU':\n            s[i] = a.pop()\n    return ''.join(s)\nprint(sortVowels(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:',.<>/?aeiouAEIOU\"))",
    "execution_output": "ABCDAFGHEJKLMNEPQRSTIVWXYZIbcdOfghOjklmnUpqrstUvwxyz0123456789!@#$%^&*()_+-=[]{}|;:',.<>/?aaeeiioouu"
  },
  {
    "id": 1020,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in 'aeiou' or s[i] in 'AEIOU':\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return ''.join(res)\nprint(sortVowels(''))",
    "execution_output": ""
  },
  {
    "id": 1021,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in 'aeiou' or s[i] in 'AEIOU':\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return ''.join(res)\nprint(sortVowels('u'))",
    "execution_output": "u"
  },
  {
    "id": 1022,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in 'aeiou' or s[i] in 'AEIOU':\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return ''.join(res)\nprint(sortVowels('AbcdefGhijAbcdefGhijAbcdefGhijAbcdefGhijAbcdefGhijAbcdefGhijAbcdefGhijAbcdefGhijAbcdefGhijAbcdefGhij'))",
    "execution_output": "AbcdAfGhAjAbcdAfGhAjAbcdAfGhAjAbcdefGhejebcdefGhejebcdefGhejebcdefGhijibcdifGhijibcdifGhijibcdifGhij"
  },
  {
    "id": 1023,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in 'aeiou' or s[i] in 'AEIOU':\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return ''.join(res)\nprint(sortVowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou'))",
    "execution_output": "aaaaaaaaaaaaaaaaaaaaeeeeeeeeeeeeeeeeeeeeiiiiiiiiiiiiiiiiiiiioooooooooooooooooooouuuuuuuuuuuuuuuuuuuu"
  },
  {
    "id": 1024,
    "q_id": "sample_371",
    "code": "def sortVowels(s: str) -> str:\n    n = len(s)\n    t = []\n    p = []\n    for i in range(n):\n        if s[i] in 'aeiou' or s[i] in 'AEIOU':\n            t.append(s[i])\n            p.append(i)\n    t.sort()\n    res = list(s)\n    for i in range(len(t)):\n        res[p[i]] = t[i]\n    return ''.join(res)\nprint(sortVowels('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))",
    "execution_output": "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
  },
  {
    "id": 1025,
    "q_id": "sample_372",
    "code": "def vowel(ch):\n    return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint(sortVowels(''))",
    "execution_output": ""
  },
  {
    "id": 1026,
    "q_id": "sample_372",
    "code": "def vowel(ch):\n    return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint(sortVowels('aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU'))",
    "execution_output": "AAAAAAAAAAEEEEEEEEEEIIIIIIIIIIOOOOOOOOOOUUUUUUUUUUaaaaaaaaaaeeeeeeeeeeiiiiiiiiiioooooooooouuuuuuuuuu"
  },
  {
    "id": 1027,
    "q_id": "sample_372",
    "code": "def vowel(ch):\n    return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint(sortVowels('bcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdf'))",
    "execution_output": "bcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdfbcdf"
  },
  {
    "id": 1028,
    "q_id": "sample_372",
    "code": "def vowel(ch):\n    return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint(sortVowels('                                                                                                    '))",
    "execution_output": "                                                                                                    "
  },
  {
    "id": 1029,
    "q_id": "sample_372",
    "code": "def vowel(ch):\n    return ch.lower() in 'aeiou'\n\ndef sortVowels(s: str) -> str:\n    q = deque(sorted((ch for ch in s if vowel(ch))))\n    res = []\n    for ch in s:\n        if vowel(ch):\n            res.append(q.popleft())\n        else:\n            res.append(ch)\n    return ''.join(res)\nprint(sortVowels('😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇'))",
    "execution_output": "😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇😀😃😄😁😆😅😂🤣😊😇"
  },
  {
    "id": 1030,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint(minimumSeconds([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]))",
    "execution_output": 1
  },
  {
    "id": 1031,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint(minimumSeconds([234772, -3254323, 234772, 0, 999999999, 234772, -3254323, 234772, 3254323, 234772, 123456789012345678901234567890, 234772, -999999999999999999999999, 234772]))",
    "execution_output": 1
  },
  {
    "id": 1032,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint(minimumSeconds(['0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789', 'a', 'b', 'c', 'd', 'e', '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789', 'x', 'y', 'z', 'u', 'v', 'w', 'q', 'r', 't', 'p', '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789']))",
    "execution_output": 5
  },
  {
    "id": 1033,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint(minimumSeconds([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": 50
  },
  {
    "id": 1034,
    "q_id": "sample_374",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, j in enumerate(nums):\n        d[j].append(i)\n    n = len(nums)\n    ret = n // 2\n    for l in d.values():\n        r = 0\n        q = len(l)\n        for i, j in enumerate(l):\n            if i < q - 1:\n                k = l[i + 1]\n            else:\n                k = l[0] + n\n            r = max(r, (k - j) // 2)\n        ret = min(ret, r)\n    return ret\nprint(minimumSeconds([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 0
  },
  {
    "id": 1035,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2 == 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint(minimumSeconds([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]))",
    "execution_output": 1
  },
  {
    "id": 1036,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2 == 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint(minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 50
  },
  {
    "id": 1037,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2 == 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint(minimumSeconds
    "execution_output": 1
  },
  {
    "id": 1038,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2 == 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint(minimumSeconds([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]))",
    "execution_output": 0
  },
  {
    "id": 1039,
    "q_id": "sample_375",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    ref = defaultdict(list)\n    for i in range(len(nums)):\n        ref[nums[i]].append(i)\n    ans = inf\n    for i in ref:\n        k = 0\n        for j in range(len(ref[i])):\n            x = ref[i][j]\n            y = ref[i][j - 1]\n            if x > y:\n                k = max(k, x - y - 1)\n            else:\n                k = max(k, len(nums) - y + x - 1)\n        if k % 2 == 1:\n            k += 1\n        ans = min(ans, k // 2)\n    return ans\nprint(minimumSeconds([5, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 5]))",
    "execution_output": 49
  },
  {
    "id": 1040,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n - idxs[-1] + idxs[0]\n        for i in range(len(idxs) - 1):\n            gap = max(gap, idxs[i + 1] - idxs[i])\n        min_steps = min(min_steps, gap // 2)\n    return min_steps\nprint(minimumSeconds([0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4]))",
    "execution_output": 2
  },
  {
    "id": 1041,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n - idxs[-1] + idxs[0]\n        for i in range(len(idxs) - 1):\n            gap = max(gap, idxs[i + 1] - idxs[i])\n        min_steps = min(min_steps, gap // 2)\n    return min_steps\nprint(minimumSeconds([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 1042,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n - idxs[-1] + idxs[0]\n        for i in range(len(idxs) - 1):\n            gap = max(gap, idxs[i + 1] - idxs[i])\n        min_steps = min(min_steps, gap // 2)\n    return min_steps\nprint(minimumSeconds([234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772]))",
    "execution_output": 2
  },
  {
    "id": 1043,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n - idxs[-1] + idxs[0]\n        for i in range(len(idxs) - 1):\n            gap = max(gap, idxs[i + 1] - idxs[i])\n        min_steps = min(min_steps, gap // 2)\n    return min_steps\nprint(minimumSeconds([3254323]))",
    "execution_output": 0
  },
  {
    "id": 1044,
    "q_id": "sample_376",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    n = len(nums)\n    ni = defaultdict(list)\n    for i, v in enumerate(nums):\n        ni[v].append(i)\n    min_steps = n\n    for v, idxs in ni.items():\n        gap = n - idxs[-1] + idxs[0]\n        for i in range(len(idxs) - 1):\n            gap = max(gap, idxs[i + 1] - idxs[i])\n        min_steps = min(min_steps, gap // 2)\n    return min_steps\nprint(minimumSeconds([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 0
  },
  {
    "id": 1045,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, el in enumerate(nums):\n        d[el].append(i)\n    ans = float('inf')\n\n    def check(el):\n        t = d[el][:]\n        g = [t[0] + len(nums) - 1 - t[-1]]\n        for a, b in zip(t, t[1:]):\n            g.append(b - a - 1)\n        p = max(g)\n        return (p + 1) // 2\n    for el in d:\n        ans = min(ans, check(el))\n    return ans\nprint(minimumSeconds([3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323]))",
    "execution_output": 0
  },
  {
    "id": 1046,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, el in enumerate(nums):\n        d[el].append(i)\n    ans = float('inf')\n\n    def check(el):\n        t = d[el][:]\n        g = [t[0] + len(nums) - 1 - t[-1]]\n        for a, b in zip(t, t[1:]):\n            g.append(b - a - 1)\n        p = max(g)\n        return (p + 1) // 2\n    for el in d:\n        ans = min(ans, check(el))\n    return ans\nprint(minimumSeconds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 50
  },
  {
    "id": 1047,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, el in enumerate(nums):\n        d[el].append(i)\n    ans = float('inf')\n\n    def check(el):\n        t = d[el][:]\n        g = [t[0] + len(nums) - 1 - t[-1]]\n        for a, b in zip(t, t[1:]):\n            g.append(b - a - 1)\n        p = max(g)\n        return (p + 1) // 2\n    for el in d:\n        ans = min(ans, check(el))\n    return ans\nprint(minimumSeconds([234772] + [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7] + [234772] + [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 1
  },
  {
    "id": 1048,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, el in enumerate(nums):\n        d[el].append(i)\n    ans = float('inf')\n\n    def check(el):\n        t = d[el][:]\n        g = [t[0] + len(nums) - 1 - t[-1]]\n        for a, b in zip(t, t[1:]):\n            g.append(b - a - 1)\n        p = max(g)\n        return (p + 1) // 2\n    for el in d:\n        ans = min(ans, check(el))\n    return ans\nprint(minimumSeconds([1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [234772] + [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [-234772] + [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [3254323] + [1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 1
  },
  {
    "id": 1049,
    "q_id": "sample_377",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    d = defaultdict(list)\n    for i, el in enumerate(nums):\n        d[el].append(i)\n    ans = float('inf')\n\n    def check(el):\n        t = d[el][:]\n        g = [t[0] + len(nums) - 1 - t[-1]]\n        for a, b in zip(t, t[1:]):\n            g.append(b - a - 1)\n        p = max(g)\n        return (p + 1) // 2\n    for el in d:\n        ans = min(ans, check(el))\n    return ans\nprint(minimumSeconds
    "execution_output": 1
  },
  {
    "id": 1050,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i + 1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint(minimumSeconds([]))",
    "execution_output": 0
  },
  {
    "id": 1051,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i + 1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint(minimumSeconds([42]))",
    "execution_output": 0
  },
  {
    "id": 1052,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i + 1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint(minimumSeconds([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 0
  },
  {
    "id": 1053,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i + 1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint(minimumSeconds([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": 50
  },
  {
    "id": 1054,
    "q_id": "sample_378",
    "code": "def minimumSeconds(A: List[int]) -> int:\n    locs = defaultdict(list)\n    for i, x in enumerate(A):\n        locs[x].append(i)\n    ans = N = len(A)\n    for row in locs.values():\n        gaps = [row[i + 1] - row[i] - 1 for i in range(len(row) - 1)]\n        gaps.append(row[0] + N - row[-1] - 1)\n        m = max(gaps)\n        m = (m + 1) // 2\n        ans = min(ans, m)\n    return ans\nprint(minimumSeconds([234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42, 234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42, 234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42, 234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42, 234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42, 234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42, 234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42, 234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42, 234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42, 234772, 3254323, -234772, -3254323, 0, 99999999, -99999999, 123456789, -123456789, 42]))",
    "execution_output": 5
  },
  {
    "id": 1055,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = (defaultdict(list), len(nums) // 2)\n    for i, n in enumerate(nums):\n        idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0] + (len(nums) - idx[-1])) // 2\n            for i in range(len(idx) - 1):\n                cur = max(cur, (idx[i + 1] - idx[i]) // 2)\n            res = min(res, cur)\n    return res\nprint(minimumSeconds([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))",
    "execution_output": 2
  },
  {
    "id": 1056,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = (defaultdict(list), len(nums) // 2)\n    for i, n in enumerate(nums):\n        idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0] + (len(nums) - idx[-1])) // 2\n            for i in range(len(idx) - 1):\n                cur = max(cur, (idx[i + 1] - idx[i]) // 2)\n            res = min(res, cur)\n    return res\nprint(minimumSeconds([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": 50
  },
  {
    "id": 1057,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = (defaultdict(list), len(nums) // 2)\n    for i, n in enumerate(nums):\n        idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0] + (len(nums) - idx[-1])) // 2\n            for i in range(len(idx) - 1):\n                cur = max(cur, (idx[i + 1] - idx[i]) // 2)\n            res = min(res, cur)\n    return res\nprint(minimumSeconds([234772, 3254323, -3254323, 234772, 999999999999999999999999, -999999999999999999999999, 3254323, 234772, -999999999999999999999999, 3254323]))",
    "execution_output": 2
  },
  {
    "id": 1058,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = (defaultdict(list), len(nums) // 2)\n    for i, n in enumerate(nums):\n        idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0] + (len(nums) - idx[-1])) // 2\n            for i in range(len(idx) - 1):\n                cur = max(cur, (idx[i + 1] - idx[i]) // 2)\n            res = min(res, cur)\n    return res\nprint(minimumSeconds([42]))",
    "execution_output": 0
  },
  {
    "id": 1059,
    "q_id": "sample_379",
    "code": "def minimumSeconds(nums: List[int]) -> int:\n    idxs, res = (defaultdict(list), len(nums) // 2)\n    for i, n in enumerate(nums):\n        idxs[n].append(i)\n    for n in idxs:\n        idx = idxs[n]\n        if len(idx) != 1:\n            cur = (idx[0] + (len(nums) - idx[-1])) // 2\n            for i in range(len(idx) - 1):\n                cur = max(cur, (idx[i + 1] - idx[i]) // 2)\n            res = min(res, cur)\n    return res\nprint(minimumSeconds([]))",
    "execution_output": 0
  },
  {
    "id": 1060,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = (len(str1), len(str2))\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint(canMakeSubsequence('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz' + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": true
  },
  {
    "id": 1061,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = (len(str1), len(str2))\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint(canMakeSubsequence('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": false
  },
  {
    "id": 1062,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = (len(str1), len(str2))\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint(canMakeSubsequence('', ''))",
    "execution_output": false
  },
  {
    "id": 1063,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = (len(str1), len(str2))\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint(canMakeSubsequence('                                                                                                    ', '                                                                                                    '))",
    "execution_output": true
  },
  {
    "id": 1064,
    "q_id": "sample_386",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    n1, n2 = (len(str1), len(str2))\n    j = 0\n    for i in range(n1):\n        if str2[j] == 'a' and str1[i] == 'z':\n            j += 1\n        elif chr(ord(str2[j]) - 1) == str1[i] or str2[j] == str1[i]:\n            j += 1\n        if j == n2:\n            return True\n    return False\nprint(canMakeSubsequence('😀😁😂😃😄😅😆😇😈😉', '😁😂😃😄😅'))",
    "execution_output": true
  },
  {
    "id": 1065,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n\n    def nxt(c):\n        if c == 'z':\n            return 'a'\n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint(canMakeSubsequence('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))",
    "execution_output": true
  },
  {
    "id": 1066,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n\n    def nxt(c):\n        if c == 'z':\n            return 'a'\n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint(canMakeSubsequence('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc'))",
    "execution_output": false
  },
  {
    "id": 1067,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n\n    def nxt(c):\n        if c == 'z':\n            return 'a'\n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint(canMakeSubsequence('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": true
  },
  {
    "id": 1068,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n\n    def nxt(c):\n        if c == 'z':\n            return 'a'\n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint(canMakeSubsequence('', 'a'))",
    "execution_output": false
  },
  {
    "id": 1069,
    "q_id": "sample_387",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    p1 = p2 = 0\n\n    def nxt(c):\n        if c == 'z':\n            return 'a'\n        else:\n            return chr(ord(c) + 1)\n    while p1 < len(str1) and p2 < len(str2):\n        if str2[p2] == str1[p1] or str2[p2] == nxt(str1[p1]):\n            p2 += 1\n        p1 += 1\n    return p2 == len(str2)\nprint(canMakeSubsequence('abc', ''))",
    "execution_output": true
  },
  {
    "id": 1070,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n\n    def cal(i):\n        if i == 'z':\n            return 'a'\n        return chr(ord(i) + 1)\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if str1[i] == str2[j] or cal(str1[i]) == str2[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return j >= n2\nprint(canMakeSubsequence('abc', ''))",
    "execution_output": true
  },
  {
    "id": 1071,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n\n    def cal(i):\n        if i == 'z':\n            return 'a'\n        return chr(ord(i) + 1)\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if str1[i] == str2[j] or cal(str1[i]) == str2[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return j >= n2\nprint(canMakeSubsequence('', 'a'))",
    "execution_output": false
  },
  {
    "id": 1072,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n\n    def cal(i):\n        if i == 'z':\n            return 'a'\n        return chr(ord(i) + 1)\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if str1[i] == str2[j] or cal(str1[i]) == str2[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return j >= n2\nprint(canMakeSubsequence('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": true
  },
  {
    "id": 1073,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n\n    def cal(i):\n        if i == 'z':\n            return 'a'\n        return chr(ord(i) + 1)\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if str1[i] == str2[j] or cal(str1[i]) == str2[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return j >= n2\nprint(canMakeSubsequence('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": false
  },
  {
    "id": 1074,
    "q_id": "sample_388",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n\n    def cal(i):\n        if i == 'z':\n            return 'a'\n        return chr(ord(i) + 1)\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if str1[i] == str2[j] or cal(str1[i]) == str2[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return j >= n2\nprint(canMakeSubsequence('😀😁😂😃😄😅😆', '😁😄'))",
    "execution_output": true
  },
  {
    "id": 1075,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint(canMakeSubsequence('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": true
  },
  {
    "id": 1076,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint(canMakeSubsequence('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))",
    "execution_output": true
  },
  {
    "id": 1077,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint(canMakeSubsequence('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc'))",
    "execution_output": false
  },
  {
    "id": 1078,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint(canMakeSubsequence('😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀' + 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', '😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀' + 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": true
  },
  {
    "id": 1079,
    "q_id": "sample_389",
    "code": "def canMakeSubsequence(str1: str, str2: str) -> bool:\n    l1 = len(str1)\n    l2 = len(str2)\n    idx = 0\n    for c in str1:\n        if c == str2[idx] or ord(c) + 1 == ord(str2[idx]) or (c == 'z' and str2[idx] == 'a'):\n            idx += 1\n            if idx == l2:\n                return True\n    return False\nprint(canMakeSubsequence('', 'a'))",
    "execution_output": false
  },
  {
    "id": 1080,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1 = list(s1)\n    s2 = list(s2)\n    while s1 and s2:\n        c1 = s1[-1]\n        c2 = s2[-1]\n        if c1 == c2 or (c1 == 'z' and c2 == 'a') or chr(ord(c1) + 1) == c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2) == 0\nprint(canMakeSubsequence('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'))",
    "execution_output": true
  },
  {
    "id": 1081,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1 = list(s1)\n    s2 = list(s2)\n    while s1 and s2:\n        c1 = s1[-1]\n        c2 = s2[-1]\n        if c1 == c2 or (c1 == 'z' and c2 == 'a') or chr(ord(c1) + 1) == c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2) == 0\nprint(canMakeSubsequence('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": true
  },
  {
    "id": 1082,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1 = list(s1)\n    s2 = list(s2)\n    while s1 and s2:\n        c1 = s1[-1]\n        c2 = s2[-1]\n        if c1 == c2 or (c1 == 'z' and c2 == 'a') or chr(ord(c1) + 1) == c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2) == 0\nprint(canMakeSubsequence('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc'))",
    "execution_output": false
  },
  {
    "id": 1083,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1 = list(s1)\n    s2 = list(s2)\n    while s1 and s2:\n        c1 = s1[-1]\n        c2 = s2[-1]\n        if c1 == c2 or (c1 == 'z' and c2 == 'a') or chr(ord(c1) + 1) == c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2) == 0\nprint(canMakeSubsequence('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', ''))",
    "execution_output": true
  },
  {
    "id": 1084,
    "q_id": "sample_390",
    "code": "def canMakeSubsequence(s1: str, s2: str) -> bool:\n    s1 = list(s1)\n    s2 = list(s2)\n    while s1 and s2:\n        c1 = s1[-1]\n        c2 = s2[-1]\n        if c1 == c2 or (c1 == 'z' and c2 == 'a') or chr(ord(c1) + 1) == c2:\n            s2.pop()\n            s1.pop()\n        else:\n            s1.pop()\n    return len(s2) == 0\nprint(canMakeSubsequence('🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂🙂', '🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃🙃'))",
    "execution_output": true
  },
  {
    "id": 1085,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n    return max_sum\nprint(maxSum([3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50, 3254323, 234772, -1000000, 999999, -50], 5, 20))",
    "execution_output": 13956176
  },
  {
    "id": 1086,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n    return max_sum\nprint(maxSum
    "execution_output": 0
  },
  {
    "id": 1087,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n    return max_sum\nprint(maxSum([-3254323, -234772, -99999999, -5, -7, -1000, -42], 1, 1))",
    "execution_output": 0
  },
  {
    "id": 1088,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n    return max_sum\nprint(maxSum([10, -5, 3, 2, 8, -1, 7, 6, 5, -2, 10, -5, 3, 2, 8, -1, 7, 6, 5, -2, 10, -5, 3, 2, 8, -1, 7, 6, 5, -2, 10, -5, 3, 2, 8, -1, 7, 6, 5, -2, 10, -5, 3, 2, 8, -1, 7, 6, 5, -2, 10, -5, 3, 2, 8, -1, 7, 6, 5, -2, 10, -5, 3, 2, 8, -1, 7, 6, 5, -2, 10, -5, 3, 2, 8, -1, 7, 6, 5, -2, 10, -5, 3, 2, 8, -1, 7, 6, 5, -2, 10, -5, 3, 2, 8, -1, 7, 6, 5, -2], 0, 25))",
    "execution_output": 92
  },
  {
    "id": 1089,
    "q_id": "sample_397",
    "code": "from typing import List\n\ndef maxSum(nums: List[int], m: int, k: int) -> int:\n    max_sum = 0\n    n = len(nums)\n    for i in range(n - k + 1):\n        subarray = nums[i:i + k]\n        if len(set(subarray)) >= m:\n            max_sum = max(max_sum, sum(subarray))\n    return max_sum\nprint(maxSum([10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10, 20, 30, 40, 50], 101, 100))",
    "execution_output": 0
  },
  {
    "id": 1090,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i - k]] -= 1\n        if not c[nums[i - k]]:\n            del c[nums[i - k]]\n        ssum += nums[i] - nums[i - k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint(maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 3254323, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 234772, 50], 20, 50))",
    "execution_output": 3490271
  },
  {
    "id": 1091,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i - k]] -= 1\n        if not c[nums[i - k]]:\n            del c[nums[i - k]]\n        ssum += nums[i] - nums[i - k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint(maxSum([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], 2, 10))",
    "execution_output": 0
  },
  {
    "id": 1092,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i - k]] -= 1\n        if not c[nums[i - k]]:\n            del c[nums[i - k]]\n        ssum += nums[i] - nums[i - k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint(maxSum([-999999999, 3254323, -234772, 0, 234772, 5, -1000000000, 999999999, 42, -1, 7], 1, 1))",
    "execution_output": 999999999
  },
  {
    "id": 1093,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i - k]] -= 1\n        if not c[nums[i - k]]:\n            del c[nums[i - k]]\n        ssum += nums[i] - nums[i - k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint(maxSum([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -10, 20, -20, 30, -30, 40, -40, 50, -50], 0, 7))",
    "execution_output": 50
  },
  {
    "id": 1094,
    "q_id": "sample_398",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    c = Counter()\n    ssum = 0\n    n = len(nums)\n    for i in range(k):\n        c[nums[i]] += 1\n        ssum += nums[i]\n    res = ssum if len(c) >= m else 0\n    for i in range(k, n):\n        c[nums[i]] += 1\n        c[nums[i - k]] -= 1\n        if not c[nums[i - k]]:\n            del c[nums[i - k]]\n        ssum += nums[i] - nums[i - k]\n        if len(c) >= m:\n            res = max(res, ssum)\n    return res\nprint(maxSum([1, 2, 3, 1, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9, 7, 8, 9, 10, 11, 12, 10, 11, 12, 13], 6, 5))",
    "execution_output": 0
  },
  {
    "id": 1095,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r, x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1:\n            c += 1\n        s += x\n        if r >= k:\n            y = nums[r - k]\n            cnt[y] -= 1\n            if cnt[y] == 0:\n                c -= 1\n            s -= y\n        if c >= m:\n            ans = max(ans, s)\n    return ans\nprint(maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9, 50))",
    "execution_output": 275
  },
  {
    "id": 1096,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r, x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1:\n            c += 1\n        s += x\n        if r >= k:\n            y = nums[r - k]\n            cnt[y] -= 1\n            if cnt[y] == 0:\n                c -= 1\n            s -= y\n        if c >= m:\n            ans = max(ans, s)\n    return ans\nprint(maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 15))",
    "execution_output": 55
  },
  {
    "id": 1097,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r, x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1:\n            c += 1\n        s += x\n        if r >= k:\n            y = nums[r - k]\n            cnt[y] -= 1\n            if cnt[y] == 0:\n                c -= 1\n            s -= y\n        if c >= m:\n            ans = max(ans, s)\n    return ans\nprint(maxSum([3, -1, 4, -1, 5, 9, -2, 6], 0, 3))",
    "execution_output": 13
  },
  {
    "id": 1098,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r, x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1:\n            c += 1\n        s += x\n        if r >= k:\n            y = nums[r - k]\n            cnt[y] -= 1\n            if cnt[y] == 0:\n                c -= 1\n            s -= y\n        if c >= m:\n            ans = max(ans, s)\n    return ans\nprint(maxSum([5, 1, 5, 1, 5, 1, 5, 1, 5, 1], 4, 3))",
    "execution_output": 0
  },
  {
    "id": 1099,
    "q_id": "sample_399",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cnt = defaultdict(int)\n    ans = 0\n    c = 0\n    s = 0\n    for r, x in enumerate(nums):\n        cnt[x] += 1\n        if cnt[x] == 1:\n            c += 1\n        s += x\n        if r >= k:\n            y = nums[r - k]\n            cnt[y] -= 1\n            if cnt[y] == 0:\n                c -= 1\n            s -= y\n        if c >= m:\n            ans = max(ans, s)\n    return ans\nprint(maxSum([3254323, -3254323, 234772, 999999999, -888888888, 777777777, -666666666, 555555555, 444444444, -333333333], 2, 4))",
    "execution_output": 1111111110
  },
  {
    "id": 1100,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint(maxSum(list(range(100)), 51, 50))",
    "execution_output": 0
  },
  {
    "id": 1101,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint(maxSum([-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10] + [3254323], 1, 1))",
    "execution_output": 3254323
  },
  {
    "id": 1102,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint(maxSum(list(range(100)), 100, 100))",
    "execution_output": 4950
  },
  {
    "id": 1103,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint(maxSum([-(i % 7 + 1) for i in range(100)], 5, 10))",
    "execution_output": -34
  },
  {
    "id": 1104,
    "q_id": "sample_400",
    "code": "def maxSum(A: List[int], m: int, k: int) -> int:\n    count = Counter(A[:k])\n    res = 0\n    total = sum(A[:k])\n    if len(count) >= m:\n        res = total\n    for j in range(k, len(A)):\n        total += A[j] - A[j - k]\n        count[A[j]] += 1\n        count[A[j - k]] -= 1\n        if count[A[j - k]] == 0:\n            del count[A[j - k]]\n        if len(count) >= m:\n            res = max(res, total)\n    return res\nprint(maxSum([234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323, 234772, -234772, 3254323, -3254323], 3, 21))",
    "execution_output": 3254323
  },
  {
    "id": 1105,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint(maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 30, 50))",
    "execution_output": 3775
  },
  {
    "id": 1106,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint(maxSum
    "execution_output": 0
  },
  {
    "id": 1107,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint(maxSum
    "execution_output": 0
  },
  {
    "id": 1108,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint(maxSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 100))",
    "execution_output": 550
  },
  {
    "id": 1109,
    "q_id": "sample_401",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    ans = 0\n    n = len(nums)\n    cur = 0\n    dic = Counter()\n    for i in range(k):\n        cur += nums[i]\n        dic[nums[i]] += 1\n    if len(dic) >= m:\n        ans = cur\n    for i in range(k, n):\n        cur += nums[i]\n        cur -= nums[i - k]\n        dic[nums[i]] += 1\n        dic[nums[i - k]] -= 1\n        if dic[nums[i - k]] == 0:\n            del dic[nums[i - k]]\n        if len(dic) >= m:\n            ans = max(ans, cur)\n    return ans\nprint(maxSum([3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323, 3254323, -234772, 0, 234772, -3254323], 1, 1))",
    "execution_output": 3254323
  },
  {
    "id": 1110,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    return maxres\nprint(maxSum([], 0, 0))",
    "execution_output": 0
  },
  {
    "id": 1111,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    return maxres\nprint(maxSum([-3254323, 0, 234772, -1, 99999999, -99999999, 5, 7, -234772, 3254323], 0, 1))",
    "execution_output": 99999999
  },
  {
    "id": 1112,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    return maxres\nprint(maxSum([7, 7, 7, 8, 8, 7, 8, 7], 3, 5))",
    "execution_output": 0
  },
  {
    "id": 1113,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    return maxres\nprint(maxSum([234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200, 234772, 1, 3254323, 2, -100, -234772, 3, -3254323, 4, 200], 6, 50))",
    "execution_output": 550
  },
  {
    "id": 1114,
    "q_id": "sample_402",
    "code": "def maxSum(nums: List[int], m: int, k: int) -> int:\n    cntr = Counter(nums[:k])\n    cursum = sum(nums[:k])\n    maxres = 0\n    if len(cntr) >= m:\n        maxres += cursum\n    for out, inp in zip(nums, nums[k:]):\n        cursum -= out\n        cursum += inp\n        cntr[out] -= 1\n        if cntr[out] == 0:\n            del cntr[out]\n        cntr[inp] += 1\n        if len(cntr) >= m:\n            maxres = max(maxres, cursum)\n    return maxres\nprint(maxSum([1, 1, 2, 3, 4, 5, 5], 5, 7))",
    "execution_output": 21
  },
  {
    "id": 1115,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k, v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint(minLengthAfterRemovals([]))",
    "execution_output": 0
  },
  {
    "id": 1116,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k, v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint(minLengthAfterRemovals([3254323]))",
    "execution_output": 1
  },
  {
    "id": 1117,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k, v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint(minLengthAfterRemovals
    "execution_output": 100
  },
  {
    "id": 1118,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k, v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint(minLengthAfterRemovals([-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]))",
    "execution_output": 0
  },
  {
    "id": 1119,
    "q_id": "sample_409",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    n = len(nums)\n    for k, v in c.items():\n        if v >= n - v:\n            return v - (n - v)\n    return n % 2\nprint(minLengthAfterRemovals([3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772]))",
    "execution_output": 2
  },
  {
    "id": 1120,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint(minLengthAfterRemovals([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]))",
    "execution_output": 100
  },
  {
    "id": 1121,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint(minLengthAfterRemovals([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [-3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323, -3254323]))",
    "execution_output": 0
  },
  {
    "id": 1122,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint(minLengthAfterRemovals([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1] + [999999999999999999999999999999999999999999999999]))",
    "execution_output": 1
  },
  {
    "id": 1123,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint(minLengthAfterRemovals(['aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'] + ['bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb']))",
    "execution_output": 20
  },
  {
    "id": 1124,
    "q_id": "sample_410",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    mx = max(c.values())\n    n = len(nums)\n    if mx > n - mx:\n        return 2 * mx - n\n    else:\n        return n & 1\nprint(minLengthAfterRemovals(list(range(100))))",
    "execution_output": 0
  },
  {
    "id": 1125,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1\n        y -= 1\n        if x:\n            heappush(h, -x)\n        if y:\n            heappush(h, -y)\n    return -sum(h)\nprint(minLengthAfterRemovals([]))",
    "execution_output": 0
  },
  {
    "id": 1126,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1\n        y -= 1\n        if x:\n            heappush(h, -x)\n        if y:\n            heappush(h, -y)\n    return -sum(h)\nprint(minLengthAfterRemovals([3254323]))",
    "execution_output": 1
  },
  {
    "id": 1127,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1\n        y -= 1\n        if x:\n            heappush(h, -x)\n        if y:\n            heappush(h, -y)\n    return -sum(h)\nprint(minLengthAfterRemovals
    "execution_output": 100
  },
  {
    "id": 1128,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1\n        y -= 1\n        if x:\n            heappush(h, -x)\n        if y:\n            heappush(h, -y)\n    return -sum(h)\nprint(minLengthAfterRemovals([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]))",
    "execution_output": 0
  },
  {
    "id": 1129,
    "q_id": "sample_411",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    n = len(nums)\n    h = [-v for v in Counter(nums).values()]\n    heapify(h)\n    while len(h) >= 2:\n        x = -heappop(h)\n        y = -heappop(h)\n        x -= 1\n        y -= 1\n        if x:\n            heappush(h, -x)\n        if y:\n            heappush(h, -y)\n    return -sum(h)\nprint(minLengthAfterRemovals([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [-999999999999, -999999999999, -999999999999, -999999999999, -999999999999, -999999999999, -999999999999, -999999999999, -999999999999, -999999999999]))",
    "execution_output": 20
  },
  {
    "id": 1130,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = (n // 2 - 1, n - 1)\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint(minLengthAfterRemovals([]))",
    "execution_output": 0
  },
  {
    "id": 1131,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = (n // 2 - 1, n - 1)\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint(minLengthAfterRemovals([5]))",
    "execution_output": 1
  },
  {
    "id": 1132,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = (n // 2 - 1, n - 1)\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint(minLengthAfterRemovals([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 100
  },
  {
    "id": 1133,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = (n // 2 - 1, n - 1)\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint(minLengthAfterRemovals
    "execution_output": 20
  },
  {
    "id": 1134,
    "q_id": "sample_412",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    ans = n = len(nums)\n    i, j = (n // 2 - 1, n - 1)\n    while i >= 0:\n        while i >= 0 and nums[i] == nums[j]:\n            i -= 1\n        if i >= 0:\n            ans -= 2\n            j -= 1\n            i -= 1\n    return ans\nprint(minLengthAfterRemovals([-50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]))",
    "execution_output": 0
  },
  {
    "id": 1135,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint(minLengthAfterRemovals
    "execution_output": 100
  },
  {
    "id": 1136,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint(minLengthAfterRemovals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 234772, 3254323, 999999937]))",
    "execution_output": 0
  },
  {
    "id": 1137,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint(minLengthAfterRemovals([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]))",
    "execution_output": 1
  },
  {
    "id": 1138,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint(minLengthAfterRemovals
    "execution_output": 2
  },
  {
    "id": 1139,
    "q_id": "sample_413",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    c = Counter(nums)\n    x = max(c.values())\n    if x > len(nums) // 2:\n        return 2 * x - len(nums)\n    else:\n        return len(nums) % 2\nprint(minLengthAfterRemovals([3254323]))",
    "execution_output": 1
  },
  {
    "id": 1140,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint(minLengthAfterRemovals([3254323]))",
    "execution_output": 1
  },
  {
    "id": 1141,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint(minLengthAfterRemovals
    "execution_output": 100
  },
  {
    "id": 1142,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint(minLengthAfterRemovals
    "execution_output": 0
  },
  {
    "id": 1143,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint(minLengthAfterRemovals([3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [-234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772, -234772]))",
    "execution_output": 2
  },
  {
    "id": 1144,
    "q_id": "sample_414",
    "code": "def minLengthAfterRemovals(nums: List[int]) -> int:\n    C = Counter(nums)\n    m = max(C.values())\n    if 2 * m >= len(nums):\n        return 2 * m - len(nums)\n    else:\n        return len(nums) & 1\nprint(minLengthAfterRemovals(list(range(1, 100))))",
    "execution_output": 1
  },
  {
    "id": 1145,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[x, y] += 1\n    res = 0\n    for i in range(k + 1):\n        a, b = (i, k - i)\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[x, y] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[a ^ x, b ^ y]\n    return res\nprint(countPairs([], 234772))",
    "execution_output": 0
  },
  {
    "id": 1146,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[x, y] += 1\n    res = 0\n    for i in range(k + 1):\n        a, b = (i, k - i)\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[x, y] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[a ^ x, b ^ y]\n    return res\nprint(countPairs
    "execution_output": 4950
  },
  {
    "id": 1147,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[x, y] += 1\n    res = 0\n    for i in range(k + 1):\n        a, b = (i, k - i)\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[x, y] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[a ^ x, b ^ y]\n    return res\nprint(countPairs([[1000, 2000], [1001, 2001], [1002, 2002], [1003, 2003], [1004, 2004], [1005, 2005], [1006, 2006], [1007, 2007], [1008, 2008], [1009, 2009], [1010, 2010], [1011, 2011], [1012, 2012], [1013, 2013], [1014, 2014], [1015, 2015], [1016, 2016], [1017, 2017], [1018, 2018], [1019, 2019], [1020, 2020], [1021, 2021], [1022, 2022], [1023, 2023], [1024, 2024], [1025, 2025], [1026, 2026], [1027, 2027], [1028, 2028], [1029, 2029], [1030, 2030], [1031, 2031], [1032, 2032], [1033, 2033], [1034, 2034], [1035, 2035], [1036, 2036], [1037, 2037], [1038, 2038], [1039, 2039], [1040, 2040], [1041, 2041], [1042, 2042], [1043, 2043], [1044, 2044], [1045, 2045], [1046, 2046], [1047, 2047], [1048, 2048], [1049, 2049], [1000, 2001], [1001, 2000], [1002, 2003], [1003, 2002], [1004, 2005], [1005, 2004], [1006, 2007], [1007, 2006], [1008, 2009], [1009, 2008], [1010, 2011], [1011, 2010], [1012, 2013], [1013, 2012], [1014, 2015], [1015, 2014], [1016, 2017], [1017, 2016], [1018, 2019], [1019, 2018], [1020, 2021], [1021, 2020], [1022, 2023], [1023, 2022], [1024, 2025], [1025, 2024], [1026, 2027], [1027, 2026], [1028, 2029], [1029, 2028], [1030, 2031], [1031, 2030], [1032, 2033], [1033, 2032], [1034, 2035], [1035, 2034], [1036, 2037], [1037, 2036], [1038, 2039], [1039, 2038], [1040, 2041], [1041, 2040], [1042, 2043], [1043, 2042], [1044, 2045], [1045, 2044], [1046, 2047], [1047, 2046], [1048, 2049], [1049, 2048]], 1))",
    "execution_output": 100
  },
  {
    "id": 1148,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[x, y] += 1\n    res = 0\n    for i in range(k + 1):\n        a, b = (i, k - i)\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[x, y] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[a ^ x, b ^ y]\n    return res\nprint(countPairs([[234772, 3254323], [234773, 3254322], [999999999, 888888888], [1234567890, 987654321], [4294967295, 0], [0, 4294967295], [2147483647, 2147483648], [3254323, 234772], [987654321, 1234567890], [1111111111, 2222222222]], 3254323))",
    "execution_output": 0
  },
  {
    "id": 1149,
    "q_id": "sample_415",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    mp = defaultdict(int)\n    for x, y in coordinates:\n        mp[x, y] += 1\n    res = 0\n    for i in range(k + 1):\n        a, b = (i, k - i)\n        tmp = mp.copy()\n        for x, y in coordinates:\n            tmp[x, y] -= 1\n            if (a ^ x, b ^ y) in tmp:\n                res += tmp[a ^ x, b ^ y]\n    return res\nprint(countPairs([[-1, -1], [-2, -3], [4, -8], [-4, 8], [0, 0], [-10, 10], [10, -10]], -5))",
    "execution_output": 0
  },
  {
    "id": 1150,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[i, j] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[i, j] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = k - r ^ j\n            ans += c[x, y]\n    return ans\nprint(countPairs([], 0))",
    "execution_output": 0
  },
  {
    "id": 1151,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[i, j] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[i, j] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = k - r ^ j\n            ans += c[x, y]\n    return ans\nprint(countPairs([[123, 456]], 234772))",
    "execution_output": 0
  },
  {
    "id": 1152,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[i, j] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[i, j] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = k - r ^ j\n            ans += c[x, y]\n    return ans\nprint(countPairs([[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19], [0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11], [12, 13], [14, 15], [16, 17], [18, 19]], 13))",
    "execution_output": 0
  },
  {
    "id": 1153,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[i, j] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[i, j] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = k - r ^ j\n            ans += c[x, y]\n    return ans\nprint(countPairs([[234772, 3254323], [3254323, 234772], [999999937, 1000000007], [2147483647, -2147483648], [-3254323, -234772], [1234567890123, 987654321098]], 3254323))",
    "execution_output": 0
  },
  {
    "id": 1154,
    "q_id": "sample_416",
    "code": "def countPairs(coordinates: List[List[int]], k: int) -> int:\n    c = defaultdict(int)\n    for i, j in coordinates:\n        c[i, j] += 1\n    ans = 0\n    for i, j in coordinates:\n        c[i, j] -= 1\n        for r in range(k + 1):\n            x = r ^ i\n            y = k - r ^ j\n            ans += c[x, y]\n    return ans\nprint(countPairs([[5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5], [5, 5]], 9))",
    "execution_output": 0
  },
  {
    "id": 1155,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations([]))",
    "execution_output": 0
  },
  {
    "id": 1156,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations([5]))",
    "execution_output": -1
  },
  {
    "id": 1157,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations([42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]))",
    "execution_output": 34
  },
  {
    "id": 1158,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations([234772, 234772] + [3254323, 3254323, 3254323] + [-987654321098765432, -987654321098765432, -987654321098765432, -987654321098765432] + [0, 0, 0, 0, 0]))",
    "execution_output": 6
  },
  {
    "id": 1159,
    "q_id": "sample_423",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for v in cnt.values():\n        if v == 1:\n            return -1\n        if v % 3 == 0:\n            ans += v // 3\n        elif v % 3 == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": -1
  },
  {
    "id": 1160,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k, v in cs.items():\n        if v == 1:\n            return -1\n        ans += (v + 2) // 3\n    return ans\nprint(minOperations([]))",
    "execution_output": 0
  },
  {
    "id": 1161,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k, v in cs.items():\n        if v == 1:\n            return -1\n        ans += (v + 2) // 3\n    return ans\nprint(minOperations([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": -1
  },
  {
    "id": 1162,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k, v in cs.items():\n        if v == 1:\n            return -1\n        ans += (v + 2) // 3\n    return ans\nprint(minOperations([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49]))",
    "execution_output": 50
  },
  {
    "id": 1163,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k, v in cs.items():\n        if v == 1:\n            return -1\n        ans += (v + 2) // 3\n    return ans\nprint(minOperations([234772, 234772, 234772, 234772, 234772, 3254323, 3254323, -999999999999999999999999, -999999999999999999999999, -999999999999999999999999]))",
    "execution_output": 4
  },
  {
    "id": 1164,
    "q_id": "sample_424",
    "code": "def minOperations(nums: List[int]) -> int:\n    cs = collections.Counter(nums)\n    ans = 0\n    for k, v in cs.items():\n        if v == 1:\n            return -1\n        ans += (v + 2) // 3\n    return ans\nprint(minOperations([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 34
  },
  {
    "id": 1165,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint(minOperations([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))",
    "execution_output": 34
  },
  {
    "id": 1166,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint(minOperations([234772] + [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] + [999, 999, 999]))",
    "execution_output": -1
  },
  {
    "id": 1167,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint(minOperations([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [-10 ** 9] * 20 + [234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))",
    "execution_output": 35
  },
  {
    "id": 1168,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint(minOperations([]))",
    "execution_output": 0
  },
  {
    "id": 1169,
    "q_id": "sample_425",
    "code": "def minOperations(nums: List[int]) -> int:\n    ans = 0\n    cnt = Counter(nums)\n    for a, b in cnt.items():\n        if b == 1:\n            return -1\n        if b % 3 == 0:\n            ans += b // 3\n        if b % 3 == 1:\n            ans += (b - 4) // 3 + 2\n        if b % 3 == 2:\n            ans += (b - 2) // 3 + 1\n    return ans\nprint(minOperations(list(range(100))))",
    "execution_output": -1
  },
  {
    "id": 1170,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n    c = {}\n    for x in nums:\n        c[x] = c.get(x, 0) + 1\n    ret = 0\n    for x in c.values():\n        if x < 2:\n            return -1\n        if x % 3 == 0:\n            ret += x // 3\n        elif x % 3 == 1:\n            ret += 2 + (x - 4) // 3\n        else:\n            ret += 1 + (x - 2) // 3\n    return ret\nprint(minOperations([]))",
    "execution_output": 0
  },
  {
    "id": 1171,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n    c = {}\n    for x in nums:\n        c[x] = c.get(x, 0) + 1\n    ret = 0\n    for x in c.values():\n        if x < 2:\n            return -1\n        if x % 3 == 0:\n            ret += x // 3\n        elif x % 3 == 1:\n            ret += 2 + (x - 4) // 3\n        else:\n            ret += 1 + (x - 2) // 3\n    return ret\nprint(minOperations([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]))",
    "execution_output": -1
  },
  {
    "id": 1172,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n    c = {}\n    for x in nums:\n        c[x] = c.get(x, 0) + 1\n    ret = 0\n    for x in c.values():\n        if x < 2:\n            return -1\n        if x % 3 == 0:\n            ret += x // 3\n        elif x % 3 == 1:\n            ret += 2 + (x - 4) // 3\n        else:\n            ret += 1 + (x - 2) // 3\n    return ret\nprint(minOperations([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50]))",
    "execution_output": 50
  },
  {
    "id": 1173,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n    c = {}\n    for x in nums:\n        c[x] = c.get(x, 0) + 1\n    ret = 0\n    for x in c.values():\n        if x < 2:\n            return -1\n        if x % 3 == 0:\n            ret += x // 3\n        elif x % 3 == 1:\n            ret += 2 + (x - 4) // 3\n        else:\n            ret += 1 + (x - 2) // 3\n    return ret\nprint(minOperations([999999999999999999, 999999999999999999, -999999999999999999, -999999999999999999, -999999999999999999, 3254323, 3254323, -3254323, -3254323, 234772, 234772, 234772, 0, 0]))",
    "execution_output": 6
  },
  {
    "id": 1174,
    "q_id": "sample_426",
    "code": "def minOperations(nums: List[int]) -> int:\n    c = {}\n    for x in nums:\n        c[x] = c.get(x, 0) + 1\n    ret = 0\n    for x in c.values():\n        if x < 2:\n            return -1\n        if x % 3 == 0:\n            ret += x // 3\n        elif x % 3 == 1:\n            ret += 2 + (x - 4) // 3\n        else:\n            ret += 1 + (x - 2) // 3\n    return ret\nprint(minOperations([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]))",
    "execution_output": 34
  },
  {
    "id": 1175,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint(minOperations([42]))",
    "execution_output": -1
  },
  {
    "id": 1176,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint(minOperations
    "execution_output": 34
  },
  {
    "id": 1177,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint(minOperations([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772] + [3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323] + [7]))",
    "execution_output": -1
  },
  {
    "id": 1178,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint(minOperations([-1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000, -1000000000000] + [-999999999999999999, -999999999999999999] + [0, 0, 0] + [234772, 234772, 234772, 234772, 234772]))",
    "execution_output": 7
  },
  {
    "id": 1179,
    "q_id": "sample_427",
    "code": "def minOperations(nums: List[int]) -> int:\n    m = {}\n    for i in nums:\n        if i not in m:\n            m[i] = 0\n        m[i] += 1\n    ans = 0\n    for i in m:\n        if m[i] == 1:\n            return -1\n        while m[i] % 3 != 0:\n            m[i] -= 2\n            ans += 1\n        ans += m[i] // 3\n    return ans\nprint(minOperations([]))",
    "execution_output": 0
  },
  {
    "id": 1180,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations([]))",
    "execution_output": 0
  },
  {
    "id": 1181,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations([234772, 234772, 3254323, 3254323, 3254323, 999999999]))",
    "execution_output": -1
  },
  {
    "id": 1182,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations([234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 234772, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000, -100000, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42]))",
    "execution_output": 35
  },
  {
    "id": 1183,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations
    "execution_output": 34
  },
  {
    "id": 1184,
    "q_id": "sample_428",
    "code": "from collections import Counter\n\ndef minOperations(nums: List[int]) -> int:\n    ans = 0\n    for k, v in Counter(nums).items():\n        if v == 1:\n            return -1\n        r = v % 3\n        if r == 0:\n            ans += v // 3\n        elif r == 1:\n            ans += v // 3 + 1\n        else:\n            ans += v // 3 + 1\n    return ans\nprint(minOperations([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50]))",
    "execution_output": 50
  },
  {
    "id": 1185,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint(maxSubarrays([170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85, 170, 85]))",
    "execution_output": 50
  },
  {
    "id": 1186,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint(maxSubarrays([1048577, 1048578, 1048579, 1048580, 1048581, 1048582, 1048583, 1048584, 1048585, 1048586, 1048587, 1048588, 1048589, 1048590, 1048591, 1048592, 1048593, 1048594, 1048595, 1048596, 1048597, 1048598, 1048599, 1048600, 1048601, 1048602, 1048603, 1048604, 1048605, 1048606, 1048607, 1048608, 1048609, 1048610, 1048611, 1048612, 1048613, 1048614, 1048615, 1048616, 1048617, 1048618, 1048619, 1048620, 1048621, 1048622, 1048623, 1048624, 1048625, 1048626, 1048627, 1048628, 1048629, 1048630, 1048631, 1048632, 1048633, 1048634, 1048635, 1048636, 1048637, 1048638, 1048639, 1048640, 1048641, 1048642, 1048643, 1048644, 1048645, 1048646, 1048647, 1048648, 1048649, 1048650, 1048651, 1048652, 1048653, 1048654, 1048655, 1048656, 1048657, 1048658, 1048659, 1048660, 1048661, 1048662, 1048663, 1048664, 1048665, 1048666, 1048667, 1048668, 1048669, 1048670, 1048671, 1048672, 1048673, 1048674, 1048675, 1048676]))",
    "execution_output": 1
  },
  {
    "id": 1187,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint(maxSubarrays([234772, 3254323, 123456789, 987654321, 4294967295, 4294967294, 9223372036854775807, 18446744073709551615]))",
    "execution_output": 1
  },
  {
    "id": 1188,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint(maxSubarrays([-2, 1, -4, 3, -8, 7, -16, 15]))",
    "execution_output": 4
  },
  {
    "id": 1189,
    "q_id": "sample_429",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    r = nums[0]\n    for n in nums:\n        r &= n\n    if r > 0:\n        return 1\n    r = 0\n    c = nums[0]\n    for i in range(len(nums)):\n        c &= nums[i]\n        if c == 0:\n            r += 1\n            if i == len(nums) - 1:\n                break\n            c = nums[i + 1]\n    return r\nprint(maxSubarrays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 100
  },
  {
    "id": 1190,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = (0, nums[0])\n    for n in nums[1:]:\n        target &= n\n    if target != 0:\n        return 1\n    cur = -1\n    for n in nums:\n        if cur == -1:\n            cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint(maxSubarrays([234772, 1, 3254323, 4, 1 << 20, 1 << 21, 1 << 15, 1 << 14, 1 << 10, 1 << 9, 1 << 30, 1 << 31, 1 << 40, 1 << 41, 1 << 50, 1 << 49, 1 << 60, 1 << 59, 1 << 25, 1 << 26, 1 << 33, 1 << 34, 1 << 17, 1 << 18, 1 << 27, 1 << 28, 1 << 35, 1 << 36, 1 << 45, 1 << 46, 1 << 55, 1 << 56, 1 << 63, 1 << 62, 1 << 22, 1 << 23, 1 << 19, 1 << 24, 1 << 29, 1 << 32, 1 << 37, 1 << 38, 1 << 39, 1 << 42, 1 << 43, 1 << 44, 1 << 47, 1 << 48, 1 << 51, 1 << 52, 1 << 53, 1 << 54, 1 << 57, 1 << 58, 1 << 61, 1 << 64, 2, 4, 8, 16, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 1 << 65, 1 << 66, 1 << 67, 1 << 68, 1 << 69, 1 << 70, 1 << 71, 1 << 72, 1 << 73, 1 << 74, 1 << 75, 1 << 76, 1 << 77, 1 << 78, 1 << 79, 1 << 80]))",
    "execution_output": 50
  },
  {
    "id": 1191,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = (0, nums[0])\n    for n in nums[1:]:\n        target &= n\n    if target != 0:\n        return 1\n    cur = -1\n    for n in nums:\n        if cur == -1:\n            cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint(maxSubarrays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 100
  },
  {
    "id": 1192,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = (0, nums[0])\n    for n in nums[1:]:\n        target &= n\n    if target != 0:\n        return 1\n    cur = -1\n    for n in nums:\n        if cur == -1:\n            cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint(maxSubarrays
    "execution_output": 1
  },
  {
    "id": 1193,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = (0, nums[0])\n    for n in nums[1:]:\n        target &= n\n    if target != 0:\n        return 1\n    cur = -1\n    for n in nums:\n        if cur == -1:\n            cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint(maxSubarrays([-1, 1 << 40, -2, 1 << 50] * 25))",
    "execution_output": 25
  },
  {
    "id": 1194,
    "q_id": "sample_430",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res, target = (0, nums[0])\n    for n in nums[1:]:\n        target &= n\n    if target != 0:\n        return 1\n    cur = -1\n    for n in nums:\n        if cur == -1:\n            cur = n\n        cur &= n\n        if cur == target:\n            cur = -1\n            res += 1\n    return res\nprint(maxSubarrays([10 ** 100]))",
    "execution_output": 1
  },
  {
    "id": 1195,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint(maxSubarrays([0]))",
    "execution_output": 1
  },
  {
    "id": 1196,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint(maxSubarrays
    "execution_output": 50
  },
  {
    "id": 1197,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint(maxSubarrays
    "execution_output": 51
  },
  {
    "id": 1198,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint(maxSubarrays
    "execution_output": 1
  },
  {
    "id": 1199,
    "q_id": "sample_431",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res &= nums[i]\n    if res:\n        return 1\n    ans = 0\n    cur = nums[0]\n    for i in range(len(nums)):\n        cur &= nums[i]\n        if cur == 0:\n            ans += 1\n            if i + 1 < len(nums):\n                cur = nums[i + 1]\n    return ans\nprint(maxSubarrays([-1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975, -1152921504606846976, 1152921504606846975]))",
    "execution_output": 48
  },
  {
    "id": 1200,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint(maxSubarrays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 100
  },
  {
    "id": 1201,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint(maxSubarrays([2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765, 2863311530, 1431655765]))",
    "execution_output": 50
  },
  {
    "id": 1202,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint(maxSubarrays([-1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2, -1, -2]))",
    "execution_output": 1
  },
  {
    "id": 1203,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint(maxSubarrays([234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972, 234772, 4294732523, 3254323, 4291712972]))",
    "execution_output": 50
  },
  {
    "id": 1204,
    "q_id": "sample_432",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    m = reduce(int.__and__, nums)\n    res = 0\n    running = -1\n    for num in nums:\n        running &= num\n        if running == 0:\n            running = -1\n            res += 1\n    return res + (1 if running == m else 0)\nprint(maxSubarrays([10 ** 50]))",
    "execution_output": 1
  },
  {
    "id": 1205,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    if mn:\n        return 1\n    res, cur = (0, nums[0])\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    if cur == mn:\n        res += 1\n    return res\nprint(maxSubarrays([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]))",
    "execution_output": 50
  },
  {
    "id": 1206,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    if mn:\n        return 1\n    res, cur = (0, nums[0])\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    if cur == mn:\n        res += 1\n    return res\nprint(maxSubarrays([234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323, 234772, 3254323]))",
    "execution_output": 1
  },
  {
    "id": 1207,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    if mn:\n        return 1\n    res, cur = (0, nums[0])\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    if cur == mn:\n        res += 1\n    return res\nprint(maxSubarrays([0]))",
    "execution_output": 1
  },
  {
    "id": 1208,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    if mn:\n        return 1\n    res, cur = (0, nums[0])\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    if cur == mn:\n        res += 1\n    return res\nprint(maxSubarrays([-1, -2, 1, 2, 4, 8]))",
    "execution_output": 2
  },
  {
    "id": 1209,
    "q_id": "sample_433",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mn = nums[0]\n    for num in nums:\n        mn &= num\n    if mn:\n        return 1\n    res, cur = (0, nums[0])\n    for i in range(1, n):\n        if cur == mn:\n            res += 1\n            cur = nums[i]\n        cur &= nums[i]\n    if cur == mn:\n        res += 1\n    return res\nprint(maxSubarrays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 10
  },
  {
    "id": 1210,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint(maxSubarrays([]))",
    "execution_output": 1
  },
  {
    "id": 1211,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint(maxSubarrays([10 ** 100]))",
    "execution_output": 1
  },
  {
    "id": 1212,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint(maxSubarrays([-(1 << 1000)]))",
    "execution_output": 1
  },
  {
    "id": 1213,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint(maxSubarrays([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 100
  },
  {
    "id": 1214,
    "q_id": "sample_434",
    "code": "def maxSubarrays(nums: List[int]) -> int:\n    n = len(nums)\n    mask = (1 << 20) - 1\n    a = mask\n    for i in range(n):\n        a &= nums[i]\n    if a != 0:\n        return 1\n    c = mask\n    ans = 0\n    for i in range(n):\n        c &= nums[i]\n        if c == 0:\n            ans += 1\n            c = mask\n    return ans\nprint(maxSubarrays([5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557, 5941930, 7689557]))",
    "execution_output": 50
  },
  {
    "id": 1215,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r + 1)\n    record[0] = 1\n    count = collections.Counter(nums)\n    for i in count:\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1, count[i] + 1):\n                tmp[i * k:] += record[:-i * k]\n        else:\n            tmp *= count[i] + 1\n        record = tmp\n        record %= int(1000000000.0 + 7)\n    return int(numpy.sum(record[l:r + 1]) % int(1000000000.0 + 7))\nprint(countSubMultisets([], 0, 0))",
    "execution_output": 1
  },
  {
    "id": 1216,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r + 1)\n    record[0] = 1\n    count = collections.Counter(nums)\n    for i in count:\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1, count[i] + 1):\n                tmp[i * k:] += record[:-i * k]\n        else:\n            tmp *= count[i] + 1\n        record = tmp\n        record %= int(1000000000.0 + 7)\n    return int(numpy.sum(record[l:r + 1]) % int(1000000000.0 + 7))\nprint(countSubMultisets([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 0))",
    "execution_output": 101
  },
  {
    "id": 1217,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r + 1)\n    record[0] = 1\n    count = collections.Counter(nums)\n    for i in count:\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1, count[i] + 1):\n                tmp[i * k:] += record[:-i * k]\n        else:\n            tmp *= count[i] + 1\n        record = tmp\n        record %= int(1000000000.0 + 7)\n    return int(numpy.sum(record[l:r + 1]) % int(1000000000.0 + 7))\nprint(countSubMultisets(list(range(1, 101)), 250, 300))",
    "execution_output": 893939434
  },
  {
    "id": 1218,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r + 1)\n    record[0] = 1\n    count = collections.Counter(nums)\n    for i in count:\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1, count[i] + 1):\n                tmp[i * k:] += record[:-i * k]\n        else:\n            tmp *= count[i] + 1\n        record = tmp\n        record %= int(1000000000.0 + 7)\n    return int(numpy.sum(record[l:r + 1]) % int(1000000000.0 + 7))\nprint(countSubMultisets([234772, 3254323, 1, 2, 3, 50], 50, 52))",
    "execution_output": 3
  },
  {
    "id": 1219,
    "q_id": "sample_441",
    "code": "import numpy\n\ndef countSubMultisets(nums: List[int], l: int, r: int) -> int:\n    record = numpy.zeros(r + 1)\n    record[0] = 1\n    count = collections.Counter(nums)\n    for i in count:\n        tmp = numpy.copy(record)\n        if i != 0:\n            for k in range(1, count[i] + 1):\n                tmp[i * k:] += record[:-i * k]\n        else:\n            tmp *= count[i] + 1\n        record = tmp\n        record %= int(1000000000.0 + 7)\n    return int(numpy.sum(record[l:r + 1]) % int(1000000000.0 + 7))\nprint(countSubMultisets([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 100, 100))",
    "execution_output": 1
  },
  {
    "id": 1220,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i + 1]:\n            ans += 1\n        i += 2\n    return ans\nprint(minChanges(''))",
    "execution_output": 0
  },
  {
    "id": 1221,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i + 1]:\n            ans += 1\n        i += 2\n    return ans\nprint(minChanges('abababababababababababababababababababababababababababababababababababababababababababababababababab'))",
    "execution_output": 50
  },
  {
    "id": 1222,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i + 1]:\n            ans += 1\n        i += 2\n    return ans\nprint(minChanges('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 0
  },
  {
    "id": 1223,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i + 1]:\n            ans += 1\n        i += 2\n    return ans\nprint(minChanges('                                                                                                    '))",
    "execution_output": 0
  },
  {
    "id": 1224,
    "q_id": "sample_448",
    "code": "def minChanges(s: str) -> int:\n    ans = i = 0\n    while i < len(s):\n        if s[i] != s[i + 1]:\n            ans += 1\n        i += 2\n    return ans\nprint(minChanges('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'))",
    "execution_output": 50
  },
  {
    "id": 1225,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            ans += 1\n    return ans\nprint(minChanges(''))",
    "execution_output": 0
  },
  {
    "id": 1226,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            ans += 1\n    return ans\nprint(minChanges('zz'))",
    "execution_output": 0
  },
  {
    "id": 1227,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            ans += 1\n    return ans\nprint(minChanges('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'))",
    "execution_output": 50
  },
  {
    "id": 1228,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            ans += 1\n    return ans\nprint(minChanges('0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101'))",
    "execution_output": 50
  },
  {
    "id": 1229,
    "q_id": "sample_449",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            ans += 1\n    return ans\nprint(minChanges('🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃'))",
    "execution_output": 10
  },
  {
    "id": 1230,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c = 1\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            c += 1\n        elif c % 2 == 1:\n            ans += 1\n            c += 1\n        else:\n            c = 1\n    return ans\nprint(minChanges(''))",
    "execution_output": 0
  },
  {
    "id": 1231,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c = 1\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            c += 1\n        elif c % 2 == 1:\n            ans += 1\n            c += 1\n        else:\n            c = 1\n    return ans\nprint(minChanges('a'))",
    "execution_output": 0
  },
  {
    "id": 1232,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c = 1\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            c += 1\n        elif c % 2 == 1:\n            ans += 1\n            c += 1\n        else:\n            c = 1\n    return ans\nprint(minChanges('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 0
  },
  {
    "id": 1233,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c = 1\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            c += 1\n        elif c % 2 == 1:\n            ans += 1\n            c += 1\n        else:\n            c = 1\n    return ans\nprint(minChanges('abababababababababababababababababababababababababababababababababababababababababababababababababab'))",
    "execution_output": 50
  },
  {
    "id": 1234,
    "q_id": "sample_450",
    "code": "def minChanges(s: str) -> int:\n    c = 1\n    ans = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            c += 1\n        elif c % 2 == 1:\n            ans += 1\n            c += 1\n        else:\n            c = 1\n    return ans\nprint(minChanges('A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊A1!😊'))",
    "execution_output": 50
  },
  {
    "id": 1235,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            res += 1\n    return res\nprint(minChanges(''))",
    "execution_output": 0
  },
  {
    "id": 1236,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            res += 1\n    return res\nprint(minChanges('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 0
  },
  {
    "id": 1237,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            res += 1\n    return res\nprint(minChanges('abababababababababababababababababababababababababababababababababababababababababababababababababab'))",
    "execution_output": 50
  },
  {
    "id": 1238,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            res += 1\n    return res\nprint(minChanges(' \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t'))",
    "execution_output": 50
  },
  {
    "id": 1239,
    "q_id": "sample_451",
    "code": "def minChanges(s: str) -> int:\n    res = 0\n    for i in range(0, len(s), 2):\n        if s[i] != s[i + 1]:\n            res += 1\n    return res\nprint(minChanges('😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃😀😃'))",
    "execution_output": 50
  },
  {
    "id": 1240,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint(minChanges(''))",
    "execution_output": 0
  },
  {
    "id": 1241,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint(minChanges('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'))",
    "execution_output": 0
  },
  {
    "id": 1242,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint(minChanges('abababababababababababababababababababababababababababababababababababababababababababababababababab'))",
    "execution_output": 50
  },
  {
    "id": 1243,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint(minChanges(' \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t \\t'))",
    "execution_output": 50
  },
  {
    "id": 1244,
    "q_id": "sample_452",
    "code": "def minChanges(s: str) -> int:\n    n = len(s)\n    result = 0\n    for i in range(0, n, 2):\n        if s[i] != s[i + 1]:\n            result += 1\n    return result\nprint(minChanges('🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃'))",
    "execution_output": 50
  },
  {
    "id": 1245,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint(minChanges(''))",
    "execution_output": 0
  },
  {
    "id": 1246,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint(minChanges('x'))",
    "execution_output": 0
  },
  {
    "id": 1247,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint(minChanges('abababababababababababababababababababababababababababababababababababababababababababababababababab'))",
    "execution_output": 50
  },
  {
    "id": 1248,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint(minChanges('                                                                                                    '))",
    "execution_output": 0
  },
  {
    "id": 1249,
    "q_id": "sample_453",
    "code": "def minChanges(s: str) -> int:\n    ans = 0\n    for i in range(1, len(s), 2):\n        if s[i] != s[i - 1]:\n            ans += 1\n    return ans\nprint(minChanges('🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃🙂🙃'))",
    "execution_output": 50
  },
  {
    "id": 1250,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda: 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda: 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint(lengthOfLongestSubsequence([], 0))",
    "execution_output": 0
  },
  {
    "id": 1251,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda: 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda: 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint(lengthOfLongestSubsequence([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0))",
    "execution_output": 100
  },
  {
    "id": 1252,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda: 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda: 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint(lengthOfLongestSubsequence
    "execution_output": 100
  },
  {
    "id": 1253,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda: 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda: 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint(lengthOfLongestSubsequence(list(range(1, 101)), 5050))",
    "execution_output": 100
  },
  {
    "id": 1254,
    "q_id": "sample_454",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = defaultdict(lambda: 0)\n    d[0] = 0\n    for i, v in enumerate(nums):\n        if v > target:\n            continue\n        tmp = defaultdict(lambda: 0)\n        tmp[0] = 0\n        for s in d:\n            if s + v > target:\n                continue\n            tmp[s + v] = max(tmp[s + v], d[s] + 1)\n        for s in tmp:\n            d[s] = max(d[s], tmp[s])\n    return d[target] if target in d else -1\nprint(lengthOfLongestSubsequence([9999999999, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10000, 3254323, 8888888888], 3254323))",
    "execution_output": 12
  },
  {
    "id": 1255,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i + x] = max(dp[i + x], 1 + dp[i])\n    return dp[-1] - 1\nprint(lengthOfLongestSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 55))",
    "execution_output": 28
  },
  {
    "id": 1256,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i + x] = max(dp[i + x], 1 + dp[i])\n    return dp[-1] - 1\nprint(lengthOfLongestSubsequence([999, 1001, 5003, 7501, 12000, 234772, 11111, 22222, 33333, 44444], 234772))",
    "execution_output": 1
  },
  {
    "id": 1257,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i + x] = max(dp[i + x], 1 + dp[i])\n    return dp[-1] - 1\nprint(lengthOfLongestSubsequence([3254323, 1234567, 876543, 765432, 543219, 222222, 101010, 50505, 30303, 20202], 3254323))",
    "execution_output": 1
  },
  {
    "id": 1258,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i + x] = max(dp[i + x], 1 + dp[i])\n    return dp[-1] - 1\nprint(lengthOfLongestSubsequence([51, 60, 70, 80, 90, 101], 50))",
    "execution_output": -1
  },
  {
    "id": 1259,
    "q_id": "sample_455",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    nums.sort()\n    dp = [0] * (target + 1)\n    dp[0] = 1\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] > 0:\n                dp[i + x] = max(dp[i + x], 1 + dp[i])\n    return dp[-1] - 1\nprint(lengthOfLongestSubsequence([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 10], 0))",
    "execution_output": 20
  },
  {
    "id": 1260,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0] * (target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    return dp[-1] if dp[-1] else -1\nprint(lengthOfLongestSubsequence([], 10))",
    "execution_output": -1
  },
  {
    "id": 1261,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0] * (target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    return dp[-1] if dp[-1] else -1\nprint(lengthOfLongestSubsequence([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0))",
    "execution_output": 100
  },
  {
    "id": 1262,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0] * (target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    return dp[-1] if dp[-1] else -1\nprint(lengthOfLongestSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 5050))",
    "execution_output": 100
  },
  {
    "id": 1263,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0] * (target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    return dp[-1] if dp[-1] else -1\nprint(lengthOfLongestSubsequence([234772] + [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 234772))",
    "execution_output": 100
  },
  {
    "id": 1264,
    "q_id": "sample_456",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [0] * (target + 1)\n    for x in nums:\n        for i in range(target - x, -1, -1):\n            if dp[i] or not i:\n                dp[i + x] = max(dp[i + x], dp[i] + 1)\n    return dp[-1] if dp[-1] else -1\nprint(lengthOfLongestSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 3254323))",
    "execution_output": -1
  },
  {
    "id": 1265,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(max_len[new_sum], max_len[new_sum - x] + 1)\n    return max_len[target]\nprint(lengthOfLongestSubsequence([], 234772))",
    "execution_output": -1
  },
  {
    "id": 1266,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(max_len[new_sum], max_len[new_sum - x] + 1)\n    return max_len[target]\nprint(lengthOfLongestSubsequence([5, 3, 7, 11], 0))",
    "execution_output": 0
  },
  {
    "id": 1267,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(max_len[new_sum], max_len[new_sum - x] + 1)\n    return max_len[target]\nprint(lengthOfLongestSubsequence([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0))",
    "execution_output": 100
  },
  {
    "id": 1268,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(max_len[new_sum], max_len[new_sum - x] + 1)\n    return max_len[target]\nprint(lengthOfLongestSubsequence([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 100))",
    "execution_output": 100
  },
  {
    "id": 1269,
    "q_id": "sample_457",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    max_len = [-1] * (target + 1)\n    max_len[0] = 0\n    for x in nums:\n        for new_sum in reversed(range(x, target + 1)):\n            if max_len[new_sum - x] != -1:\n                max_len[new_sum] = max(max_len[new_sum], max_len[new_sum - x] + 1)\n    return max_len[target]\nprint(lengthOfLongestSubsequence([12345, 67890, 23456, 78901, 34567, 89012, 45678, 90123, 56789, 101112, 12345, 67890, 23456, 78901, 34567, 89012, 45678, 90123, 56789, 101112, 12345, 67890, 23456, 78901, 34567, 89012, 45678, 90123, 56789, 101112, 12345, 67890, 23456, 78901, 34567, 89012, 45678, 90123, 56789, 101112, 12345, 67890, 23456, 78901, 34567, 89012, 45678, 90123, 56789, 101112, 12345, 67890, 23456, 78901, 34567, 89012, 45678, 90123, 56789, 101112, 12345, 67890, 23456, 78901, 34567, 89012, 45678, 90123, 56789, 101112, 12345, 67890, 23456, 78901, 34567, 89012, 45678], 3254323))",
    "execution_output": 61
  },
  {
    "id": 1270,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = [0] * (target + 1)\n    t = [el for el in nums if el <= target]\n    if len(t) == 0:\n        return -1\n    d[t[0]] = 1\n    for el in t[1:]:\n        for j in range(target, 0, -1):\n            if j - el >= 0 and (j - el == 0 or d[j - el] > 0):\n                d[j] = max(d[j], d[j - el] + 1)\n    if d[target] == 0:\n        return -1\n    return d[target]\nprint(lengthOfLongestSubsequence([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 1000))",
    "execution_output": 100
  },
  {
    "id": 1271,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = [0] * (target + 1)\n    t = [el for el in nums if el <= target]\n    if len(t) == 0:\n        return -1\n    d[t[0]] = 1\n    for el in t[1:]:\n        for j in range(target, 0, -1):\n            if j - el >= 0 and (j - el == 0 or d[j - el] > 0):\n                d[j] = max(d[j], d[j - el] + 1)\n    if d[target] == 0:\n        return -1\n    return d[target]\nprint(lengthOfLongestSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 5050))",
    "execution_output": 100
  },
  {
    "id": 1272,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = [0] * (target + 1)\n    t = [el for el in nums if el <= target]\n    if len(t) == 0:\n        return -1\n    d[t[0]] = 1\n    for el in t[1:]:\n        for j in range(target, 0, -1):\n            if j - el >= 0 and (j - el == 0 or d[j - el] > 0):\n                d[j] = max(d[j], d[j - el] + 1)\n    if d[target] == 0:\n        return -1\n    return d[target]\nprint(lengthOfLongestSubsequence([234772, 3254323, 999999, 1001], 1000))",
    "execution_output": -1
  },
  {
    "id": 1273,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = [0] * (target + 1)\n    t = [el for el in nums if el <= target]\n    if len(t) == 0:\n        return -1\n    d[t[0]] = 1\n    for el in t[1:]:\n        for j in range(target, 0, -1):\n            if j - el >= 0 and (j - el == 0 or d[j - el] > 0):\n                d[j] = max(d[j], d[j - el] + 1)\n    if d[target] == 0:\n        return -1\n    return d[target]\nprint(lengthOfLongestSubsequence([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0))",
    "execution_output": 1
  },
  {
    "id": 1274,
    "q_id": "sample_458",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    d = [0] * (target + 1)\n    t = [el for el in nums if el <= target]\n    if len(t) == 0:\n        return -1\n    d[t[0]] = 1\n    for el in t[1:]:\n        for j in range(target, 0, -1):\n            if j - el >= 0 and (j - el == 0 or d[j - el] > 0):\n                d[j] = max(d[j], d[j - el] + 1)\n    if d[target] == 0:\n        return -1\n    return d[target]\nprint(lengthOfLongestSubsequence([], 123))",
    "execution_output": -1
  },
  {
    "id": 1275,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [-1] * (target + 1)\n    dp[0] = 0\n    for a in nums:\n        for i in range(target - a, -1, -1):\n            if dp[i] == -1:\n                continue\n            dp[i + a] = max(dp[i + a], dp[i] + 1)\n    return dp[-1]\nprint(lengthOfLongestSubsequence(list(range(1, 101)), 150))",
    "execution_output": 16
  },
  {
    "id": 1276,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [-1] * (target + 1)\n    dp[0] = 0\n    for a in nums:\n        for i in range(target - a, -1, -1):\n            if dp[i] == -1:\n                continue\n            dp[i + a] = max(dp[i + a], dp[i] + 1)\n    return dp[-1]\nprint(lengthOfLongestSubsequence([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] + [1, 2, 3], 0))",
    "execution_output": 100
  },
  {
    "id": 1277,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [-1] * (target + 1)\n    dp[0] = 0\n    for a in nums:\n        for i in range(target - a, -1, -1):\n            if dp[i] == -1:\n                continue\n            dp[i + a] = max(dp[i + a], dp[i] + 1)\n    return dp[-1]\nprint(lengthOfLongestSubsequence([], 234772))",
    "execution_output": -1
  },
  {
    "id": 1278,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [-1] * (target + 1)\n    dp[0] = 0\n    for a in nums:\n        for i in range(target - a, -1, -1):\n            if dp[i] == -1:\n                continue\n            dp[i + a] = max(dp[i + a], dp[i] + 1)\n    return dp[-1]\nprint(lengthOfLongestSubsequence([234772, 117386, 117386, 58693, 58693, 58693, 58693] + [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 234772))",
    "execution_output": 4
  },
  {
    "id": 1279,
    "q_id": "sample_459",
    "code": "def lengthOfLongestSubsequence(nums: List[int], target: int) -> int:\n    dp = [-1] * (target + 1)\n    dp[0] = 0\n    for a in nums:\n        for i in range(target - a, -1, -1):\n            if dp[i] == -1:\n                continue\n            dp[i + a] = max(dp[i + a], dp[i] + 1)\n    return dp[-1]\nprint(lengthOfLongestSubsequence([10 ** 6] * 100, 3254323))",
    "execution_output": -1
  },
  {
    "id": 1280,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n:\n        return 0\n    elif n == 1:\n        return prices[0]\n    dp = [float('inf')] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n    return dp[-1]\nprint(minimumCoins([]))",
    "execution_output": 0
  },
  {
    "id": 1281,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n:\n        return 0\n    elif n == 1:\n        return prices[0]\n    dp = [float('inf')] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n    return dp[-1]\nprint(minimumCoins([3254323]))",
    "execution_output": 3254323
  },
  {
    "id": 1282,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n:\n        return 0\n    elif n == 1:\n        return prices[0]\n    dp = [float('inf')] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n    return dp[-1]\nprint(minimumCoins([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 1283,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n:\n        return 0\n    elif n == 1:\n        return prices[0]\n    dp = [float('inf')] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n    return dp[-1]\nprint(minimumCoins
    "execution_output": 1408632
  },
  {
    "id": 1284,
    "q_id": "sample_472",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    if not n:\n        return 0\n    elif n == 1:\n        return prices[0]\n    dp = [float('inf')] * n\n    for j in range(2):\n        dp[j] = prices[0]\n    for i in range(1, n):\n        price = dp[i - 1] + prices[i]\n        for j in range(i, min(n, (i + 1) * 2)):\n            dp[j] = min(dp[j], price)\n    return dp[-1]\nprint(minimumCoins([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 97
  },
  {
    "id": 1285,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint(minimumCoins([]))",
    "execution_output": 0
  },
  {
    "id": 1286,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint(minimumCoins([3254323]))",
    "execution_output": 3254323
  },
  {
    "id": 1287,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint(minimumCoins([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
    "execution_output": 12
  },
  {
    "id": 1288,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint(minimumCoins([234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456, 234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456, 234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456, 234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456, 234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456, 234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456, 234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456, 234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456, 234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456, 234772, 3254323, 999999, 123456, 7777777, 42, 234772, 3254323, 999999, 123456]))",
    "execution_output": 1358437
  },
  {
    "id": 1289,
    "q_id": "sample_473",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def dp(i):\n        if i >= n:\n            return 0\n        min_cost = inf\n        for j in range(i + 1, i + i + 3):\n            min_cost = min(min_cost, dp(j))\n        return prices[i] + min_cost\n    return dp(0)\nprint(minimumCoins([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 1290,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n\n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n        return res\n    dfs.cache_clear()\n    return dfs(0, -1)\nprint(minimumCoins([]))",
    "execution_output": 0
  },
  {
    "id": 1291,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n\n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n        return res\n    dfs.cache_clear()\n    return dfs(0, -1)\nprint(minimumCoins([3254323]))",
    "execution_output": 3254323
  },
  {
    "id": 1292,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n\n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n        return res\n    dfs.cache_clear()\n    return dfs(0, -1)\nprint(minimumCoins([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 1293,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n\n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n        return res\n    dfs.cache_clear()\n    return dfs(0, -1)\nprint(minimumCoins([10, 5, 20, 15, 8, 12, 30, 25, 18, 22, 7, 14, 9, 11, 16, 19, 13, 17, 234772, 21, 3, 6, 2, 4, 8, 1, 5, 7, 9, 11, 13, 10, 12, 14, 16, 18, 20, 3254323, 15, 19, 10, 5, 20, 15, 8, 12, 30, 25, 18, 22, 7, 14, 9, 11, 16, 19, 13, 17, 234772, 21, 3, 6, 2, 4, 8, 1, 5, 7, 9, 11, 13, 10, 12, 14, 16, 18, 20, 3254323, 15, 19, 10, 5, 20, 15, 8, 12, 30, 25, 18, 22, 7, 14, 9, 11, 16, 19, 13, 17, 234772, 21]))",
    "execution_output": 38
  },
  {
    "id": 1294,
    "q_id": "sample_474",
    "code": "def minimumCoins(prices: List[int]) -> int:\n\n    @cache\n    def dfs(i, free_until):\n        if i >= len(prices):\n            return 0\n        res = prices[i] + dfs(i + 1, min(len(prices) - 1, i + i + 1))\n        if free_until >= i:\n            res = min(res, dfs(i + 1, free_until))\n        return res\n    dfs.cache_clear()\n    return dfs(0, -1)\nprint(minimumCoins
    "execution_output": 8
  },
  {
    "id": 1295,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        return min(c1, c2)\n    return panda(0, 0)\nprint(minimumCoins([234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323, 234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323, 234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323, 234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323, 234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323, 234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323, 234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323, 234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323, 234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323, 234772, 1, 5000, 99999, 123456, 250000, 400, 70000, 85, 3254323]))",
    "execution_output": 240176
  },
  {
    "id": 1296,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        return min(c1, c2)\n    return panda(0, 0)\nprint(minimumCoins([3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323, 3254323]))",
    "execution_output": 9762969
  },
  {
    "id": 1297,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        return min(c1, c2)\n    return panda(0, 0)\nprint(minimumCoins([0, 0, 0, 5, 0, 0, 10, 0, 0, 15, 0, 0, 20, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 1298,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        return min(c1, c2)\n    return panda(0, 0)\nprint(minimumCoins([-5, 10, -20, 30, -40, 50, -60, 70, -80, 90]))",
    "execution_output": -205
  },
  {
    "id": 1299,
    "q_id": "sample_475",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n\n    @cache\n    def panda(i, fc):\n        if i >= n:\n            return 0\n        c1 = float(inf)\n        if fc != 0:\n            c1 = panda(i + 1, fc - 1)\n        c2 = prices[i] + panda(i + 1, min(n + 1, i + 1))\n        return min(c1, c2)\n    return panda(0, 0)\nprint(minimumCoins([]))",
    "execution_output": 0
  },
  {
    "id": 1300,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float('inf')] * (n + 1)\n    for i in range(n):\n        if i == 0:\n            cost = prices[i]\n        else:\n            cost = ans[i - 1] + prices[i]\n        for j in range(i, min(n, i + i + 1 + 1)):\n            ans[j] = min(ans[j], cost)\n    return ans[n - 1]\nprint(minimumCoins([1, 1, 1, 1, 1, 1, 1, 1, 1, 234772, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3254323, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 234772, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3254323, 1, 1, 1, 1, 1, 1, 1, 1, 1]))",
    "execution_output": 6
  },
  {
    "id": 1301,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float('inf')] * (n + 1)\n    for i in range(n):\n        if i == 0:\n            cost = prices[i]\n        else:\n            cost = ans[i - 1] + prices[i]\n        for j in range(i, min(n, i + i + 1 + 1)):\n            ans[j] = min(ans[j], cost)\n    return ans[n - 1]\nprint(minimumCoins([3254323]))",
    "execution_output": 3254323
  },
  {
    "id": 1302,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float('inf')] * (n + 1)\n    for i in range(n):\n        if i == 0:\n            cost = prices[i]\n        else:\n            cost = ans[i - 1] + prices[i]\n        for j in range(i, min(n, i + i + 1 + 1)):\n            ans[j] = min(ans[j], cost)\n    return ans[n - 1]\nprint(minimumCoins
    "execution_output": 1408632
  },
  {
    "id": 1303,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float('inf')] * (n + 1)\n    for i in range(n):\n        if i == 0:\n            cost = prices[i]\n        else:\n            cost = ans[i - 1] + prices[i]\n        for j in range(i, min(n, i + i + 1 + 1)):\n            ans[j] = min(ans[j], cost)\n    return ans[n - 1]\nprint(minimumCoins([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))",
    "execution_output": 97
  },
  {
    "id": 1304,
    "q_id": "sample_476",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    ans = [float('inf')] * (n + 1)\n    for i in range(n):\n        if i == 0:\n            cost = prices[i]\n        else:\n            cost = ans[i - 1] + prices[i]\n        for j in range(i, min(n, i + i + 1 + 1)):\n            ans[j] = min(ans[j], cost)\n    return ans[n - 1]\nprint(minimumCoins([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3254323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234772, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 1305,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min((dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1)))\n    return dp[0]\nprint(minimumCoins([]))",
    "execution_output": 0
  },
  {
    "id": 1306,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min((dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1)))\n    return dp[0]\nprint(minimumCoins([3254323]))",
    "execution_output": 3254323
  },
  {
    "id": 1307,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min((dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1)))\n    return dp[0]\nprint(minimumCoins([7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9, 7, 3, 12, 1, 9]))",
    "execution_output": 15
  },
  {
    "id": 1308,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min((dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1)))\n    return dp[0]\nprint(minimumCoins([234772, 0, 3254323, 0, 234772, 0, 3254323, 0, 234772, 0, 3254323, 0]))",
    "execution_output": 234772
  },
  {
    "id": 1309,
    "q_id": "sample_477",
    "code": "def minimumCoins(prices: List[int]) -> int:\n    n = len(prices)\n    dp = [math.inf] * (n + 1)\n    dp[-1] = 0\n    for i in reversed(range(n)):\n        dp[i] = prices[i] + min((dp[j] for j in range(i + 1, min(2 * i + 2, n) + 1)))\n    return dp[0]\nprint(minimumCoins([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 0
  },
  {
    "id": 1310,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums += [float('inf')]\n    presum = [0] + list(accumulate(nums))\n    n, dp, prev, cur = (len(nums) - 1, Counter(), Counter(), 0)\n    for i in range(n):\n        i += 1\n        cur = max(cur, prev[i])\n        dp[i] = i - cur - 1 + dp[cur]\n        idx = bisect.bisect_left(presum, 2 * presum[i] - presum[cur])\n        prev[idx] = i\n    return n - dp[n]\nprint(findMaximumLength
    "execution_output": 51
  },
  {
    "id": 1311,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums += [float('inf')]\n    presum = [0] + list(accumulate(nums))\n    n, dp, prev, cur = (len(nums) - 1, Counter(), Counter(), 0)\n    for i in range(n):\n        i += 1\n        cur = max(cur, prev[i])\n        dp[i] = i - cur - 1 + dp[cur]\n        idx = bisect.bisect_left(presum, 2 * presum[i] - presum[cur])\n        prev[idx] = i\n    return n - dp[n]\nprint(findMaximumLength([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))",
    "execution_output": 1
  },
  {
    "id": 1312,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums += [float('inf')]\n    presum = [0] + list(accumulate(nums))\n    n, dp, prev, cur = (len(nums) - 1, Counter(), Counter(), 0)\n    for i in range(n):\n        i += 1\n        cur = max(cur, prev[i])\n        dp[i] = i - cur - 1 + dp[cur]\n        idx = bisect.bisect_left(presum, 2 * presum[i] - presum[cur])\n        prev[idx] = i\n    return n - dp[n]\nprint(findMaximumLength([]))",
    "execution_output": 0
  },
  {
    "id": 1313,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums += [float('inf')]\n    presum = [0] + list(accumulate(nums))\n    n, dp, prev, cur = (len(nums) - 1, Counter(), Counter(), 0)\n    for i in range(n):\n        i += 1\n        cur = max(cur, prev[i])\n        dp[i] = i - cur - 1 + dp[cur]\n        idx = bisect.bisect_left(presum, 2 * presum[i] - presum[cur])\n        prev[idx] = i\n    return n - dp[n]\nprint(findMaximumLength([10 ** 12, -10 ** 12, 10 ** 12, -10 ** 12, 10 ** 12, -10 ** 12, 10 ** 12, -10 ** 12]))",
    "execution_output": 1
  },
  {
    "id": 1314,
    "q_id": "sample_478",
    "code": "def findMaximumLength(nums: List[int]) -> int:\n    nums += [float('inf')]\n    presum = [0] + list(accumulate(nums))\n    n, dp, prev, cur = (len(nums) - 1, Counter(), Counter(), 0)\n    for i in range(n):\n        i += 1\n        cur = max(cur, prev[i])\n        dp[i] = i - cur - 1 + dp[cur]\n        idx = bisect.bisect_left(presum, 2 * presum[i] - presum[cur])\n        prev[idx] = i\n    return n - dp[n]\nprint(findMaximumLength([1, 2, float('inf'), 3, float('-inf'), 4, float('nan'), 5]))",
    "execution_output": 3
  }
]