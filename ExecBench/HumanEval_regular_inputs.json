[
  {
    "id": 0,
    "q_id": "HumanEval/0",
    "code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False\n\n\nprint(has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],0.3))",
    "execution_output": true
  },
  {
    "id": 1,
    "q_id": "HumanEval/0",
    "code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False\n\n\nprint(has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],0.05))",
    "execution_output": false
  },
  {
    "id": 2,
    "q_id": "HumanEval/0",
    "code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False\n\n\nprint(has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0],0.95))",
    "execution_output": true
  },
  {
    "id": 3,
    "q_id": "HumanEval/0",
    "code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False\n\n\nprint(has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1],1.0))",
    "execution_output": true
  },
  {
    "id": 4,
    "q_id": "HumanEval/0",
    "code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False\n\n\nprint(has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1],0.5))",
    "execution_output": false
  },
  {
    "id": 5,
    "q_id": "HumanEval/1",
    "code": "def separate_paren_groups(paren_string: str) -> List[str]:\n\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        if ch == \")\": cnt -= 1\n        if ch != \" \": group += ch\n        if cnt == 0:\n            if group != \"\": results.append(group)\n            group = \"\"\n    return results\n\n\nprint(separate_paren_groups(( ) (( )) (( )( ))))",
    "execution_output": [
      "()",
      "(())",
      "(()())"
    ]
  },
  {
    "id": 6,
    "q_id": "HumanEval/1",
    "code": "def separate_paren_groups(paren_string: str) -> List[str]:\n\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        if ch == \")\": cnt -= 1\n        if ch != \" \": group += ch\n        if cnt == 0:\n            if group != \"\": results.append(group)\n            group = \"\"\n    return results\n\n\nprint(separate_paren_groups(()))",
    "execution_output": [
      "()"
    ]
  },
  {
    "id": 7,
    "q_id": "HumanEval/1",
    "code": "def separate_paren_groups(paren_string: str) -> List[str]:\n\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        if ch == \")\": cnt -= 1\n        if ch != \" \": group += ch\n        if cnt == 0:\n            if group != \"\": results.append(group)\n            group = \"\"\n    return results\n\n\nprint(separate_paren_groups((())))",
    "execution_output": [
      "(())"
    ]
  },
  {
    "id": 8,
    "q_id": "HumanEval/1",
    "code": "def separate_paren_groups(paren_string: str) -> List[str]:\n\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        if ch == \")\": cnt -= 1\n        if ch != \" \": group += ch\n        if cnt == 0:\n            if group != \"\": results.append(group)\n            group = \"\"\n    return results\n\n\nprint(separate_paren_groups(((()))()))",
    "execution_output": [
      "((()))",
      "()"
    ]
  },
  {
    "id": 9,
    "q_id": "HumanEval/1",
    "code": "def separate_paren_groups(paren_string: str) -> List[str]:\n\n    cnt, group, results = 0, \"\", []\n    for ch in paren_string:\n        if ch == \"(\": cnt += 1\n        if ch == \")\": cnt -= 1\n        if ch != \" \": group += ch\n        if cnt == 0:\n            if group != \"\": results.append(group)\n            group = \"\"\n    return results\n\n\nprint(separate_paren_groups(()(()()((()))(((()()((()))))))))",
    "execution_output": [
      "()",
      "(()()((()))(((()()((()))))))"
    ]
  },
  {
    "id": 10,
    "q_id": "HumanEval/2",
    "code": "def truncate_number(number: float) -> float:\n\n    return number - int(number)\n\n\nprint(truncate_number(3.5))",
    "execution_output": 0.5
  },
  {
    "id": 11,
    "q_id": "HumanEval/2",
    "code": "def truncate_number(number: float) -> float:\n\n    return number - int(number)\n\n\nprint(truncate_number(1.33))",
    "execution_output": 0.33000000000000007
  },
  {
    "id": 12,
    "q_id": "HumanEval/2",
    "code": "def truncate_number(number: float) -> float:\n\n    return number - int(number)\n\n\nprint(truncate_number(1.0))",
    "execution_output": 0.0
  },
  {
    "id": 13,
    "q_id": "HumanEval/2",
    "code": "def truncate_number(number: float) -> float:\n\n    return number - int(number)\n\n\nprint(truncate_number(1.5))",
    "execution_output": 0.5
  },
  {
    "id": 14,
    "q_id": "HumanEval/2",
    "code": "def truncate_number(number: float) -> float:\n\n    return number - int(number)\n\n\nprint(truncate_number(72999331.86348532))",
    "execution_output": 0.8634853214025497
  },
  {
    "id": 15,
    "q_id": "HumanEval/3",
    "code": "def below_zero(operations: List[int]) -> bool:\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False\n\n\nprint(below_zero([1, 2, -3, 1, 2, -3]))",
    "execution_output": false
  },
  {
    "id": 16,
    "q_id": "HumanEval/3",
    "code": "def below_zero(operations: List[int]) -> bool:\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False\n\n\nprint(below_zero([1, 2, -4, 5, 6]))",
    "execution_output": true
  },
  {
    "id": 17,
    "q_id": "HumanEval/3",
    "code": "def below_zero(operations: List[int]) -> bool:\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False\n\n\nprint(below_zero([1, -1, 2, -2, 5, -5, 4, -4]))",
    "execution_output": false
  },
  {
    "id": 18,
    "q_id": "HumanEval/3",
    "code": "def below_zero(operations: List[int]) -> bool:\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False\n\n\nprint(below_zero([1, -1, 2, -2, 5, -5, 4, -5]))",
    "execution_output": true
  },
  {
    "id": 19,
    "q_id": "HumanEval/3",
    "code": "def below_zero(operations: List[int]) -> bool:\n    account = 0\n    for operation in operations:\n        account += operation\n        if account < 0:\n            return True\n    return False\n\n\nprint(below_zero([-1, -3, 6, -3]))",
    "execution_output": true
  },
  {
    "id": 20,
    "q_id": "HumanEval/4",
    "code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0]))",
    "execution_output": 0.6666666666666666
  },
  {
    "id": 21,
    "q_id": "HumanEval/4",
    "code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))",
    "execution_output": 1.0
  },
  {
    "id": 22,
    "q_id": "HumanEval/4",
    "code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]))",
    "execution_output": 1.2
  },
  {
    "id": 23,
    "q_id": "HumanEval/4",
    "code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\nprint(mean_absolute_deviation([-1.0, 4.5, 0.0, 2.5, -3.0]))",
    "execution_output": 2.32
  },
  {
    "id": 24,
    "q_id": "HumanEval/4",
    "code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\nprint(mean_absolute_deviation([0.0, 0.0, 0.0, 0.0, 0.0]))",
    "execution_output": 0.0
  },
  {
    "id": 25,
    "q_id": "HumanEval/5",
    "code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n    return res\n\n\nprint(intersperse([],7))",
    "execution_output": []
  },
  {
    "id": 26,
    "q_id": "HumanEval/5",
    "code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n    return res\n\n\nprint(intersperse([5, 6, 3, 2],8))",
    "execution_output": [
      5,
      8,
      6,
      8,
      3,
      8,
      2
    ]
  },
  {
    "id": 27,
    "q_id": "HumanEval/5",
    "code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n    return res\n\n\nprint(intersperse([2, 2, 2],2))",
    "execution_output": [
      2,
      2,
      2,
      2,
      2
    ]
  },
  {
    "id": 28,
    "q_id": "HumanEval/5",
    "code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n    return res\n\n\nprint(intersperse([1, 2, 3],0))",
    "execution_output": [
      1,
      0,
      2,
      0,
      3
    ]
  },
  {
    "id": 29,
    "q_id": "HumanEval/5",
    "code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n\n    res = []\n    for i in range(len(numbers)):\n        res.append(numbers[i])\n        if i != len(numbers) - 1:\n            res.append(delimeter)\n    return res\n\n\nprint(intersperse([2, 4, 6, 8],1))",
    "execution_output": [
      2,
      1,
      4,
      1,
      6,
      1,
      8
    ]
  },
  {
    "id": 30,
    "q_id": "HumanEval/6",
    "code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            max_depth = max(max_depth, cnt)\n        return max_depth\n    \n    return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]\n\n\nprint(parse_nested_parens('(()()) ((())) () ((())()()))')",
    "execution_output": [
      2,
      3,
      1,
      3
    ]
  },
  {
    "id": 31,
    "q_id": "HumanEval/6",
    "code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            max_depth = max(max_depth, cnt)\n        return max_depth\n    \n    return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]\n\n\nprint(parse_nested_parens('()((()))')",
    "execution_output": [
      1,
      2,
      3,
      4
    ]
  },
  {
    "id": 32,
    "q_id": "HumanEval/6",
    "code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            max_depth = max(max_depth, cnt)\n        return max_depth\n    \n    return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]\n\n\nprint(parse_nested_parens('(((())(()(()))((()()))))(()(()))((()())))')",
    "execution_output": [
      5
    ]
  },
  {
    "id": 33,
    "q_id": "HumanEval/6",
    "code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            max_depth = max(max_depth, cnt)\n        return max_depth\n    \n    return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]\n\n\nprint(parse_nested_parens('(()()(((())))(()(())(((())(()(()))((()()))))(()(()))((()()))))()')",
    "execution_output": [
      7
    ]
  },
  {
    "id": 34,
    "q_id": "HumanEval/6",
    "code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \n    def count_depth(s: str) -> int:\n        max_depth, cnt = 0, 0\n        for ch in s:\n            if ch == \"(\": cnt += 1\n            if ch == \")\": cnt -= 1\n            max_depth = max(max_depth, cnt)\n        return max_depth\n    \n    return [count_depth(s) for s in paren_string.split(\" \") if s != \"\"]\n\n\nprint(parse_nested_parens('()')",
    "execution_output": [
      9
    ]
  },
  {
    "id": 35,
    "q_id": "HumanEval/7",
    "code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strings))\n\n\nprint(filter_by_substring([],john))",
    "execution_output": []
  },
  {
    "id": 36,
    "q_id": "HumanEval/7",
    "code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strings))\n\n\nprint(filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],xxx))",
    "execution_output": [
      "xxx",
      "xxxAAA",
      "xxx"
    ]
  },
  {
    "id": 37,
    "q_id": "HumanEval/7",
    "code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strings))\n\n\nprint(filter_by_substring(['hello', 'world', 'python', 'numpy', 'pandas'],py))",
    "execution_output": [
      "python",
      "numpy"
    ]
  },
  {
    "id": 38,
    "q_id": "HumanEval/7",
    "code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strings))\n\n\nprint(filter_by_substring(['supercalifragilisticexpialidocious', 'sun', 'floccinaucinihilipilificatioearthn'],ili))",
    "execution_output": [
      "supercalifragilisticexpialidocious",
      "floccinaucinihilipilificatioearthn"
    ]
  },
  {
    "id": 39,
    "q_id": "HumanEval/7",
    "code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return list(filter(lambda s: substring in s, strings))\n\n\nprint(filter_by_substring(['antidisesshmentarianism', 'floccinaucinihilipilification', 'floccinaucinihilipilificatnion', 'floccinaucinihilipilificatilinion'],ili))",
    "execution_output": [
      "floccinaucinihilipilification",
      "floccinaucinihilipilificatnion",
      "floccinaucinihilipilificatilinion"
    ]
  },
  {
    "id": 40,
    "q_id": "HumanEval/8",
    "code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n\n\nprint(sum_product([1, 1, 1]))",
    "execution_output": [
      3,
      1
    ]
  },
  {
    "id": 41,
    "q_id": "HumanEval/8",
    "code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n\n\nprint(sum_product([3, 5, 7]))",
    "execution_output": [
      15,
      105
    ]
  },
  {
    "id": 42,
    "q_id": "HumanEval/8",
    "code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n\n\nprint(sum_product([10]))",
    "execution_output": [
      10,
      10
    ]
  },
  {
    "id": 43,
    "q_id": "HumanEval/8",
    "code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n\n\nprint(sum_product([2, 4, 6, 8, 10]))",
    "execution_output": [
      30,
      3840
    ]
  },
  {
    "id": 44,
    "q_id": "HumanEval/8",
    "code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s, p = 0, 1\n    for number in numbers:\n        s += number\n        p *= number\n    return s, p\n\n\nprint(sum_product([30, 30, 40, 50]))",
    "execution_output": [
      150,
      1800000
    ]
  },
  {
    "id": 45,
    "q_id": "HumanEval/9",
    "code": "def rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:(i+1)]) for i in range(len(numbers))]\n\n\nprint(rolling_max([1, 2, 3, 4]))",
    "execution_output": [
      1,
      2,
      3,
      4
    ]
  },
  {
    "id": 46,
    "q_id": "HumanEval/9",
    "code": "def rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:(i+1)]) for i in range(len(numbers))]\n\n\nprint(rolling_max([4, 3, 2, 1]))",
    "execution_output": [
      4,
      4,
      4,
      4
    ]
  },
  {
    "id": 47,
    "q_id": "HumanEval/9",
    "code": "def rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:(i+1)]) for i in range(len(numbers))]\n\n\nprint(rolling_max([3, 2, 3, 100, 3]))",
    "execution_output": [
      3,
      3,
      3,
      100,
      100
    ]
  },
  {
    "id": 48,
    "q_id": "HumanEval/9",
    "code": "def rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:(i+1)]) for i in range(len(numbers))]\n\n\nprint(rolling_max([1, 1, 1, 1, 1]))",
    "execution_output": [
      1,
      1,
      1,
      1,
      1
    ]
  },
  {
    "id": 49,
    "q_id": "HumanEval/9",
    "code": "def rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:(i+1)]) for i in range(len(numbers))]\n\n\nprint(rolling_max([4, 1]))",
    "execution_output": [
      4,
      4
    ]
  },
  {
    "id": 50,
    "q_id": "HumanEval/10",
    "code": "def is_palindrome(string: str) -> bool:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n\nprint(make_palindrome(x))",
    "execution_output": "x"
  },
  {
    "id": 51,
    "q_id": "HumanEval/10",
    "code": "def is_palindrome(string: str) -> bool:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n\nprint(make_palindrome(xyz))",
    "execution_output": "xyzyx"
  },
  {
    "id": 52,
    "q_id": "HumanEval/10",
    "code": "def is_palindrome(string: str) -> bool:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n\nprint(make_palindrome(xyx))",
    "execution_output": "xyx"
  },
  {
    "id": 53,
    "q_id": "HumanEval/10",
    "code": "def is_palindrome(string: str) -> bool:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n\nprint(make_palindrome(jerry))",
    "execution_output": "jerryrrej"
  },
  {
    "id": 54,
    "q_id": "HumanEval/10",
    "code": "def is_palindrome(string: str) -> bool:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n\nprint(make_palindrome(malayalam))",
    "execution_output": "malayalam"
  },
  {
    "id": 55,
    "q_id": "HumanEval/11",
    "code": "def string_xor(a: str, b: str) -> str:\n\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n\nprint(string_xor(111000,101010))",
    "execution_output": "010010"
  },
  {
    "id": 56,
    "q_id": "HumanEval/11",
    "code": "def string_xor(a: str, b: str) -> str:\n\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n\nprint(string_xor(1,1))",
    "execution_output": "0"
  },
  {
    "id": 57,
    "q_id": "HumanEval/11",
    "code": "def string_xor(a: str, b: str) -> str:\n\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n\nprint(string_xor(0101,0000))",
    "execution_output": "0101"
  },
  {
    "id": 58,
    "q_id": "HumanEval/11",
    "code": "def string_xor(a: str, b: str) -> str:\n\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n\nprint(string_xor(000,000))",
    "execution_output": "000"
  },
  {
    "id": 59,
    "q_id": "HumanEval/11",
    "code": "def string_xor(a: str, b: str) -> str:\n\n    return \"\".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n\nprint(string_xor(1111,1111))",
    "execution_output": "0000"
  },
  {
    "id": 60,
    "q_id": "HumanEval/12",
    "code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n\nprint(longest(['x', 'y', 'z']))",
    "execution_output": "x"
  },
  {
    "id": 61,
    "q_id": "HumanEval/12",
    "code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n\nprint(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']))",
    "execution_output": "zzzz"
  },
  {
    "id": 62,
    "q_id": "HumanEval/12",
    "code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n\nprint(longest(['', 'a', 'aa', 'aaa']))",
    "execution_output": "aaa"
  },
  {
    "id": 63,
    "q_id": "HumanEval/12",
    "code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n\nprint(longest(['123456789', '1234', '12345', '123']))",
    "execution_output": "123456789"
  },
  {
    "id": 64,
    "q_id": "HumanEval/12",
    "code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n\nprint(longest(['aa', 'bb', 'cc', 'aaa', 'bb', 'cccc', 'aa', 'aa', 'aaa']))",
    "execution_output": "cccc"
  },
  {
    "id": 65,
    "q_id": "HumanEval/13",
    "code": "def greatest_common_divisor(a: int, b: int) -> int:\n\n    def query_gcd(a: int, b: int) -> int:\n        return a if b == 0 else query_gcd(b, a % b)\n    return query_gcd(a, b)    \n\n\nprint(greatest_common_divisor(3,7))",
    "execution_output": 1
  },
  {
    "id": 66,
    "q_id": "HumanEval/13",
    "code": "def greatest_common_divisor(a: int, b: int) -> int:\n\n    def query_gcd(a: int, b: int) -> int:\n        return a if b == 0 else query_gcd(b, a % b)\n    return query_gcd(a, b)    \n\n\nprint(greatest_common_divisor(10,15))",
    "execution_output": 5
  },
  {
    "id": 67,
    "q_id": "HumanEval/13",
    "code": "def greatest_common_divisor(a: int, b: int) -> int:\n\n    def query_gcd(a: int, b: int) -> int:\n        return a if b == 0 else query_gcd(b, a % b)\n    return query_gcd(a, b)    \n\n\nprint(greatest_common_divisor(144,60))",
    "execution_output": 12
  },
  {
    "id": 68,
    "q_id": "HumanEval/13",
    "code": "def greatest_common_divisor(a: int, b: int) -> int:\n\n    def query_gcd(a: int, b: int) -> int:\n        return a if b == 0 else query_gcd(b, a % b)\n    return query_gcd(a, b)    \n\n\nprint(greatest_common_divisor(98,56))",
    "execution_output": 14
  },
  {
    "id": 69,
    "q_id": "HumanEval/13",
    "code": "def greatest_common_divisor(a: int, b: int) -> int:\n\n    def query_gcd(a: int, b: int) -> int:\n        return a if b == 0 else query_gcd(b, a % b)\n    return query_gcd(a, b)    \n\n\nprint(greatest_common_divisor(540,288))",
    "execution_output": 36
  },
  {
    "id": 70,
    "q_id": "HumanEval/16",
    "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n\nprint(count_distinct_characters(abcde))",
    "execution_output": 5
  },
  {
    "id": 71,
    "q_id": "HumanEval/16",
    "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n\nprint(count_distinct_characters(THISISALONGSTRINGWITHNOSPACES))",
    "execution_output": 14
  },
  {
    "id": 72,
    "q_id": "HumanEval/16",
    "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n\nprint(count_distinct_characters(AbCdE))",
    "execution_output": 5
  },
  {
    "id": 73,
    "q_id": "HumanEval/16",
    "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n\nprint(count_distinct_characters(1,2,3hellhelhelloldloldol1234567890d.hel,lold.. 2gog!))",
    "execution_output": 20
  },
  {
    "id": 74,
    "q_id": "HumanEval/16",
    "code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n\nprint(count_distinct_characters(The quick brcowen fox jumps over the lazy doAbCdEfGg))",
    "execution_output": 27
  },
  {
    "id": 75,
    "q_id": "HumanEval/17",
    "code": "def parse_music(music_string: str) -> List[int]:\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n    \n    if music_string == \"\": return []\n    return list(map(count_beats, music_string.split(\" \")))\n\n\nprint(parse_music(o o o o))",
    "execution_output": [
      4,
      4,
      4,
      4
    ]
  },
  {
    "id": 76,
    "q_id": "HumanEval/17",
    "code": "def parse_music(music_string: str) -> List[int]:\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n    \n    if music_string == \"\": return []\n    return list(map(count_beats, music_string.split(\" \")))\n\n\nprint(parse_music(o| o| .| .| o o o o))",
    "execution_output": [
      2,
      2,
      1,
      1,
      4,
      4,
      4,
      4
    ]
  },
  {
    "id": 77,
    "q_id": "HumanEval/17",
    "code": "def parse_music(music_string: str) -> List[int]:\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n    \n    if music_string == \"\": return []\n    return list(map(count_beats, music_string.split(\" \")))\n\n\nprint(parse_music(o| .| o| .| o o| o o|))",
    "execution_output": [
      2,
      1,
      2,
      1,
      4,
      2,
      4,
      2
    ]
  },
  {
    "id": 78,
    "q_id": "HumanEval/17",
    "code": "def parse_music(music_string: str) -> List[int]:\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n    \n    if music_string == \"\": return []\n    return list(map(count_beats, music_string.split(\" \")))\n\n\nprint(parse_music(o o| o| o|))",
    "execution_output": [
      4,
      2,
      2,
      2
    ]
  },
  {
    "id": 79,
    "q_id": "HumanEval/17",
    "code": "def parse_music(music_string: str) -> List[int]:\n\n    def count_beats(note: str) -> int:\n        if note == \"o\": return 4\n        elif note == \"o|\": return 2\n        elif note == \".|\": return 1\n    \n    if music_string == \"\": return []\n    return list(map(count_beats, music_string.split(\" \")))\n\n\nprint(parse_music(.| .| o| o| o| o| .| .| o| o| o| o| o| o| o o o o))",
    "execution_output": [
      1,
      1,
      2,
      2,
      2,
      2,
      1,
      1,
      2,
      2,
      2,
      2,
      2,
      2,
      4,
      4,
      4,
      4
    ]
  },
  {
    "id": 80,
    "q_id": "HumanEval/18",
    "code": "def how_many_times(string: str, substring: str) -> int:\n\n    occurences = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            occurences += 1\n    return occurences\n\n\nprint(how_many_times(,x))",
    "execution_output": 0
  },
  {
    "id": 81,
    "q_id": "HumanEval/18",
    "code": "def how_many_times(string: str, substring: str) -> int:\n\n    occurences = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            occurences += 1\n    return occurences\n\n\nprint(how_many_times(xyxyxyx,x))",
    "execution_output": 4
  },
  {
    "id": 82,
    "q_id": "HumanEval/18",
    "code": "def how_many_times(string: str, substring: str) -> int:\n\n    occurences = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            occurences += 1\n    return occurences\n\n\nprint(how_many_times(cacacacac,cac))",
    "execution_output": 4
  },
  {
    "id": 83,
    "q_id": "HumanEval/18",
    "code": "def how_many_times(string: str, substring: str) -> int:\n\n    occurences = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            occurences += 1\n    return occurences\n\n\nprint(how_many_times(john doe,john))",
    "execution_output": 1
  },
  {
    "id": 84,
    "q_id": "HumanEval/18",
    "code": "def how_many_times(string: str, substring: str) -> int:\n\n    occurences = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            occurences += 1\n    return occurences\n\n\nprint(how_many_times(ababa,aba))",
    "execution_output": 2
  },
  {
    "id": 85,
    "q_id": "HumanEval/19",
    "code": "def sort_numbers(numbers: str) -> str:\n    \n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\": return \"\"\n    return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))\n\n\nprint(sort_numbers(three five nine))",
    "execution_output": "three five nine"
  },
  {
    "id": 86,
    "q_id": "HumanEval/19",
    "code": "def sort_numbers(numbers: str) -> str:\n    \n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\": return \"\"\n    return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))\n\n\nprint(sort_numbers(four eight two))",
    "execution_output": "two four eight"
  },
  {
    "id": 87,
    "q_id": "HumanEval/19",
    "code": "def sort_numbers(numbers: str) -> str:\n    \n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\": return \"\"\n    return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))\n\n\nprint(sort_numbers(nine zero))",
    "execution_output": "zero nine"
  },
  {
    "id": 88,
    "q_id": "HumanEval/19",
    "code": "def sort_numbers(numbers: str) -> str:\n    \n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\": return \"\"\n    return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))\n\n\nprint(sort_numbers(seven three one))",
    "execution_output": "one three seven"
  },
  {
    "id": 89,
    "q_id": "HumanEval/19",
    "code": "def sort_numbers(numbers: str) -> str:\n    \n    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    if numbers == \"\": return \"\"\n    return \" \".join(sorted(numbers.split(\" \"), key=lambda n: to_int[n]))\n\n\nprint(sort_numbers(two zero nine))",
    "execution_output": "zero two nine"
  },
  {
    "id": 90,
    "q_id": "HumanEval/20",
    "code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n    return min_pair\n\n\nprint(find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))",
    "execution_output": [
      3.9,
      4.0
    ]
  },
  {
    "id": 91,
    "q_id": "HumanEval/20",
    "code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n    return min_pair\n\n\nprint(find_closest_elements([1.0, 2.0, 5.9, 4.0, 5.0]))",
    "execution_output": [
      5.0,
      5.9
    ]
  },
  {
    "id": 92,
    "q_id": "HumanEval/20",
    "code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n    return min_pair\n\n\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))",
    "execution_output": [
      2.0,
      2.2
    ]
  },
  {
    "id": 93,
    "q_id": "HumanEval/20",
    "code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n    return min_pair\n\n\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))",
    "execution_output": [
      2.0,
      2.0
    ]
  },
  {
    "id": 94,
    "q_id": "HumanEval/20",
    "code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    min_pair = None\n    for l, r in zip(numbers[:-1], numbers[1:]):\n        diff = r - l\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (l, r)\n    return min_pair\n\n\nprint(find_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1]))",
    "execution_output": [
      2.2,
      3.1
    ]
  },
  {
    "id": 95,
    "q_id": "HumanEval/21",
    "code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n\n    ma, mi = max(numbers), min(numbers)\n    k = 1 / (ma - mi)\n    return list(map(lambda x: (x - mi) * k, numbers))\n\n\nprint(rescale_to_unit([2.0, 49.9]))",
    "execution_output": [
      0.0,
      1.0
    ]
  },
  {
    "id": 96,
    "q_id": "HumanEval/21",
    "code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n\n    ma, mi = max(numbers), min(numbers)\n    k = 1 / (ma - mi)\n    return list(map(lambda x: (x - mi) * k, numbers))\n\n\nprint(rescale_to_unit([100.0, 49.9]))",
    "execution_output": [
      1.0,
      0.0
    ]
  },
  {
    "id": 97,
    "q_id": "HumanEval/21",
    "code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n\n    ma, mi = max(numbers), min(numbers)\n    k = 1 / (ma - mi)\n    return list(map(lambda x: (x - mi) * k, numbers))\n\n\nprint(rescale_to_unit([0.1, 0.5, 0.9, 0.3, 0.7]))",
    "execution_output": [
      0.0,
      0.5,
      1.0,
      0.24999999999999997,
      0.75
    ]
  },
  {
    "id": 98,
    "q_id": "HumanEval/21",
    "code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n\n    ma, mi = max(numbers), min(numbers)\n    k = 1 / (ma - mi)\n    return list(map(lambda x: (x - mi) * k, numbers))\n\n\nprint(rescale_to_unit([1.5, 2.0, 2.5, 3.0, 3.5, 3.5, 3.4499912778820896]))",
    "execution_output": [
      0.0,
      0.25,
      0.5,
      0.75,
      1.0,
      1.0,
      0.9749956389410448
    ]
  },
  {
    "id": 99,
    "q_id": "HumanEval/21",
    "code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n\n    ma, mi = max(numbers), min(numbers)\n    k = 1 / (ma - mi)\n    return list(map(lambda x: (x - mi) * k, numbers))\n\n\nprint(rescale_to_unit([3.0, 8.0, 2.0]))",
    "execution_output": [
      0.16666666666666666,
      1.0,
      0.0
    ]
  },
  {
    "id": 100,
    "q_id": "HumanEval/22",
    "code": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) == int, values))\n\n\nprint(filter_integers([4, {}, [], 23.2, 9, 'adasd']))",
    "execution_output": [
      4,
      9
    ]
  },
  {
    "id": 101,
    "q_id": "HumanEval/22",
    "code": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) == int, values))\n\n\nprint(filter_integers([2.5, 4.6, 7.8, 'abc', {}, []]))",
    "execution_output": []
  },
  {
    "id": 102,
    "q_id": "HumanEval/22",
    "code": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) == int, values))\n\n\nprint(filter_integers([True, False, None, 0, -10, 'test', [], {}, 3.14]))",
    "execution_output": [
      0,
      -10
    ]
  },
  {
    "id": 103,
    "q_id": "HumanEval/22",
    "code": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) == int, values))\n\n\nprint(filter_integers([1, '2', '3', 4, -5]))",
    "execution_output": [
      1,
      4,
      -5
    ]
  },
  {
    "id": 104,
    "q_id": "HumanEval/22",
    "code": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) == int, values))\n\n\nprint(filter_integers([2.7, 1.5, 1.5]))",
    "execution_output": []
  },
  {
    "id": 105,
    "q_id": "HumanEval/23",
    "code": "def strlen(string: str) -> int:\n    return len(string)\n\n\nprint(strlen(x))",
    "execution_output": 1
  },
  {
    "id": 106,
    "q_id": "HumanEval/23",
    "code": "def strlen(string: str) -> int:\n    return len(string)\n\n\nprint(strlen(Hello, World!))",
    "execution_output": 13
  },
  {
    "id": 107,
    "q_id": "HumanEval/23",
    "code": "def strlen(string: str) -> int:\n    return len(string)\n\n\nprint(strlen(12345))",
    "execution_output": 5
  },
  {
    "id": 108,
    "q_id": "HumanEval/23",
    "code": "def strlen(string: str) -> int:\n    return len(string)\n\n\nprint(strlen( ))",
    "execution_output": 1
  },
  {
    "id": 109,
    "q_id": "HumanEval/23",
    "code": "def strlen(string: str) -> int:\n    return len(string)\n\n\nprint(strlen(Testing testingone\ntwot\nthrThis is a long string that has many characters in itee\nfour\nfive 123))",
    "execution_output": 95
  },
  {
    "id": 110,
    "q_id": "HumanEval/24",
    "code": "def largest_divisor(n: int) -> int:\n\n    for i in range(2, n):\n        if n % i == 0: return n // i\n    return 1\n\n\nprint(largest_divisor(3))",
    "execution_output": 1
  },
  {
    "id": 111,
    "q_id": "HumanEval/24",
    "code": "def largest_divisor(n: int) -> int:\n\n    for i in range(2, n):\n        if n % i == 0: return n // i\n    return 1\n\n\nprint(largest_divisor(7))",
    "execution_output": 1
  },
  {
    "id": 112,
    "q_id": "HumanEval/24",
    "code": "def largest_divisor(n: int) -> int:\n\n    for i in range(2, n):\n        if n % i == 0: return n // i\n    return 1\n\n\nprint(largest_divisor(27))",
    "execution_output": 9
  },
  {
    "id": 113,
    "q_id": "HumanEval/24",
    "code": "def largest_divisor(n: int) -> int:\n\n    for i in range(2, n):\n        if n % i == 0: return n // i\n    return 1\n\n\nprint(largest_divisor(2))",
    "execution_output": 1
  },
  {
    "id": 114,
    "q_id": "HumanEval/24",
    "code": "def largest_divisor(n: int) -> int:\n\n    for i in range(2, n):\n        if n % i == 0: return n // i\n    return 1\n\n\nprint(largest_divisor(101))",
    "execution_output": 1
  },
  {
    "id": 115,
    "q_id": "HumanEval/25",
    "code": "def factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n\nprint(factorize(2))",
    "execution_output": [
      2
    ]
  },
  {
    "id": 116,
    "q_id": "HumanEval/25",
    "code": "def factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n\nprint(factorize(57))",
    "execution_output": [
      3,
      19
    ]
  },
  {
    "id": 117,
    "q_id": "HumanEval/25",
    "code": "def factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n\nprint(factorize(185193))",
    "execution_output": [
      3,
      3,
      3,
      19,
      19,
      19
    ]
  },
  {
    "id": 118,
    "q_id": "HumanEval/25",
    "code": "def factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n\nprint(factorize(1207942))",
    "execution_output": [
      2,
      41,
      14731
    ]
  },
  {
    "id": 119,
    "q_id": "HumanEval/25",
    "code": "def factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n\n\nprint(factorize(52))",
    "execution_output": [
      2,
      2,
      13
    ]
  },
  {
    "id": 120,
    "q_id": "HumanEval/26",
    "code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    num_cnt = dict()\n    for number in numbers:\n        if number not in num_cnt:\n            num_cnt[number] = 0\n        num_cnt[number] += 1\n    return [number for number in numbers if num_cnt[number] == 1]\n\n\nprint(remove_duplicates([1, 2, 3, 4]))",
    "execution_output": [
      1,
      2,
      3,
      4
    ]
  },
  {
    "id": 121,
    "q_id": "HumanEval/26",
    "code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    num_cnt = dict()\n    for number in numbers:\n        if number not in num_cnt:\n            num_cnt[number] = 0\n        num_cnt[number] += 1\n    return [number for number in numbers if num_cnt[number] == 1]\n\n\nprint(remove_duplicates([1, 2, 3, 2, 4, 3, 5]))",
    "execution_output": [
      1,
      4,
      5
    ]
  },
  {
    "id": 122,
    "q_id": "HumanEval/26",
    "code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    num_cnt = dict()\n    for number in numbers:\n        if number not in num_cnt:\n            num_cnt[number] = 0\n        num_cnt[number] += 1\n    return [number for number in numbers if num_cnt[number] == 1]\n\n\nprint(remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4]))",
    "execution_output": []
  },
  {
    "id": 123,
    "q_id": "HumanEval/26",
    "code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    num_cnt = dict()\n    for number in numbers:\n        if number not in num_cnt:\n            num_cnt[number] = 0\n        num_cnt[number] += 1\n    return [number for number in numbers if num_cnt[number] == 1]\n\n\nprint(remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]))",
    "execution_output": [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ]
  },
  {
    "id": 124,
    "q_id": "HumanEval/26",
    "code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    num_cnt = dict()\n    for number in numbers:\n        if number not in num_cnt:\n            num_cnt[number] = 0\n        num_cnt[number] += 1\n    return [number for number in numbers if num_cnt[number] == 1]\n\n\nprint(remove_duplicates([1, 2, 3, 4, 4, 7, 8, 3, 9, 2]))",
    "execution_output": [
      1,
      7,
      8,
      9
    ]
  },
  {
    "id": 125,
    "q_id": "HumanEval/27",
    "code": "def flip_case(string: str) -> str:\n    return \"\".join(map(lambda x: x.swapcase(), string))\n\n\nprint(flip_case(Hello!))",
    "execution_output": "hELLO!"
  },
  {
    "id": 126,
    "q_id": "HumanEval/27",
    "code": "def flip_case(string: str) -> str:\n    return \"\".join(map(lambda x: x.swapcase(), string))\n\n\nprint(flip_case(These violent delights have violent ends))",
    "execution_output": "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"
  },
  {
    "id": 127,
    "q_id": "HumanEval/27",
    "code": "def flip_case(string: str) -> str:\n    return \"\".join(map(lambda x: x.swapcase(), string))\n\n\nprint(flip_case(123abc))",
    "execution_output": "123ABC"
  },
  {
    "id": 128,
    "q_id": "HumanEval/27",
    "code": "def flip_case(string: str) -> str:\n    return \"\".join(map(lambda x: x.swapcase(), string))\n\n\nprint(flip_case(Toggle Me))",
    "execution_output": "tOGGLE mE"
  },
  {
    "id": 129,
    "q_id": "HumanEval/27",
    "code": "def flip_case(string: str) -> str:\n    return \"\".join(map(lambda x: x.swapcase(), string))\n\n\nprint(flip_case(toGGlE e))",
    "execution_output": "TOggLe E"
  },
  {
    "id": 130,
    "q_id": "HumanEval/28",
    "code": "def concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)\n\n\nprint(concatenate(['x', 'y', 'z']))",
    "execution_output": "xyz"
  },
  {
    "id": 131,
    "q_id": "HumanEval/28",
    "code": "def concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)\n\n\nprint(concatenate(['x', 'y', 'z', 'w', 'k']))",
    "execution_output": "xyzwk"
  },
  {
    "id": 132,
    "q_id": "HumanEval/28",
    "code": "def concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)\n\n\nprint(concatenate(['apple', 'banana', 'orange']))",
    "execution_output": "applebananaorange"
  },
  {
    "id": 133,
    "q_id": "HumanEval/28",
    "code": "def concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)\n\n\nprint(concatenate(['python', 'is', 'a', 'great', 'language']))",
    "execution_output": "pythonisagreatlanguage"
  },
  {
    "id": 134,
    "q_id": "HumanEval/28",
    "code": "def concatenate(strings: List[str]) -> str:\n    return \"\".join(strings)\n\n\nprint(concatenate(['apple', 'i456banana', 'orange', 'apple']))",
    "execution_output": "applei456bananaorangeapple"
  },
  {
    "id": 135,
    "q_id": "HumanEval/29",
    "code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\n\nprint(filter_by_prefix([],john))",
    "execution_output": []
  },
  {
    "id": 136,
    "q_id": "HumanEval/29",
    "code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\n\nprint(filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],xxx))",
    "execution_output": [
      "xxx",
      "xxxAAA",
      "xxx"
    ]
  },
  {
    "id": 137,
    "q_id": "HumanEval/29",
    "code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\n\nprint(filter_by_prefix([],))",
    "execution_output": []
  },
  {
    "id": 138,
    "q_id": "HumanEval/29",
    "code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\n\nprint(filter_by_prefix(['abc', 'abcd', 'abcde'],abc))",
    "execution_output": [
      "abc",
      "abcd",
      "abcde"
    ]
  },
  {
    "id": 139,
    "q_id": "HumanEval/29",
    "code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return list(filter(lambda x: x.startswith(prefix), strings))\n\n\nprint(filter_by_prefix(['xyz', 'efg', 'hij'],a))",
    "execution_output": []
  },
  {
    "id": 140,
    "q_id": "HumanEval/30",
    "code": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0, l))\n\n\nprint(get_positive([7, 8, 10, 11, 12, 15, 17, -1]))",
    "execution_output": [
      7,
      8,
      10,
      11,
      12,
      15,
      17
    ]
  },
  {
    "id": 141,
    "q_id": "HumanEval/30",
    "code": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0, l))\n\n\nprint(get_positive([5, 9, -3, -6, 2, 3, 8, 1, 0]))",
    "execution_output": [
      5,
      9,
      2,
      3,
      8,
      1
    ]
  },
  {
    "id": 142,
    "q_id": "HumanEval/30",
    "code": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0, l))\n\n\nprint(get_positive([-2, -4, -6, 0, 2, 4, 6]))",
    "execution_output": [
      2,
      4,
      6
    ]
  },
  {
    "id": 143,
    "q_id": "HumanEval/30",
    "code": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0, l))\n\n\nprint(get_positive([0, 1, 1, 2, -2, 3, -3, 4, -4]))",
    "execution_output": [
      1,
      1,
      2,
      3,
      4
    ]
  },
  {
    "id": 144,
    "q_id": "HumanEval/30",
    "code": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0, l))\n\n\nprint(get_positive([0, -5, -4, -1, 5, 0, -10, 1, -10]))",
    "execution_output": [
      5,
      1
    ]
  },
  {
    "id": 145,
    "q_id": "HumanEval/31",
    "code": "def is_prime(n):\n    if n <= 1: return False\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: n_sqrt += 1\n    for i in range(2, min(n_sqrt + 1, n)):\n        if n % i == 0:\n            return False\n    return True\n\n\nprint(is_prime(6))",
    "execution_output": false
  },
  {
    "id": 146,
    "q_id": "HumanEval/31",
    "code": "def is_prime(n):\n    if n <= 1: return False\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: n_sqrt += 1\n    for i in range(2, min(n_sqrt + 1, n)):\n        if n % i == 0:\n            return False\n    return True\n\n\nprint(is_prime(101))",
    "execution_output": true
  },
  {
    "id": 147,
    "q_id": "HumanEval/31",
    "code": "def is_prime(n):\n    if n <= 1: return False\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: n_sqrt += 1\n    for i in range(2, min(n_sqrt + 1, n)):\n        if n % i == 0:\n            return False\n    return True\n\n\nprint(is_prime(11))",
    "execution_output": true
  },
  {
    "id": 148,
    "q_id": "HumanEval/31",
    "code": "def is_prime(n):\n    if n <= 1: return False\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: n_sqrt += 1\n    for i in range(2, min(n_sqrt + 1, n)):\n        if n % i == 0:\n            return False\n    return True\n\n\nprint(is_prime(13441))",
    "execution_output": true
  },
  {
    "id": 149,
    "q_id": "HumanEval/31",
    "code": "def is_prime(n):\n    if n <= 1: return False\n    n_sqrt = 1\n    while n_sqrt ** 2 < n: n_sqrt += 1\n    for i in range(2, min(n_sqrt + 1, n)):\n        if n % i == 0:\n            return False\n    return True\n\n\nprint(is_prime(61))",
    "execution_output": true
  },
  {
    "id": 150,
    "q_id": "HumanEval/32",
    "code": "def poly(xs: list, x: float):\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    \n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx\n\n    return x\n\n\nprint(find_zero([-10, -2]))",
    "execution_output": -5.0
  },
  {
    "id": 151,
    "q_id": "HumanEval/32",
    "code": "def poly(xs: list, x: float):\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    \n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx\n\n    return x\n\n\nprint(find_zero([-3, -6, -7, 7]))",
    "execution_output": 1.6679422344071086
  },
  {
    "id": 152,
    "q_id": "HumanEval/32",
    "code": "def poly(xs: list, x: float):\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    \n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx\n\n    return x\n\n\nprint(find_zero([8, 3]))",
    "execution_output": -2.6666666666666665
  },
  {
    "id": 153,
    "q_id": "HumanEval/32",
    "code": "def poly(xs: list, x: float):\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    \n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx\n\n    return x\n\n\nprint(find_zero([-10, -8]))",
    "execution_output": -1.25
  },
  {
    "id": 154,
    "q_id": "HumanEval/32",
    "code": "def poly(xs: list, x: float):\n\n    dxs = [xs[i] * i for i in range(1, len(xs))]\n    def func(x):\n        return poly(xs, x)\n    def derivative(x):\n        return poly(dxs, x)\n    \n    x, tol = 0, 1e-5\n    for _ in range(1000):\n        fx = func(x)\n        dfx = derivative(x)\n        if abs(fx) < tol: break\n        x = x - fx / dfx\n\n    return x\n\n\nprint(find_zero([-3, 6, 9, -10]))",
    "execution_output": 0.3763741272657057
  },
  {
    "id": 155,
    "q_id": "HumanEval/33",
    "code": "def sort_third(l: list):\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n    return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_third([1, 2, 3]))",
    "execution_output": [
      1,
      2,
      3
    ]
  },
  {
    "id": 156,
    "q_id": "HumanEval/33",
    "code": "def sort_third(l: list):\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n    return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))",
    "execution_output": [
      1,
      3,
      -5,
      2,
      -3,
      3,
      5,
      0,
      123,
      9,
      -10
    ]
  },
  {
    "id": 157,
    "q_id": "HumanEval/33",
    "code": "def sort_third(l: list):\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n    return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))",
    "execution_output": [
      -10,
      8,
      -12,
      3,
      23,
      2,
      4,
      11,
      12,
      5
    ]
  },
  {
    "id": 158,
    "q_id": "HumanEval/33",
    "code": "def sort_third(l: list):\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n    return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))",
    "execution_output": [
      2,
      6,
      3,
      4,
      8,
      9,
      5
    ]
  },
  {
    "id": 159,
    "q_id": "HumanEval/33",
    "code": "def sort_third(l: list):\n    third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third.sort()\n    return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_third([5, 8, 3, 4, 6, 9, 2]))",
    "execution_output": [
      2,
      8,
      3,
      4,
      6,
      9,
      5
    ]
  },
  {
    "id": 160,
    "q_id": "HumanEval/34",
    "code": "def unique(l: list):\n    return sorted(set(l))\n\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))",
    "execution_output": [
      0,
      2,
      3,
      5,
      9,
      123
    ]
  },
  {
    "id": 161,
    "q_id": "HumanEval/34",
    "code": "def unique(l: list):\n    return sorted(set(l))\n\n\nprint(unique([1, 1, 1, 1]))",
    "execution_output": [
      1
    ]
  },
  {
    "id": 162,
    "q_id": "HumanEval/34",
    "code": "def unique(l: list):\n    return sorted(set(l))\n\n\nprint(unique(['apple', 'banana', 'orange']))",
    "execution_output": [
      "apple",
      "banana",
      "orange"
    ]
  },
  {
    "id": 163,
    "q_id": "HumanEval/34",
    "code": "def unique(l: list):\n    return sorted(set(l))\n\n\nprint(unique(['a', 'b', 'b', 'c', 'dd', 'd']))",
    "execution_output": [
      "a",
      "b",
      "c",
      "d",
      "dd"
    ]
  },
  {
    "id": 164,
    "q_id": "HumanEval/34",
    "code": "def unique(l: list):\n    return sorted(set(l))\n\n\nprint(unique(['orappleange', 'apple', 'banana', 'lQd', 'llQd', 'orange', 'banana', 'banana']))",
    "execution_output": [
      "apple",
      "banana",
      "lQd",
      "llQd",
      "orange",
      "orappleange"
    ]
  },
  {
    "id": 165,
    "q_id": "HumanEval/35",
    "code": "def max_element(l: list):\n    return max(l)\n\n\nprint(max_element([1, 2, 3]))",
    "execution_output": 3
  },
  {
    "id": 166,
    "q_id": "HumanEval/35",
    "code": "def max_element(l: list):\n    return max(l)\n\n\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]))",
    "execution_output": 124
  },
  {
    "id": 167,
    "q_id": "HumanEval/35",
    "code": "def max_element(l: list):\n    return max(l)\n\n\nprint(max_element([-5, 2, 9, 4, 5, 6, 7]))",
    "execution_output": 9
  },
  {
    "id": 168,
    "q_id": "HumanEval/35",
    "code": "def max_element(l: list):\n    return max(l)\n\n\nprint(max_element([49, 49, 47, 47, 47, 49]))",
    "execution_output": 49
  },
  {
    "id": 169,
    "q_id": "HumanEval/35",
    "code": "def max_element(l: list):\n    return max(l)\n\n\nprint(max_element([-5, 2, 48, 9, 8, 6, 6, 7]))",
    "execution_output": 48
  },
  {
    "id": 170,
    "q_id": "HumanEval/36",
    "code": "def fizz_buzz(n: int):\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(list(filter(lambda c: c == \"7\", str(i))))\n    return cnt\n\n\nprint(fizz_buzz(50))",
    "execution_output": 0
  },
  {
    "id": 171,
    "q_id": "HumanEval/36",
    "code": "def fizz_buzz(n: int):\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(list(filter(lambda c: c == \"7\", str(i))))\n    return cnt\n\n\nprint(fizz_buzz(78))",
    "execution_output": 2
  },
  {
    "id": 172,
    "q_id": "HumanEval/36",
    "code": "def fizz_buzz(n: int):\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(list(filter(lambda c: c == \"7\", str(i))))\n    return cnt\n\n\nprint(fizz_buzz(4000))",
    "execution_output": 192
  },
  {
    "id": 173,
    "q_id": "HumanEval/36",
    "code": "def fizz_buzz(n: int):\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(list(filter(lambda c: c == \"7\", str(i))))\n    return cnt\n\n\nprint(fizz_buzz(1))",
    "execution_output": 0
  },
  {
    "id": 174,
    "q_id": "HumanEval/36",
    "code": "def fizz_buzz(n: int):\n    cnt = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            cnt += len(list(filter(lambda c: c == \"7\", str(i))))\n    return cnt\n\n\nprint(fizz_buzz(123452))",
    "execution_output": 9487
  },
  {
    "id": 175,
    "q_id": "HumanEval/37",
    "code": "def sort_even(l: list):\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_even([1, 2, 3]))",
    "execution_output": [
      1,
      2,
      3
    ]
  },
  {
    "id": 176,
    "q_id": "HumanEval/37",
    "code": "def sort_even(l: list):\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))",
    "execution_output": [
      -10,
      3,
      -5,
      2,
      -3,
      3,
      5,
      0,
      9,
      1,
      123
    ]
  },
  {
    "id": 177,
    "q_id": "HumanEval/37",
    "code": "def sort_even(l: list):\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_even([11, 7, 6, 9, 14, -1]))",
    "execution_output": [
      6,
      7,
      11,
      9,
      14,
      -1
    ]
  },
  {
    "id": 178,
    "q_id": "HumanEval/37",
    "code": "def sort_even(l: list):\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_even([3]))",
    "execution_output": [
      3
    ]
  },
  {
    "id": 179,
    "q_id": "HumanEval/37",
    "code": "def sort_even(l: list):\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n\nprint(sort_even([3, 2, 5, 2, 2, 1, 1]))",
    "execution_output": [
      1,
      2,
      2,
      2,
      3,
      1,
      5
    ]
  },
  {
    "id": 180,
    "q_id": "HumanEval/38",
    "code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\nprint(decode_cyclic(uzfplzjfzcltmdly))",
    "execution_output": "fuzzplzjftcllmdy"
  },
  {
    "id": 181,
    "q_id": "HumanEval/38",
    "code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\nprint(decode_cyclic(nzyegaghrzqwrdzxckn))",
    "execution_output": "ynzaegrghwzqzrdkxcn"
  },
  {
    "id": 182,
    "q_id": "HumanEval/38",
    "code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\nprint(decode_cyclic(zxolecqvzyausohgzdod))",
    "execution_output": "ozxclezqvuyahsodgzod"
  },
  {
    "id": 183,
    "q_id": "HumanEval/38",
    "code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\nprint(decode_cyclic(cjhzuelsabstpbq))",
    "execution_output": "hcjezualstbsqpb"
  },
  {
    "id": 184,
    "q_id": "HumanEval/38",
    "code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\nprint(decode_cyclic(lfgmjpqnvzwvbusr))",
    "execution_output": "glfpmjvqnvzwsbur"
  },
  {
    "id": 185,
    "q_id": "HumanEval/39",
    "code": "def prime_fib(n: int):\n\n    import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n\n        return True\n\n    c_prime = 0\n    a, b = 0, 1\n    while c_prime < n:\n        a, b = b, a + b\n        if miller_rabin(b):\n            c_prime += 1\n    return b\n\n\nprint(prime_fib(2))",
    "execution_output": 3
  },
  {
    "id": 186,
    "q_id": "HumanEval/39",
    "code": "def prime_fib(n: int):\n\n    import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n\n        return True\n\n    c_prime = 0\n    a, b = 0, 1\n    while c_prime < n:\n        a, b = b, a + b\n        if miller_rabin(b):\n            c_prime += 1\n    return b\n\n\nprint(prime_fib(3))",
    "execution_output": 5
  },
  {
    "id": 187,
    "q_id": "HumanEval/39",
    "code": "def prime_fib(n: int):\n\n    import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n\n        return True\n\n    c_prime = 0\n    a, b = 0, 1\n    while c_prime < n:\n        a, b = b, a + b\n        if miller_rabin(b):\n            c_prime += 1\n    return b\n\n\nprint(prime_fib(4))",
    "execution_output": 13
  },
  {
    "id": 188,
    "q_id": "HumanEval/39",
    "code": "def prime_fib(n: int):\n\n    import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n\n        return True\n\n    c_prime = 0\n    a, b = 0, 1\n    while c_prime < n:\n        a, b = b, a + b\n        if miller_rabin(b):\n            c_prime += 1\n    return b\n\n\nprint(prime_fib(5))",
    "execution_output": 89
  },
  {
    "id": 189,
    "q_id": "HumanEval/39",
    "code": "def prime_fib(n: int):\n\n    import random\n    def miller_rabin(n, k=10):\n        \"\"\"Test if n is prime using the Miller-Rabin primality test.\"\"\"\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n\n        r = 0\n        d = n - 1\n        while d % 2 == 0:\n            r += 1\n            d //= 2\n\n        for _ in range(k):\n            a = random.randint(2, n - 2)\n            x = pow(a, d, n)\n            if x == 1 or x == n - 1:\n                continue\n            for _ in range(r - 1):\n                x = pow(x, 2, n)\n                if x == n - 1:\n                    break\n            else:\n                return False\n\n        return True\n\n    c_prime = 0\n    a, b = 0, 1\n    while c_prime < n:\n        a, b = b, a + b\n        if miller_rabin(b):\n            c_prime += 1\n    return b\n\n\nprint(prime_fib(6))",
    "execution_output": 233
  },
  {
    "id": 190,
    "q_id": "HumanEval/40",
    "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\nprint(triples_sum_to_zero([1, 3, 5, 0]))",
    "execution_output": false
  },
  {
    "id": 191,
    "q_id": "HumanEval/40",
    "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\nprint(triples_sum_to_zero([1, 3, 5, -1]))",
    "execution_output": false
  },
  {
    "id": 192,
    "q_id": "HumanEval/40",
    "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\nprint(triples_sum_to_zero([1, 3, -2, 1]))",
    "execution_output": true
  },
  {
    "id": 193,
    "q_id": "HumanEval/40",
    "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\nprint(triples_sum_to_zero([1, 2, 3, 7]))",
    "execution_output": false
  },
  {
    "id": 194,
    "q_id": "HumanEval/40",
    "code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\nprint(triples_sum_to_zero([1, 2, 5, 7]))",
    "execution_output": false
  },
  {
    "id": 195,
    "q_id": "HumanEval/41",
    "code": "def car_race_collision(n: int):\n\n    return n ** 2\n\n\nprint(car_race_collision(2))",
    "execution_output": 4
  },
  {
    "id": 196,
    "q_id": "HumanEval/41",
    "code": "def car_race_collision(n: int):\n\n    return n ** 2\n\n\nprint(car_race_collision(3))",
    "execution_output": 9
  },
  {
    "id": 197,
    "q_id": "HumanEval/41",
    "code": "def car_race_collision(n: int):\n\n    return n ** 2\n\n\nprint(car_race_collision(20))",
    "execution_output": 400
  },
  {
    "id": 198,
    "q_id": "HumanEval/41",
    "code": "def car_race_collision(n: int):\n\n    return n ** 2\n\n\nprint(car_race_collision(1))",
    "execution_output": 1
  },
  {
    "id": 199,
    "q_id": "HumanEval/41",
    "code": "def car_race_collision(n: int):\n\n    return n ** 2\n\n\nprint(car_race_collision(84))",
    "execution_output": 7056
  },
  {
    "id": 200,
    "q_id": "HumanEval/42",
    "code": "def incr_list(l: list):\n    return [x + 1 for x in l]\n\n\nprint(incr_list([3, 2, 1]))",
    "execution_output": [
      4,
      3,
      2
    ]
  },
  {
    "id": 201,
    "q_id": "HumanEval/42",
    "code": "def incr_list(l: list):\n    return [x + 1 for x in l]\n\n\nprint(incr_list([5, 2, 5, 2, 3, 3, 9, 0, 123]))",
    "execution_output": [
      6,
      3,
      6,
      3,
      4,
      4,
      10,
      1,
      124
    ]
  },
  {
    "id": 202,
    "q_id": "HumanEval/42",
    "code": "def incr_list(l: list):\n    return [x + 1 for x in l]\n\n\nprint(incr_list([100, 200, 300, 400, 500]))",
    "execution_output": [
      101,
      201,
      301,
      401,
      501
    ]
  },
  {
    "id": 203,
    "q_id": "HumanEval/42",
    "code": "def incr_list(l: list):\n    return [x + 1 for x in l]\n\n\nprint(incr_list([-1, -2, -3, -4, -5]))",
    "execution_output": [
      0,
      -1,
      -2,
      -3,
      -4
    ]
  },
  {
    "id": 204,
    "q_id": "HumanEval/42",
    "code": "def incr_list(l: list):\n    return [x + 1 for x in l]\n\n\nprint(incr_list([2, -1, 500]))",
    "execution_output": [
      3,
      0,
      501
    ]
  },
  {
    "id": 205,
    "q_id": "HumanEval/43",
    "code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False\n\n\nprint(pairs_sum_to_zero([1, 3, 5, 0]))",
    "execution_output": false
  },
  {
    "id": 206,
    "q_id": "HumanEval/43",
    "code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False\n\n\nprint(pairs_sum_to_zero([1, 3, -2, 1]))",
    "execution_output": false
  },
  {
    "id": 207,
    "q_id": "HumanEval/43",
    "code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False\n\n\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))",
    "execution_output": true
  },
  {
    "id": 208,
    "q_id": "HumanEval/43",
    "code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False\n\n\nprint(pairs_sum_to_zero([1]))",
    "execution_output": false
  },
  {
    "id": 209,
    "q_id": "HumanEval/43",
    "code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False\n\n\nprint(pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]))",
    "execution_output": true
  },
  {
    "id": 210,
    "q_id": "HumanEval/44",
    "code": "def change_base(x: int, base: int):\n\n    if x == 0: return \"0\"\n    ret = \"\"\n    while x != 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nprint(change_base(8,3))",
    "execution_output": "22"
  },
  {
    "id": 211,
    "q_id": "HumanEval/44",
    "code": "def change_base(x: int, base: int):\n\n    if x == 0: return \"0\"\n    ret = \"\"\n    while x != 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nprint(change_base(4,5))",
    "execution_output": "4"
  },
  {
    "id": 212,
    "q_id": "HumanEval/44",
    "code": "def change_base(x: int, base: int):\n\n    if x == 0: return \"0\"\n    ret = \"\"\n    while x != 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nprint(change_base(234,2))",
    "execution_output": "11101010"
  },
  {
    "id": 213,
    "q_id": "HumanEval/44",
    "code": "def change_base(x: int, base: int):\n\n    if x == 0: return \"0\"\n    ret = \"\"\n    while x != 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nprint(change_base(15,3))",
    "execution_output": "120"
  },
  {
    "id": 214,
    "q_id": "HumanEval/44",
    "code": "def change_base(x: int, base: int):\n\n    if x == 0: return \"0\"\n    ret = \"\"\n    while x != 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nprint(change_base(35,9))",
    "execution_output": "38"
  },
  {
    "id": 215,
    "q_id": "HumanEval/45",
    "code": "def triangle_area(a, h):\n\n    return a * h / 2\n\n\nprint(triangle_area(5,3))",
    "execution_output": 7.5
  },
  {
    "id": 216,
    "q_id": "HumanEval/45",
    "code": "def triangle_area(a, h):\n\n    return a * h / 2\n\n\nprint(triangle_area(2,2))",
    "execution_output": 2.0
  },
  {
    "id": 217,
    "q_id": "HumanEval/45",
    "code": "def triangle_area(a, h):\n\n    return a * h / 2\n\n\nprint(triangle_area(4,6))",
    "execution_output": 12.0
  },
  {
    "id": 218,
    "q_id": "HumanEval/45",
    "code": "def triangle_area(a, h):\n\n    return a * h / 2\n\n\nprint(triangle_area(7,2))",
    "execution_output": 7.0
  },
  {
    "id": 219,
    "q_id": "HumanEval/45",
    "code": "def triangle_area(a, h):\n\n    return a * h / 2\n\n\nprint(triangle_area(12,5))",
    "execution_output": 30.0
  },
  {
    "id": 220,
    "q_id": "HumanEval/46",
    "code": "def fib4(n: int):\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\nprint(fib4(5))",
    "execution_output": 4
  },
  {
    "id": 221,
    "q_id": "HumanEval/46",
    "code": "def fib4(n: int):\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\nprint(fib4(8))",
    "execution_output": 28
  },
  {
    "id": 222,
    "q_id": "HumanEval/46",
    "code": "def fib4(n: int):\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\nprint(fib4(2))",
    "execution_output": 2
  },
  {
    "id": 223,
    "q_id": "HumanEval/46",
    "code": "def fib4(n: int):\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\nprint(fib4(22))",
    "execution_output": 273282
  },
  {
    "id": 224,
    "q_id": "HumanEval/46",
    "code": "def fib4(n: int):\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\nprint(fib4(494))",
    "execution_output": 91317177225989181792142805001716368412015610701134042001262207066295047759928738498468811275244868827731436642811782620121572547583357444378
  },
  {
    "id": 225,
    "q_id": "HumanEval/47",
    "code": "def median(l: list):\n\n    sorted_l = sorted(l)\n    if len(l) % 2 == 1:\n        return sorted_l[len(l) // 2]\n    else:\n        return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2\n\n\nprint(median([3, 1, 2, 4, 5]))",
    "execution_output": 3
  },
  {
    "id": 226,
    "q_id": "HumanEval/47",
    "code": "def median(l: list):\n\n    sorted_l = sorted(l)\n    if len(l) % 2 == 1:\n        return sorted_l[len(l) // 2]\n    else:\n        return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2\n\n\nprint(median([-10, 4, 6, 1000, 10, 20]))",
    "execution_output": 8.0
  },
  {
    "id": 227,
    "q_id": "HumanEval/47",
    "code": "def median(l: list):\n\n    sorted_l = sorted(l)\n    if len(l) % 2 == 1:\n        return sorted_l[len(l) // 2]\n    else:\n        return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2\n\n\nprint(median([10, 20, 30, 40, 50]))",
    "execution_output": 30
  },
  {
    "id": 228,
    "q_id": "HumanEval/47",
    "code": "def median(l: list):\n\n    sorted_l = sorted(l)\n    if len(l) % 2 == 1:\n        return sorted_l[len(l) // 2]\n    else:\n        return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2\n\n\nprint(median([6, 5]))",
    "execution_output": 5.5
  },
  {
    "id": 229,
    "q_id": "HumanEval/47",
    "code": "def median(l: list):\n\n    sorted_l = sorted(l)\n    if len(l) % 2 == 1:\n        return sorted_l[len(l) // 2]\n    else:\n        return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2\n\n\nprint(median([8, 1, 3, 9, 9, 2, 7]))",
    "execution_output": 7
  },
  {
    "id": 230,
    "q_id": "HumanEval/48",
    "code": "def is_palindrome(text: str):\n    return text == text[::-1]\n\n\nprint(is_palindrome(aba))",
    "execution_output": true
  },
  {
    "id": 231,
    "q_id": "HumanEval/48",
    "code": "def is_palindrome(text: str):\n    return text == text[::-1]\n\n\nprint(is_palindrome(xywyx))",
    "execution_output": true
  },
  {
    "id": 232,
    "q_id": "HumanEval/48",
    "code": "def is_palindrome(text: str):\n    return text == text[::-1]\n\n\nprint(is_palindrome(abca))",
    "execution_output": false
  },
  {
    "id": 233,
    "q_id": "HumanEval/48",
    "code": "def is_palindrome(text: str):\n    return text == text[::-1]\n\n\nprint(is_palindrome(never odd or even))",
    "execution_output": false
  },
  {
    "id": 234,
    "q_id": "HumanEval/48",
    "code": "def is_palindrome(text: str):\n    return text == text[::-1]\n\n\nprint(is_palindrome(abcaabca))",
    "execution_output": false
  },
  {
    "id": 235,
    "q_id": "HumanEval/49",
    "code": "def modp(n: int, p: int):\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = res * x % p\n        x = x * x % p\n        n //= 2\n    return res % p\n\n\nprint(modp(0,101))",
    "execution_output": 1
  },
  {
    "id": 236,
    "q_id": "HumanEval/49",
    "code": "def modp(n: int, p: int):\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = res * x % p\n        x = x * x % p\n        n //= 2\n    return res % p\n\n\nprint(modp(100,101))",
    "execution_output": 1
  },
  {
    "id": 237,
    "q_id": "HumanEval/49",
    "code": "def modp(n: int, p: int):\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = res * x % p\n        x = x * x % p\n        n //= 2\n    return res % p\n\n\nprint(modp(200,113))",
    "execution_output": 16
  },
  {
    "id": 238,
    "q_id": "HumanEval/49",
    "code": "def modp(n: int, p: int):\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = res * x % p\n        x = x * x % p\n        n //= 2\n    return res % p\n\n\nprint(modp(50,20))",
    "execution_output": 4
  },
  {
    "id": 239,
    "q_id": "HumanEval/49",
    "code": "def modp(n: int, p: int):\n\n    res, x = 1, 2\n    while n != 0:\n        if n % 2 == 1:\n            res = res * x % p\n        x = x * x % p\n        n //= 2\n    return res % p\n\n\nprint(modp(21,102))",
    "execution_output": 32
  },
  {
    "id": 240,
    "q_id": "HumanEval/50",
    "code": "def encode_shift(s: str):\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n\nprint(decode_shift(tantywccpjkimslotpzs))",
    "execution_output": "oviotrxxkefdhngjokun"
  },
  {
    "id": 241,
    "q_id": "HumanEval/50",
    "code": "def encode_shift(s: str):\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n\nprint(decode_shift(clknfxdnox))",
    "execution_output": "xgfiasyijs"
  },
  {
    "id": 242,
    "q_id": "HumanEval/50",
    "code": "def encode_shift(s: str):\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n\nprint(decode_shift(dtzqyosaovdbafbg))",
    "execution_output": "youltjnvjqywvawb"
  },
  {
    "id": 243,
    "q_id": "HumanEval/50",
    "code": "def encode_shift(s: str):\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n\nprint(decode_shift(dffjvztknohzf))",
    "execution_output": "yaaequofijcua"
  },
  {
    "id": 244,
    "q_id": "HumanEval/50",
    "code": "def encode_shift(s: str):\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n\nprint(decode_shift(brhkdngfwd))",
    "execution_output": "wmcfyibary"
  },
  {
    "id": 245,
    "q_id": "HumanEval/51",
    "code": "def remove_vowels(text):\n    return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))\n\n\nprint(remove_vowels(fedcba))",
    "execution_output": "fdcb"
  },
  {
    "id": 246,
    "q_id": "HumanEval/51",
    "code": "def remove_vowels(text):\n    return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))\n\n\nprint(remove_vowels(eeeee))",
    "execution_output": ""
  },
  {
    "id": 247,
    "q_id": "HumanEval/51",
    "code": "def remove_vowels(text):\n    return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))\n\n\nprint(remove_vowels(acBAA))",
    "execution_output": "cB"
  },
  {
    "id": 248,
    "q_id": "HumanEval/51",
    "code": "def remove_vowels(text):\n    return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))\n\n\nprint(remove_vowels(The quick brown fox jumps over the lazy dog.))",
    "execution_output": "Th qck brwn fx jmps vr th lzy dg."
  },
  {
    "id": 249,
    "q_id": "HumanEval/51",
    "code": "def remove_vowels(text):\n    return \"\".join(list(filter(lambda ch: ch not in \"aeiouAEIOU\", text)))\n\n\nprint(remove_vowels(This is ahellhellooi am using python Test!))",
    "execution_output": "Ths s hllhll m sng pythn Tst!"
  },
  {
    "id": 250,
    "q_id": "HumanEval/52",
    "code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n\nprint(below_threshold([1, 2, 4, 10],100))",
    "execution_output": true
  },
  {
    "id": 251,
    "q_id": "HumanEval/52",
    "code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n\nprint(below_threshold([1, 20, 4, 10],5))",
    "execution_output": false
  },
  {
    "id": 252,
    "q_id": "HumanEval/52",
    "code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n\nprint(below_threshold([1, 20, 4, 10],21))",
    "execution_output": true
  },
  {
    "id": 253,
    "q_id": "HumanEval/52",
    "code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n\nprint(below_threshold([1, 20, 4, 10],22))",
    "execution_output": true
  },
  {
    "id": 254,
    "q_id": "HumanEval/52",
    "code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n\n\nprint(below_threshold([1, 8, 4, 10],11))",
    "execution_output": true
  },
  {
    "id": 255,
    "q_id": "HumanEval/53",
    "code": "def add(x: int, y: int):\n    return x + y\n\n\nprint(add(0,1))",
    "execution_output": 1
  },
  {
    "id": 256,
    "q_id": "HumanEval/53",
    "code": "def add(x: int, y: int):\n    return x + y\n\n\nprint(add(1,0))",
    "execution_output": 1
  },
  {
    "id": 257,
    "q_id": "HumanEval/53",
    "code": "def add(x: int, y: int):\n    return x + y\n\n\nprint(add(2,3))",
    "execution_output": 5
  },
  {
    "id": 258,
    "q_id": "HumanEval/53",
    "code": "def add(x: int, y: int):\n    return x + y\n\n\nprint(add(5,7))",
    "execution_output": 12
  },
  {
    "id": 259,
    "q_id": "HumanEval/53",
    "code": "def add(x: int, y: int):\n    return x + y\n\n\nprint(add(7,5))",
    "execution_output": 12
  },
  {
    "id": 260,
    "q_id": "HumanEval/54",
    "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\n\nprint(same_chars(eabcdzzzz,dddzzzzzzzddeddabc))",
    "execution_output": true
  },
  {
    "id": 261,
    "q_id": "HumanEval/54",
    "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\n\nprint(same_chars(eabcd,dddddddabc))",
    "execution_output": false
  },
  {
    "id": 262,
    "q_id": "HumanEval/54",
    "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\n\nprint(same_chars(eabcdzzzz,dddzzzzzzzddddabc))",
    "execution_output": false
  },
  {
    "id": 263,
    "q_id": "HumanEval/54",
    "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\n\nprint(same_chars(abc,def))",
    "execution_output": false
  },
  {
    "id": 264,
    "q_id": "HumanEval/54",
    "code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\n\nprint(same_chars(abcdefg,gfedcba))",
    "execution_output": true
  },
  {
    "id": 265,
    "q_id": "HumanEval/55",
    "code": "def fib(n: int):\n\n    if n == 0: return 0\n    if n <= 2: return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b\n\n\nprint(fib(0))",
    "execution_output": 0
  },
  {
    "id": 266,
    "q_id": "HumanEval/55",
    "code": "def fib(n: int):\n\n    if n == 0: return 0\n    if n <= 2: return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b\n\n\nprint(fib(False))",
    "execution_output": 0
  },
  {
    "id": 267,
    "q_id": "HumanEval/55",
    "code": "def fib(n: int):\n\n    if n == 0: return 0\n    if n <= 2: return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b\n\n\nprint(fib(10))",
    "execution_output": 55
  },
  {
    "id": 268,
    "q_id": "HumanEval/55",
    "code": "def fib(n: int):\n\n    if n == 0: return 0\n    if n <= 2: return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b\n\n\nprint(fib(1))",
    "execution_output": 1
  },
  {
    "id": 269,
    "q_id": "HumanEval/55",
    "code": "def fib(n: int):\n\n    if n == 0: return 0\n    if n <= 2: return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b, = b, a + b\n    return b\n\n\nprint(fib(17))",
    "execution_output": 1597
  },
  {
    "id": 270,
    "q_id": "HumanEval/56",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing(<>))",
    "execution_output": true
  },
  {
    "id": 271,
    "q_id": "HumanEval/56",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing(<><><<<><><>><>><<><><<>>>))",
    "execution_output": true
  },
  {
    "id": 272,
    "q_id": "HumanEval/56",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing(<))",
    "execution_output": false
  },
  {
    "id": 273,
    "q_id": "HumanEval/56",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing(<><><<><>><>><<>))",
    "execution_output": false
  },
  {
    "id": 274,
    "q_id": "HumanEval/56",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing(><))",
    "execution_output": false
  },
  {
    "id": 275,
    "q_id": "HumanEval/57",
    "code": "def monotonic(l: list):\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n\nprint(monotonic([1, 2, 4, 10]))",
    "execution_output": true
  },
  {
    "id": 276,
    "q_id": "HumanEval/57",
    "code": "def monotonic(l: list):\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n\nprint(monotonic([1, 20, 4, 10]))",
    "execution_output": false
  },
  {
    "id": 277,
    "q_id": "HumanEval/57",
    "code": "def monotonic(l: list):\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n\nprint(monotonic([5, 1, 1, -7, 1, 5]))",
    "execution_output": false
  },
  {
    "id": 278,
    "q_id": "HumanEval/57",
    "code": "def monotonic(l: list):\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n\nprint(monotonic([2, 1, 2]))",
    "execution_output": false
  },
  {
    "id": 279,
    "q_id": "HumanEval/57",
    "code": "def monotonic(l: list):\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n\nprint(monotonic([-5, -9, -11, -11]))",
    "execution_output": true
  },
  {
    "id": 280,
    "q_id": "HumanEval/58",
    "code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))\n\n\nprint(common([1, 4, 3, 34, 653, 2, 5],[5, 7, 1, 5, 9, 653, 121]))",
    "execution_output": [
      1,
      5,
      653
    ]
  },
  {
    "id": 281,
    "q_id": "HumanEval/58",
    "code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))\n\n\nprint(common([4, 3, 2, 8],[]))",
    "execution_output": []
  },
  {
    "id": 282,
    "q_id": "HumanEval/58",
    "code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))\n\n\nprint(common([1, 2, 3],[1, 2, 3]))",
    "execution_output": [
      1,
      2,
      3
    ]
  },
  {
    "id": 283,
    "q_id": "HumanEval/58",
    "code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))\n\n\nprint(common([1, 1, 2, 2, 3, 3],[2, 2, 3, 3, 4, 4]))",
    "execution_output": [
      2,
      3
    ]
  },
  {
    "id": 284,
    "q_id": "HumanEval/58",
    "code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))\n\n\nprint(common([1, 2, 3, 4, 5],[6, 7, 8, 9]))",
    "execution_output": []
  },
  {
    "id": 285,
    "q_id": "HumanEval/59",
    "code": "def largest_prime_factor(n: int):\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0:\n            return i\n\n\nprint(largest_prime_factor(15))",
    "execution_output": 5
  },
  {
    "id": 286,
    "q_id": "HumanEval/59",
    "code": "def largest_prime_factor(n: int):\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0:\n            return i\n\n\nprint(largest_prime_factor(13195))",
    "execution_output": 29
  },
  {
    "id": 287,
    "q_id": "HumanEval/59",
    "code": "def largest_prime_factor(n: int):\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0:\n            return i\n\n\nprint(largest_prime_factor(256))",
    "execution_output": 2
  },
  {
    "id": 288,
    "q_id": "HumanEval/59",
    "code": "def largest_prime_factor(n: int):\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0:\n            return i\n\n\nprint(largest_prime_factor(4096))",
    "execution_output": 2
  },
  {
    "id": 289,
    "q_id": "HumanEval/59",
    "code": "def largest_prime_factor(n: int):\n\n    isprime = [True] * (n + 1)\n    for i in range(2, n + 1):\n        if isprime[i]:\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    for i in range(n - 1, 0, -1):\n        if isprime[i] and n % i == 0:\n            return i\n\n\nprint(largest_prime_factor(86))",
    "execution_output": 43
  },
  {
    "id": 290,
    "q_id": "HumanEval/60",
    "code": "def sum_to_n(n: int):\n\n    return (n + 1) * n // 2\n\n\nprint(sum_to_n(1))",
    "execution_output": 1
  },
  {
    "id": 291,
    "q_id": "HumanEval/60",
    "code": "def sum_to_n(n: int):\n\n    return (n + 1) * n // 2\n\n\nprint(sum_to_n(30))",
    "execution_output": 465
  },
  {
    "id": 292,
    "q_id": "HumanEval/60",
    "code": "def sum_to_n(n: int):\n\n    return (n + 1) * n // 2\n\n\nprint(sum_to_n(2))",
    "execution_output": 3
  },
  {
    "id": 293,
    "q_id": "HumanEval/60",
    "code": "def sum_to_n(n: int):\n\n    return (n + 1) * n // 2\n\n\nprint(sum_to_n(25))",
    "execution_output": 325
  },
  {
    "id": 294,
    "q_id": "HumanEval/60",
    "code": "def sum_to_n(n: int):\n\n    return (n + 1) * n // 2\n\n\nprint(sum_to_n(45))",
    "execution_output": 1035
  },
  {
    "id": 295,
    "q_id": "HumanEval/61",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing()(()))",
    "execution_output": false
  },
  {
    "id": 296,
    "q_id": "HumanEval/61",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing(())",
    "execution_output": false
  },
  {
    "id": 297,
    "q_id": "HumanEval/61",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing(()()(()())()))()))",
    "execution_output": false
  },
  {
    "id": 298,
    "q_id": "HumanEval/61",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing(()()()()()))",
    "execution_output": true
  },
  {
    "id": 299,
    "q_id": "HumanEval/61",
    "code": "def correct_bracketing(brackets: str):\n\n    cnt = 0\n    for x in brackets:\n        if x == \"(\": cnt += 1\n        if x == \")\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n\nprint(correct_bracketing(((())))())",
    "execution_output": false
  },
  {
    "id": 300,
    "q_id": "HumanEval/62",
    "code": "def derivative(xs: list):\n\n    return [xs[i] * i for i in range(1, len(xs))]\n\n\nprint(derivative([3, 1, 2, 4, 5]))",
    "execution_output": [
      1,
      4,
      12,
      20
    ]
  },
  {
    "id": 301,
    "q_id": "HumanEval/62",
    "code": "def derivative(xs: list):\n\n    return [xs[i] * i for i in range(1, len(xs))]\n\n\nprint(derivative([1, 2, 3]))",
    "execution_output": [
      2,
      6
    ]
  },
  {
    "id": 302,
    "q_id": "HumanEval/62",
    "code": "def derivative(xs: list):\n\n    return [xs[i] * i for i in range(1, len(xs))]\n\n\nprint(derivative([1]))",
    "execution_output": []
  },
  {
    "id": 303,
    "q_id": "HumanEval/62",
    "code": "def derivative(xs: list):\n\n    return [xs[i] * i for i in range(1, len(xs))]\n\n\nprint(derivative([0, 0, 0, 0, 0, 5]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      25
    ]
  },
  {
    "id": 304,
    "q_id": "HumanEval/62",
    "code": "def derivative(xs: list):\n\n    return [xs[i] * i for i in range(1, len(xs))]\n\n\nprint(derivative([1, 0, 0, 0, 0, 0, 0]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 305,
    "q_id": "HumanEval/63",
    "code": "def fibfib(n: int):\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n\nprint(fibfib(2))",
    "execution_output": 1
  },
  {
    "id": 306,
    "q_id": "HumanEval/63",
    "code": "def fibfib(n: int):\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n\nprint(fibfib(1))",
    "execution_output": 0
  },
  {
    "id": 307,
    "q_id": "HumanEval/63",
    "code": "def fibfib(n: int):\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n\nprint(fibfib(5))",
    "execution_output": 4
  },
  {
    "id": 308,
    "q_id": "HumanEval/63",
    "code": "def fibfib(n: int):\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n\nprint(fibfib(0))",
    "execution_output": 0
  },
  {
    "id": 309,
    "q_id": "HumanEval/63",
    "code": "def fibfib(n: int):\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n\n\nprint(fibfib(False))",
    "execution_output": 0
  },
  {
    "id": 310,
    "q_id": "HumanEval/64",
    "code": "def vowels_count(s):\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n\nprint(vowels_count(abcde))",
    "execution_output": 2
  },
  {
    "id": 311,
    "q_id": "HumanEval/64",
    "code": "def vowels_count(s):\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n\nprint(vowels_count(Alone))",
    "execution_output": 3
  },
  {
    "id": 312,
    "q_id": "HumanEval/64",
    "code": "def vowels_count(s):\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n\nprint(vowels_count(key))",
    "execution_output": 2
  },
  {
    "id": 313,
    "q_id": "HumanEval/64",
    "code": "def vowels_count(s):\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n\nprint(vowels_count(bye))",
    "execution_output": 1
  },
  {
    "id": 314,
    "q_id": "HumanEval/64",
    "code": "def vowels_count(s):\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n\nprint(vowels_count(keY))",
    "execution_output": 2
  },
  {
    "id": 315,
    "q_id": "HumanEval/65",
    "code": "def circular_shift(x, shift):\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\nprint(circular_shift(100,2))",
    "execution_output": "001"
  },
  {
    "id": 316,
    "q_id": "HumanEval/65",
    "code": "def circular_shift(x, shift):\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\nprint(circular_shift(12,1))",
    "execution_output": "21"
  },
  {
    "id": 317,
    "q_id": "HumanEval/65",
    "code": "def circular_shift(x, shift):\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\nprint(circular_shift(789456123,10))",
    "execution_output": "321654987"
  },
  {
    "id": 318,
    "q_id": "HumanEval/65",
    "code": "def circular_shift(x, shift):\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\nprint(circular_shift(500,4))",
    "execution_output": "005"
  },
  {
    "id": 319,
    "q_id": "HumanEval/65",
    "code": "def circular_shift(x, shift):\n\n    s = str(x)\n    if shift > len(s): return s[::-1]\n    shift %= len(s)\n    if shift == 0:\n        return s\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n\n\nprint(circular_shift(345,1))",
    "execution_output": "534"
  },
  {
    "id": 320,
    "q_id": "HumanEval/66",
    "code": "def digitSum(s):\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n\nprint(digitSum(abAB))",
    "execution_output": 131
  },
  {
    "id": 321,
    "q_id": "HumanEval/66",
    "code": "def digitSum(s):\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n\nprint(digitSum(abcCd))",
    "execution_output": 67
  },
  {
    "id": 322,
    "q_id": "HumanEval/66",
    "code": "def digitSum(s):\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n\nprint(digitSum(helloE))",
    "execution_output": 69
  },
  {
    "id": 323,
    "q_id": "HumanEval/66",
    "code": "def digitSum(s):\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n\nprint(digitSum(woArBld))",
    "execution_output": 131
  },
  {
    "id": 324,
    "q_id": "HumanEval/66",
    "code": "def digitSum(s):\n    return sum([ord(ch) for ch in s if ch.isupper()])\n\n\nprint(digitSum(123))",
    "execution_output": 0
  },
  {
    "id": 325,
    "q_id": "HumanEval/67",
    "code": "def fruit_distribution(s,n):\n\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n - c1 - c2\n\n\nprint(fruit_distribution(0 apples and 1 oranges,3))",
    "execution_output": 2
  },
  {
    "id": 326,
    "q_id": "HumanEval/67",
    "code": "def fruit_distribution(s,n):\n\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n - c1 - c2\n\n\nprint(fruit_distribution(2 apples and 3 oranges,5))",
    "execution_output": 0
  },
  {
    "id": 327,
    "q_id": "HumanEval/67",
    "code": "def fruit_distribution(s,n):\n\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n - c1 - c2\n\n\nprint(fruit_distribution(3 apples and 4 oranges,9))",
    "execution_output": 2
  },
  {
    "id": 328,
    "q_id": "HumanEval/67",
    "code": "def fruit_distribution(s,n):\n\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n - c1 - c2\n\n\nprint(fruit_distribution(0 apples and 0 oranges,10))",
    "execution_output": 10
  },
  {
    "id": 329,
    "q_id": "HumanEval/67",
    "code": "def fruit_distribution(s,n):\n\n    words = s.split(\" \")\n    c1, c2 = int(words[0]), int(words[3])\n    assert n - c1 - c2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    \n    return n - c1 - c2\n\n\nprint(fruit_distribution(0 apples and 1 oranges,1))",
    "execution_output": 0
  },
  {
    "id": 330,
    "q_id": "HumanEval/68",
    "code": "def pluck(arr):\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]\n\n\nprint(pluck([4, 2, 3]))",
    "execution_output": [
      2,
      1
    ]
  },
  {
    "id": 331,
    "q_id": "HumanEval/68",
    "code": "def pluck(arr):\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]\n\n\nprint(pluck([5, 0, 3, 0, 4, 2]))",
    "execution_output": [
      0,
      1
    ]
  },
  {
    "id": 332,
    "q_id": "HumanEval/68",
    "code": "def pluck(arr):\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]\n\n\nprint(pluck([7, 9, 1, 5, 3, 11, 13, 15, 17, 19, 21, 23, 25, 27, 13, 29, 31, 33, 34, 37, 39, 4, 2]))",
    "execution_output": [
      2,
      22
    ]
  },
  {
    "id": 333,
    "q_id": "HumanEval/68",
    "code": "def pluck(arr):\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]\n\n\nprint(pluck([10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 21, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 1, 10000, 0, 1, 10000]))",
    "execution_output": [
      0,
      64
    ]
  },
  {
    "id": 334,
    "q_id": "HumanEval/68",
    "code": "def pluck(arr):\n\n    if all(val % 2 == 1 for val in arr): return []\n    min_even = min(filter(lambda x: x % 2 == 0, arr))\n    for i in range(len(arr)):\n        if arr[i] == min_even:\n            return [min_even, i]\n\n\nprint(pluck([1, 4, 7, 9, 1, 4]))",
    "execution_output": [
      4,
      1
    ]
  },
  {
    "id": 335,
    "q_id": "HumanEval/69",
    "code": "def search(lst):\n\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    ans = -1\n    for num, cnt in count.items():\n        if cnt >= num:\n            ans = max(ans, num)\n    return ans\n\n\nprint(search([5, 5, 5, 5, 1]))",
    "execution_output": 1
  },
  {
    "id": 336,
    "q_id": "HumanEval/69",
    "code": "def search(lst):\n\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    ans = -1\n    for num, cnt in count.items():\n        if cnt >= num:\n            ans = max(ans, num)\n    return ans\n\n\nprint(search([4, 1, 4, 1, 4, 4]))",
    "execution_output": 4
  },
  {
    "id": 337,
    "q_id": "HumanEval/69",
    "code": "def search(lst):\n\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    ans = -1\n    for num, cnt in count.items():\n        if cnt >= num:\n            ans = max(ans, num)\n    return ans\n\n\nprint(search([3, 3]))",
    "execution_output": -1
  },
  {
    "id": 338,
    "q_id": "HumanEval/69",
    "code": "def search(lst):\n\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    ans = -1\n    for num, cnt in count.items():\n        if cnt >= num:\n            ans = max(ans, num)\n    return ans\n\n\nprint(search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]))",
    "execution_output": 1
  },
  {
    "id": 339,
    "q_id": "HumanEval/69",
    "code": "def search(lst):\n\n    count = dict()\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    ans = -1\n    for num, cnt in count.items():\n        if cnt >= num:\n            ans = max(ans, num)\n    return ans\n\n\nprint(search([3, 2, 8, 2]))",
    "execution_output": 2
  },
  {
    "id": 340,
    "q_id": "HumanEval/70",
    "code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j: ans.append(sorted_list[i])\n    return ans\n\n\nprint(strange_sort_list([1, 2, 3, 4]))",
    "execution_output": [
      1,
      4,
      2,
      3
    ]
  },
  {
    "id": 341,
    "q_id": "HumanEval/70",
    "code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j: ans.append(sorted_list[i])\n    return ans\n\n\nprint(strange_sort_list([10, 9, 8, 7, 6, 5]))",
    "execution_output": [
      5,
      10,
      6,
      9,
      7,
      8
    ]
  },
  {
    "id": 342,
    "q_id": "HumanEval/70",
    "code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j: ans.append(sorted_list[i])\n    return ans\n\n\nprint(strange_sort_list([2, 4, 6, 8, 10, 12]))",
    "execution_output": [
      2,
      12,
      4,
      10,
      6,
      8
    ]
  },
  {
    "id": 343,
    "q_id": "HumanEval/70",
    "code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j: ans.append(sorted_list[i])\n    return ans\n\n\nprint(strange_sort_list([1, 3, 5, 2, 4, 6]))",
    "execution_output": [
      1,
      6,
      2,
      5,
      3,
      4
    ]
  },
  {
    "id": 344,
    "q_id": "HumanEval/70",
    "code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    ans, i, j = [], 0, len(sorted_list) - 1\n    while i < j:\n        ans.append(sorted_list[i])\n        ans.append(sorted_list[j])\n        i += 1\n        j -= 1\n    if i == j: ans.append(sorted_list[i])\n    return ans\n\n\nprint(strange_sort_list([3]))",
    "execution_output": [
      3
    ]
  },
  {
    "id": 345,
    "q_id": "HumanEval/71",
    "code": "def triangle_area(a, b, c):\n\n    if a + b <= c or a + c <= b or b + c <= a: return -1\n    p = (a + b + c) / 2\n    return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n\n\nprint(triangle_area(1,2,10))",
    "execution_output": -1
  },
  {
    "id": 346,
    "q_id": "HumanEval/71",
    "code": "def triangle_area(a, b, c):\n\n    if a + b <= c or a + c <= b or b + c <= a: return -1\n    p = (a + b + c) / 2\n    return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n\n\nprint(triangle_area(4,8,5))",
    "execution_output": 8.18
  },
  {
    "id": 347,
    "q_id": "HumanEval/71",
    "code": "def triangle_area(a, b, c):\n\n    if a + b <= c or a + c <= b or b + c <= a: return -1\n    p = (a + b + c) / 2\n    return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n\n\nprint(triangle_area(2,2,2))",
    "execution_output": 1.73
  },
  {
    "id": 348,
    "q_id": "HumanEval/71",
    "code": "def triangle_area(a, b, c):\n\n    if a + b <= c or a + c <= b or b + c <= a: return -1\n    p = (a + b + c) / 2\n    return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n\n\nprint(triangle_area(1,2,3))",
    "execution_output": -1
  },
  {
    "id": 349,
    "q_id": "HumanEval/71",
    "code": "def triangle_area(a, b, c):\n\n    if a + b <= c or a + c <= b or b + c <= a: return -1\n    p = (a + b + c) / 2\n    return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n\n\nprint(triangle_area(10,5,7))",
    "execution_output": 16.25
  },
  {
    "id": 350,
    "q_id": "HumanEval/72",
    "code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w\n\n\nprint(will_it_fly([3, 2, 3],9))",
    "execution_output": true
  },
  {
    "id": 351,
    "q_id": "HumanEval/72",
    "code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w\n\n\nprint(will_it_fly([1, 2],5))",
    "execution_output": false
  },
  {
    "id": 352,
    "q_id": "HumanEval/72",
    "code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w\n\n\nprint(will_it_fly([3],5))",
    "execution_output": true
  },
  {
    "id": 353,
    "q_id": "HumanEval/72",
    "code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w\n\n\nprint(will_it_fly([3, 2, 3],1))",
    "execution_output": false
  },
  {
    "id": 354,
    "q_id": "HumanEval/72",
    "code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w\n\n\nprint(will_it_fly([1, 2, 3],6))",
    "execution_output": false
  },
  {
    "id": 355,
    "q_id": "HumanEval/73",
    "code": "def smallest_change(arr):\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt\n\n\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))",
    "execution_output": 4
  },
  {
    "id": 356,
    "q_id": "HumanEval/73",
    "code": "def smallest_change(arr):\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt\n\n\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))",
    "execution_output": 1
  },
  {
    "id": 357,
    "q_id": "HumanEval/73",
    "code": "def smallest_change(arr):\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt\n\n\nprint(smallest_change([1, 4, 2]))",
    "execution_output": 1
  },
  {
    "id": 358,
    "q_id": "HumanEval/73",
    "code": "def smallest_change(arr):\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt\n\n\nprint(smallest_change([1, 4, 4, 2]))",
    "execution_output": 1
  },
  {
    "id": 359,
    "q_id": "HumanEval/73",
    "code": "def smallest_change(arr):\n    arr_reversed, cnt = arr[::-1], 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr_reversed[i]:\n            cnt += 1\n    return cnt\n\n\nprint(smallest_change([1, 2, 3, 2, 1]))",
    "execution_output": 0
  },
  {
    "id": 360,
    "q_id": "HumanEval/74",
    "code": "def total_match(lst1, lst2):\n    c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))\n    return lst1 if c1 <= c2 else lst2\n\n\nprint(total_match([],[]))",
    "execution_output": []
  },
  {
    "id": 361,
    "q_id": "HumanEval/74",
    "code": "def total_match(lst1, lst2):\n    c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))\n    return lst1 if c1 <= c2 else lst2\n\n\nprint(total_match(['hi', 'admin'],['hi', 'hi', 'admin', 'project']))",
    "execution_output": [
      "hi",
      "admin"
    ]
  },
  {
    "id": 362,
    "q_id": "HumanEval/74",
    "code": "def total_match(lst1, lst2):\n    c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))\n    return lst1 if c1 <= c2 else lst2\n\n\nprint(total_match(['4'],['1', '2', '3', '4', '5']))",
    "execution_output": [
      "4"
    ]
  },
  {
    "id": 363,
    "q_id": "HumanEval/74",
    "code": "def total_match(lst1, lst2):\n    c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))\n    return lst1 if c1 <= c2 else lst2\n\n\nprint(total_match(['hi', 'admin'],['hI', 'hi', 'hii']))",
    "execution_output": [
      "hi",
      "admin"
    ]
  },
  {
    "id": 364,
    "q_id": "HumanEval/74",
    "code": "def total_match(lst1, lst2):\n    c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))\n    return lst1 if c1 <= c2 else lst2\n\n\nprint(total_match(['this'],[]))",
    "execution_output": []
  },
  {
    "id": 365,
    "q_id": "HumanEval/75",
    "code": "def is_multiply_prime(a):\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3\n\n\nprint(is_multiply_prime(30))",
    "execution_output": true
  },
  {
    "id": 366,
    "q_id": "HumanEval/75",
    "code": "def is_multiply_prime(a):\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3\n\n\nprint(is_multiply_prime(8))",
    "execution_output": true
  },
  {
    "id": 367,
    "q_id": "HumanEval/75",
    "code": "def is_multiply_prime(a):\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3\n\n\nprint(is_multiply_prime(49))",
    "execution_output": false
  },
  {
    "id": 368,
    "q_id": "HumanEval/75",
    "code": "def is_multiply_prime(a):\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3\n\n\nprint(is_multiply_prime(90))",
    "execution_output": false
  },
  {
    "id": 369,
    "q_id": "HumanEval/75",
    "code": "def is_multiply_prime(a):\n    if a <= 1: return False\n    isprime = [True] * (a + 1)\n    for i in range(2, a + 1):\n        if isprime[i]:\n            for j in range(i + i, a + 1, i):\n                isprime[j] = False\n    cnt, tmp = 0, a\n    for i in range(2, a + 1):\n        while isprime[i] and tmp % i == 0:\n            tmp //= i\n            cnt += 1\n    return cnt == 3\n\n\nprint(is_multiply_prime(25))",
    "execution_output": false
  },
  {
    "id": 370,
    "q_id": "HumanEval/76",
    "code": "def is_simple_power(x, n):\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False\n\n\nprint(is_simple_power(16,2))",
    "execution_output": true
  },
  {
    "id": 371,
    "q_id": "HumanEval/76",
    "code": "def is_simple_power(x, n):\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False\n\n\nprint(is_simple_power(143214,16))",
    "execution_output": false
  },
  {
    "id": 372,
    "q_id": "HumanEval/76",
    "code": "def is_simple_power(x, n):\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False\n\n\nprint(is_simple_power(4,2))",
    "execution_output": true
  },
  {
    "id": 373,
    "q_id": "HumanEval/76",
    "code": "def is_simple_power(x, n):\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False\n\n\nprint(is_simple_power(9,3))",
    "execution_output": true
  },
  {
    "id": 374,
    "q_id": "HumanEval/76",
    "code": "def is_simple_power(x, n):\n    if x == 1: return True\n    if n == 0: return x == 0\n    if n == 1: return x == 1\n    if n == -1: return abs(x) == 1\n    p = n\n    while abs(p) <= abs(x):\n        if p == x: return True\n        p = p * n\n    return False\n\n\nprint(is_simple_power(16,4))",
    "execution_output": true
  },
  {
    "id": 375,
    "q_id": "HumanEval/77",
    "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n\nprint(iscube(1))",
    "execution_output": true
  },
  {
    "id": 376,
    "q_id": "HumanEval/77",
    "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n\nprint(iscube(64))",
    "execution_output": true
  },
  {
    "id": 377,
    "q_id": "HumanEval/77",
    "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n\nprint(iscube(0))",
    "execution_output": true
  },
  {
    "id": 378,
    "q_id": "HumanEval/77",
    "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n\nprint(iscube(2))",
    "execution_output": false
  },
  {
    "id": 379,
    "q_id": "HumanEval/77",
    "code": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n\n\nprint(iscube(-13824))",
    "execution_output": true
  },
  {
    "id": 380,
    "q_id": "HumanEval/78",
    "code": "def hex_key(num):\n    \n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n\n\nprint(hex_key(AB))",
    "execution_output": 1
  },
  {
    "id": 381,
    "q_id": "HumanEval/78",
    "code": "def hex_key(num):\n    \n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n\n\nprint(hex_key(1077E))",
    "execution_output": 2
  },
  {
    "id": 382,
    "q_id": "HumanEval/78",
    "code": "def hex_key(num):\n    \n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n\n\nprint(hex_key(123456789ABCDEF0))",
    "execution_output": 6
  },
  {
    "id": 383,
    "q_id": "HumanEval/78",
    "code": "def hex_key(num):\n    \n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n\n\nprint(hex_key(112233445566778899AABBCCDDEEFF00))",
    "execution_output": 12
  },
  {
    "id": 384,
    "q_id": "HumanEval/78",
    "code": "def hex_key(num):\n    \n    return len(list(filter(lambda x: x in \"2357BD\", num)))\n\n\nprint(hex_key(776B7ABCD23777))",
    "execution_output": 11
  },
  {
    "id": 385,
    "q_id": "HumanEval/79",
    "code": "def decimal_to_binary(decimal):\n\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\nprint(decimal_to_binary(0))",
    "execution_output": "db0db"
  },
  {
    "id": 386,
    "q_id": "HumanEval/79",
    "code": "def decimal_to_binary(decimal):\n\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\nprint(decimal_to_binary(259))",
    "execution_output": "db100000011db"
  },
  {
    "id": 387,
    "q_id": "HumanEval/79",
    "code": "def decimal_to_binary(decimal):\n\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\nprint(decimal_to_binary(9223372036854775807))",
    "execution_output": "db111111111111111111111111111111111111111111111111111111111111111db"
  },
  {
    "id": 388,
    "q_id": "HumanEval/79",
    "code": "def decimal_to_binary(decimal):\n\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\nprint(decimal_to_binary(10000000000000000000000000000001))",
    "execution_output": "db1111110001101111011111000100000001000101100000010010001010010110010011010000000000000000000000000000001db"
  },
  {
    "id": 389,
    "q_id": "HumanEval/79",
    "code": "def decimal_to_binary(decimal):\n\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\n\nprint(decimal_to_binary(9999999999999999999999999999999))",
    "execution_output": "db1111110001101111011111000100000001000101100000010010001010010110010011001111111111111111111111111111111db"
  },
  {
    "id": 390,
    "q_id": "HumanEval/80",
    "code": "def is_happy(s):\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy(a))",
    "execution_output": false
  },
  {
    "id": 391,
    "q_id": "HumanEval/80",
    "code": "def is_happy(s):\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy(abcd))",
    "execution_output": true
  },
  {
    "id": 392,
    "q_id": "HumanEval/80",
    "code": "def is_happy(s):\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy(xyy))",
    "execution_output": false
  },
  {
    "id": 393,
    "q_id": "HumanEval/80",
    "code": "def is_happy(s):\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy(abcabc))",
    "execution_output": true
  },
  {
    "id": 394,
    "q_id": "HumanEval/80",
    "code": "def is_happy(s):\n    if len(s) < 3: return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy(cadbfe))",
    "execution_output": true
  },
  {
    "id": 395,
    "q_id": "HumanEval/81",
    "code": "def numerical_letter_grade(grades):\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]\n\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))",
    "execution_output": [
      "A+",
      "B",
      "C-",
      "C",
      "A-"
    ]
  },
  {
    "id": 396,
    "q_id": "HumanEval/81",
    "code": "def numerical_letter_grade(grades):\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]\n\n\nprint(numerical_letter_grade([1.2]))",
    "execution_output": [
      "D+"
    ]
  },
  {
    "id": 397,
    "q_id": "HumanEval/81",
    "code": "def numerical_letter_grade(grades):\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]\n\n\nprint(numerical_letter_grade([0.5]))",
    "execution_output": [
      "D-"
    ]
  },
  {
    "id": 398,
    "q_id": "HumanEval/81",
    "code": "def numerical_letter_grade(grades):\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]\n\n\nprint(numerical_letter_grade([0.0]))",
    "execution_output": [
      "E"
    ]
  },
  {
    "id": 399,
    "q_id": "HumanEval/81",
    "code": "def numerical_letter_grade(grades):\n\n    def to_letter_grade(score):\n      if score == 4.0:\n        return \"A+\"\n      elif score > 3.7:\n        return \"A\"\n      elif score > 3.3:\n        return \"A-\"\n      elif score > 3.0:\n        return \"B+\"\n      elif score > 2.7:\n        return \"B\"\n      elif score > 2.3:\n        return \"B-\"\n      elif score > 2.0:\n        return \"C+\"\n      elif score > 1.7:\n        return \"C\"\n      elif score > 1.3:\n        return \"C-\"\n      elif score > 1.0:\n        return \"D+\"\n      elif score > 0.7:\n        return \"D\"\n      elif score > 0.0:\n        return \"D-\"\n      else:\n        return \"E\"\n    \n    return [to_letter_grade(x) for x in grades]\n\n\nprint(numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]))",
    "execution_output": [
      "D",
      "D-",
      "C-",
      "B",
      "B+"
    ]
  },
  {
    "id": 400,
    "q_id": "HumanEval/82",
    "code": "def prime_length(string):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    return is_prime(len(string))\n\n\nprint(prime_length(Hello))",
    "execution_output": true
  },
  {
    "id": 401,
    "q_id": "HumanEval/82",
    "code": "def prime_length(string):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    return is_prime(len(string))\n\n\nprint(prime_length(orange))",
    "execution_output": false
  },
  {
    "id": 402,
    "q_id": "HumanEval/82",
    "code": "def prime_length(string):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    return is_prime(len(string))\n\n\nprint(prime_length(wow))",
    "execution_output": true
  },
  {
    "id": 403,
    "q_id": "HumanEval/82",
    "code": "def prime_length(string):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    return is_prime(len(string))\n\n\nprint(prime_length(go))",
    "execution_output": true
  },
  {
    "id": 404,
    "q_id": "HumanEval/82",
    "code": "def prime_length(string):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n\n    return is_prime(len(string))\n\n\nprint(prime_length(abcdefgh))",
    "execution_output": false
  },
  {
    "id": 405,
    "q_id": "HumanEval/84",
    "code": "def solve(N):\n\n    s = sum(map(lambda x: int(x), str(N)))\n    return bin(s)[2:]\n\n\nprint(solve(1000))",
    "execution_output": "1"
  },
  {
    "id": 406,
    "q_id": "HumanEval/84",
    "code": "def solve(N):\n\n    s = sum(map(lambda x: int(x), str(N)))\n    return bin(s)[2:]\n\n\nprint(solve(150))",
    "execution_output": "110"
  },
  {
    "id": 407,
    "q_id": "HumanEval/84",
    "code": "def solve(N):\n\n    s = sum(map(lambda x: int(x), str(N)))\n    return bin(s)[2:]\n\n\nprint(solve(147))",
    "execution_output": "1100"
  },
  {
    "id": 408,
    "q_id": "HumanEval/84",
    "code": "def solve(N):\n\n    s = sum(map(lambda x: int(x), str(N)))\n    return bin(s)[2:]\n\n\nprint(solve(333))",
    "execution_output": "1001"
  },
  {
    "id": 409,
    "q_id": "HumanEval/84",
    "code": "def solve(N):\n\n    s = sum(map(lambda x: int(x), str(N)))\n    return bin(s)[2:]\n\n\nprint(solve(963))",
    "execution_output": "10010"
  },
  {
    "id": 410,
    "q_id": "HumanEval/85",
    "code": "def add(lst):\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s\n\n\nprint(add([4, 88]))",
    "execution_output": 88
  },
  {
    "id": 411,
    "q_id": "HumanEval/85",
    "code": "def add(lst):\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s\n\n\nprint(add([4, 5, 6, 7, 2, 122]))",
    "execution_output": 122
  },
  {
    "id": 412,
    "q_id": "HumanEval/85",
    "code": "def add(lst):\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s\n\n\nprint(add([4, 0, 6, 7]))",
    "execution_output": 0
  },
  {
    "id": 413,
    "q_id": "HumanEval/85",
    "code": "def add(lst):\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s\n\n\nprint(add([4, 4, 6, 8]))",
    "execution_output": 12
  },
  {
    "id": 414,
    "q_id": "HumanEval/85",
    "code": "def add(lst):\n\n    s = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            s += lst[i]\n    return s\n\n\nprint(add([3, 5, 7, 9]))",
    "execution_output": 0
  },
  {
    "id": 415,
    "q_id": "HumanEval/86",
    "code": "def anti_shuffle(s):\n    words = s.split(\" \")\n    return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))\n\n\nprint(anti_shuffle(number))",
    "execution_output": "bemnru"
  },
  {
    "id": 416,
    "q_id": "HumanEval/86",
    "code": "def anti_shuffle(s):\n    words = s.split(\" \")\n    return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))\n\n\nprint(anti_shuffle(Quick brown fox))",
    "execution_output": "Qciku bnorw fox"
  },
  {
    "id": 417,
    "q_id": "HumanEval/86",
    "code": "def anti_shuffle(s):\n    words = s.split(\" \")\n    return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))\n\n\nprint(anti_shuffle(lThe quick brown fox jumps over thhe lazy dogDQH))",
    "execution_output": "Tehl cikqu bnorw fox jmpsu eorv ehht alyz DHQdgo"
  },
  {
    "id": 418,
    "q_id": "HumanEval/86",
    "code": "def anti_shuffle(s):\n    words = s.split(\" \")\n    return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))\n\n\nprint(anti_shuffle(1, 2, 31, Racecartesting!))",
    "execution_output": ",1 ,2 ,13 !Raacceeginrstt"
  },
  {
    "id": 419,
    "q_id": "HumanEval/86",
    "code": "def anti_shuffle(s):\n    words = s.split(\" \")\n    return \" \".join(map(lambda x: \"\".join(sorted(x, key=lambda ch: ord(ch))), words))\n\n\nprint(anti_shuffle(!!1, 2,1 3, testing!!))",
    "execution_output": "!!,1 ,12 ,3 !!eginstt"
  },
  {
    "id": 420,
    "q_id": "HumanEval/87",
    "code": "def get_row(lst, x):\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n\nprint(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],1))",
    "execution_output": [
      [
        0,
        0
      ],
      [
        1,
        4
      ],
      [
        1,
        0
      ],
      [
        2,
        5
      ],
      [
        2,
        0
      ]
    ]
  },
  {
    "id": 421,
    "q_id": "HumanEval/87",
    "code": "def get_row(lst, x):\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n\nprint(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],2))",
    "execution_output": [
      [
        0,
        1
      ],
      [
        1,
        1
      ],
      [
        2,
        1
      ],
      [
        3,
        1
      ],
      [
        4,
        1
      ],
      [
        5,
        1
      ]
    ]
  },
  {
    "id": 422,
    "q_id": "HumanEval/87",
    "code": "def get_row(lst, x):\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n\nprint(get_row([],1))",
    "execution_output": []
  },
  {
    "id": 423,
    "q_id": "HumanEval/87",
    "code": "def get_row(lst, x):\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n\nprint(get_row([[1]],2))",
    "execution_output": []
  },
  {
    "id": 424,
    "q_id": "HumanEval/87",
    "code": "def get_row(lst, x):\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n\nprint(get_row([[], [], [], []],10))",
    "execution_output": []
  },
  {
    "id": 425,
    "q_id": "HumanEval/88",
    "code": "def sort_array(array):\n\n    if array == []: return []\n    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)\n\n\nprint(sort_array([5]))",
    "execution_output": [
      5
    ]
  },
  {
    "id": 426,
    "q_id": "HumanEval/88",
    "code": "def sort_array(array):\n\n    if array == []: return []\n    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)\n\n\nprint(sort_array([2, 4, 3, 0, 1, 5]))",
    "execution_output": [
      0,
      1,
      2,
      3,
      4,
      5
    ]
  },
  {
    "id": 427,
    "q_id": "HumanEval/88",
    "code": "def sort_array(array):\n\n    if array == []: return []\n    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)\n\n\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))",
    "execution_output": [
      6,
      5,
      4,
      3,
      2,
      1,
      0
    ]
  },
  {
    "id": 428,
    "q_id": "HumanEval/88",
    "code": "def sort_array(array):\n\n    if array == []: return []\n    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)\n\n\nprint(sort_array([2, 1]))",
    "execution_output": [
      1,
      2
    ]
  },
  {
    "id": 429,
    "q_id": "HumanEval/88",
    "code": "def sort_array(array):\n\n    if array == []: return []\n    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)\n\n\nprint(sort_array([7, 9, 9]))",
    "execution_output": [
      9,
      9,
      7
    ]
  },
  {
    "id": 430,
    "q_id": "HumanEval/89",
    "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))\n\n\nprint(encrypt(hi))",
    "execution_output": "lm"
  },
  {
    "id": 431,
    "q_id": "HumanEval/89",
    "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))\n\n\nprint(encrypt(asdfghjkl))",
    "execution_output": "ewhjklnop"
  },
  {
    "id": 432,
    "q_id": "HumanEval/89",
    "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))\n\n\nprint(encrypt(hellomyfriend))",
    "execution_output": "lippsqcjvmirh"
  },
  {
    "id": 433,
    "q_id": "HumanEval/89",
    "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))\n\n\nprint(encrypt(uvuvwxyzwxyz))",
    "execution_output": "yzyzabcdabcd"
  },
  {
    "id": 434,
    "q_id": "HumanEval/89",
    "code": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    return \"\".join(map(lambda ch: chr((ord(ch) - ord(\"a\") + 4) % 26 + ord(\"a\")) if ch in d else ch, s))\n\n\nprint(encrypt(tsest123aparrte1a2b3cstpatrk123))",
    "execution_output": "xwiwx123etevvxi1e2f3gwxtexvo123"
  },
  {
    "id": 435,
    "q_id": "HumanEval/90",
    "code": "def next_smallest(lst):\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    for x in sorted_list:\n        if x != sorted_list[0]:\n            return x \n\n\nprint(next_smallest([1, 1]))",
    "execution_output": null
  },
  {
    "id": 436,
    "q_id": "HumanEval/90",
    "code": "def next_smallest(lst):\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    for x in sorted_list:\n        if x != sorted_list[0]:\n            return x \n\n\nprint(next_smallest([1, 1, 1, 1, 0]))",
    "execution_output": 1
  },
  {
    "id": 437,
    "q_id": "HumanEval/90",
    "code": "def next_smallest(lst):\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    for x in sorted_list:\n        if x != sorted_list[0]:\n            return x \n\n\nprint(next_smallest([-35, 34, 12, -45]))",
    "execution_output": -35
  },
  {
    "id": 438,
    "q_id": "HumanEval/90",
    "code": "def next_smallest(lst):\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    for x in sorted_list:\n        if x != sorted_list[0]:\n            return x \n\n\nprint(next_smallest([1, 2, 3, 4, 5, 6]))",
    "execution_output": 2
  },
  {
    "id": 439,
    "q_id": "HumanEval/90",
    "code": "def next_smallest(lst):\n    if len(lst) <= 1: return None\n    sorted_list = sorted(lst)\n    for x in sorted_list:\n        if x != sorted_list[0]:\n            return x \n\n\nprint(next_smallest([7, 6, 5, 4, 4]))",
    "execution_output": 5
  },
  {
    "id": 440,
    "q_id": "HumanEval/91",
    "code": "def is_bored(S):\n    sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))\n    return len([s for s in sentences if s.startswith(\"I \")])\n\n\nprint(is_bored(I love It !))",
    "execution_output": 1
  },
  {
    "id": 441,
    "q_id": "HumanEval/91",
    "code": "def is_bored(S):\n    sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))\n    return len([s for s in sentences if s.startswith(\"I \")])\n\n\nprint(is_bored(I enjoy reading books. They help me learn new things.))",
    "execution_output": 1
  },
  {
    "id": 442,
    "q_id": "HumanEval/91",
    "code": "def is_bored(S):\n    sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))\n    return len([s for s in sentences if s.startswith(\"I \")])\n\n\nprint(is_bored(In the morning, I like to have a cup of coffee to start my day off right. How about you?))",
    "execution_output": 0
  },
  {
    "id": 443,
    "q_id": "HumanEval/91",
    "code": "def is_bored(S):\n    sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))\n    return len([s for s in sentences if s.startswith(\"I \")])\n\n\nprint(is_bored(I think I want to try cooking something new for dinner tonight. Do you have any favorite recipes?))",
    "execution_output": 1
  },
  {
    "id": 444,
    "q_id": "HumanEval/91",
    "code": "def is_bored(S):\n    sentences = map(lambda x: x.strip(), ((S.replace(\"?\", \".\")).replace(\"!\", \".\")).split(\".\"))\n    return len([s for s in sentences if s.startswith(\"I \")])\n\n\nprint(is_bored(I love to read books. What about you?))",
    "execution_output": 1
  },
  {
    "id": 445,
    "q_id": "HumanEval/92",
    "code": "def any_int(x, y, z):\n    if type(x) != int or type(y) != int or type(z) != int: return False\n    return x == y + z or y == x + z or z == y + x\n\n\nprint(any_int(2,3,1))",
    "execution_output": true
  },
  {
    "id": 446,
    "q_id": "HumanEval/92",
    "code": "def any_int(x, y, z):\n    if type(x) != int or type(y) != int or type(z) != int: return False\n    return x == y + z or y == x + z or z == y + x\n\n\nprint(any_int(2.5,2,3))",
    "execution_output": false
  },
  {
    "id": 447,
    "q_id": "HumanEval/92",
    "code": "def any_int(x, y, z):\n    if type(x) != int or type(y) != int or type(z) != int: return False\n    return x == y + z or y == x + z or z == y + x\n\n\nprint(any_int(1.5,5,3.5))",
    "execution_output": false
  },
  {
    "id": 448,
    "q_id": "HumanEval/92",
    "code": "def any_int(x, y, z):\n    if type(x) != int or type(y) != int or type(z) != int: return False\n    return x == y + z or y == x + z or z == y + x\n\n\nprint(any_int(2,6,2))",
    "execution_output": false
  },
  {
    "id": 449,
    "q_id": "HumanEval/92",
    "code": "def any_int(x, y, z):\n    if type(x) != int or type(y) != int or type(z) != int: return False\n    return x == y + z or y == x + z or z == y + x\n\n\nprint(any_int(4,2,2))",
    "execution_output": true
  },
  {
    "id": 450,
    "q_id": "HumanEval/93",
    "code": "def encode(message):\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    \n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))\n\n\nprint(encode(TEST))",
    "execution_output": "tgst"
  },
  {
    "id": 451,
    "q_id": "HumanEval/93",
    "code": "def encode(message):\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    \n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))\n\n\nprint(encode(This is a message))",
    "execution_output": "tHKS KS C MGSSCGG"
  },
  {
    "id": 452,
    "q_id": "HumanEval/93",
    "code": "def encode(message):\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    \n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))\n\n\nprint(encode(abcdefghijklmnopqrstuvwxyz))",
    "execution_output": "CBCDGFGHKJKLMNQPQRSTWVWXYZ"
  },
  {
    "id": 453,
    "q_id": "HumanEval/93",
    "code": "def encode(message):\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    \n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))\n\n\nprint(encode(The quick brown fox jumps over the lazy dog))",
    "execution_output": "tHG QWKCK BRQWN FQX JWMPS QVGR THG LCZY DQG"
  },
  {
    "id": 454,
    "q_id": "HumanEval/93",
    "code": "def encode(message):\n\n    def switch_case(ch):\n        if ord(\"A\") <= ord(ch) <= ord(\"Z\"):\n            return chr(ord(ch) + 32)\n        elif ord(\"a\") <= ord(ch) <= ord(\"z\"):\n            return chr(ord(ch) - 32)\n        else:\n            return ch\n    \n    def vowel_change(ch):\n        return ch if ch not in \"aeiouAEIOU\" else chr(ord(ch) + 2)\n    \n    m = \"\".join(map(switch_case, message))\n    return \"\".join(map(vowel_change, m))\n\n\nprint(encode(Every good boy does fine))",
    "execution_output": "gVGRY GQQD BQY DQGS FKNG"
  },
  {
    "id": 455,
    "q_id": "HumanEval/94",
    "code": "def skjkasdkd(lst):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    sorted_list = sorted(lst)[::-1]\n    for x in sorted_list:\n        if is_prime(x):\n            return sum(map(lambda ch: int(ch), str(x)))\n\n\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))",
    "execution_output": 10
  },
  {
    "id": 456,
    "q_id": "HumanEval/94",
    "code": "def skjkasdkd(lst):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    sorted_list = sorted(lst)[::-1]\n    for x in sorted_list:\n        if is_prime(x):\n            return sum(map(lambda ch: int(ch), str(x)))\n\n\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))",
    "execution_output": 25
  },
  {
    "id": 457,
    "q_id": "HumanEval/94",
    "code": "def skjkasdkd(lst):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    sorted_list = sorted(lst)[::-1]\n    for x in sorted_list:\n        if is_prime(x):\n            return sum(map(lambda ch: int(ch), str(x)))\n\n\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))",
    "execution_output": 13
  },
  {
    "id": 458,
    "q_id": "HumanEval/94",
    "code": "def skjkasdkd(lst):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    sorted_list = sorted(lst)[::-1]\n    for x in sorted_list:\n        if is_prime(x):\n            return sum(map(lambda ch: int(ch), str(x)))\n\n\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))",
    "execution_output": 11
  },
  {
    "id": 459,
    "q_id": "HumanEval/94",
    "code": "def skjkasdkd(lst):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    sorted_list = sorted(lst)[::-1]\n    for x in sorted_list:\n        if is_prime(x):\n            return sum(map(lambda ch: int(ch), str(x)))\n\n\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))",
    "execution_output": 3
  },
  {
    "id": 460,
    "q_id": "HumanEval/95",
    "code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str:\n            lower = upper = False\n            break\n        if not k.islower(): lower = False\n        if not k.isupper(): upper = False\n    return lower or upper\n\n\nprint(check_dict_case({'p': 'pineapple', 'b': 'banana'}))",
    "execution_output": true
  },
  {
    "id": 461,
    "q_id": "HumanEval/95",
    "code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str:\n            lower = upper = False\n            break\n        if not k.islower(): lower = False\n        if not k.isupper(): upper = False\n    return lower or upper\n\n\nprint(check_dict_case({'p': 'pineapple', 'A': 'banana', 'B': 'banana'}))",
    "execution_output": false
  },
  {
    "id": 462,
    "q_id": "HumanEval/95",
    "code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str:\n            lower = upper = False\n            break\n        if not k.islower(): lower = False\n        if not k.isupper(): upper = False\n    return lower or upper\n\n\nprint(check_dict_case({'p': 'pineapple', '5': 'banana', 'a': 'apple'}))",
    "execution_output": false
  },
  {
    "id": 463,
    "q_id": "HumanEval/95",
    "code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str:\n            lower = upper = False\n            break\n        if not k.islower(): lower = False\n        if not k.isupper(): upper = False\n    return lower or upper\n\n\nprint(check_dict_case({'fruit': 'Orange', 'taste': 'Sweet'}))",
    "execution_output": true
  },
  {
    "id": 464,
    "q_id": "HumanEval/95",
    "code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if keys == []: return False\n    lower, upper = True, True\n    for k in keys:\n        if type(k) != str:\n            lower = upper = False\n            break\n        if not k.islower(): lower = False\n        if not k.isupper(): upper = False\n    return lower or upper\n\n\nprint(check_dict_case({}))",
    "execution_output": false
  },
  {
    "id": 465,
    "q_id": "HumanEval/96",
    "code": "def count_up_to(n):\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    return ans\n\n\nprint(count_up_to(0))",
    "execution_output": []
  },
  {
    "id": 466,
    "q_id": "HumanEval/96",
    "code": "def count_up_to(n):\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    return ans\n\n\nprint(count_up_to(5))",
    "execution_output": [
      2,
      3
    ]
  },
  {
    "id": 467,
    "q_id": "HumanEval/96",
    "code": "def count_up_to(n):\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    return ans\n\n\nprint(count_up_to(30))",
    "execution_output": [
      2,
      3,
      5,
      7,
      11,
      13,
      17,
      19,
      23,
      29
    ]
  },
  {
    "id": 468,
    "q_id": "HumanEval/96",
    "code": "def count_up_to(n):\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    return ans\n\n\nprint(count_up_to(15700))",
    "execution_output": [
      2,
      3,
      5,
      7,
      11,
      13,
      17,
      19,
      23,
      29,
      31,
      37,
      41,
      43,
      47,
      53,
      59,
      61,
      67,
      71,
      73,
      79,
      83,
      89,
      97,
      101,
      103,
      107,
      109,
      113,
      127,
      131,
      137,
      139,
      149,
      151,
      157,
      163,
      167,
      173,
      179,
      181,
      191,
      193,
      197,
      199,
      211,
      223,
      227,
      229,
      233,
      239,
      241,
      251,
      257,
      263,
      269,
      271,
      277,
      281,
      283,
      293,
      307,
      311,
      313,
      317,
      331,
      337,
      347,
      349,
      353,
      359,
      367,
      373,
      379,
      383,
      389,
      397,
      401,
      409,
      419,
      421,
      431,
      433,
      439,
      443,
      449,
      457,
      461,
      463,
      467,
      479,
      487,
      491,
      499,
      503,
      509,
      521,
      523,
      541,
      547,
      557,
      563,
      569,
      571,
      577,
      587,
      593,
      599,
      601,
      607,
      613,
      617,
      619,
      631,
      641,
      643,
      647,
      653,
      659,
      661,
      673,
      677,
      683,
      691,
      701,
      709,
      719,
      727,
      733,
      739,
      743,
      751,
      757,
      761,
      769,
      773,
      787,
      797,
      809,
      811,
      821,
      823,
      827,
      829,
      839,
      853,
      857,
      859,
      863,
      877,
      881,
      883,
      887,
      907,
      911,
      919,
      929,
      937,
      941,
      947,
      953,
      967,
      971,
      977,
      983,
      991,
      997,
      1009,
      1013,
      1019,
      1021,
      1031,
      1033,
      1039,
      1049,
      1051,
      1061,
      1063,
      1069,
      1087,
      1091,
      1093,
      1097,
      1103,
      1109,
      1117,
      1123,
      1129,
      1151,
      1153,
      1163,
      1171,
      1181,
      1187,
      1193,
      1201,
      1213,
      1217,
      1223,
      1229,
      1231,
      1237,
      1249,
      1259,
      1277,
      1279,
      1283,
      1289,
      1291,
      1297,
      1301,
      1303,
      1307,
      1319,
      1321,
      1327,
      1361,
      1367,
      1373,
      1381,
      1399,
      1409,
      1423,
      1427,
      1429,
      1433,
      1439,
      1447,
      1451,
      1453,
      1459,
      1471,
      1481,
      1483,
      1487,
      1489,
      1493,
      1499,
      1511,
      1523,
      1531,
      1543,
      1549,
      1553,
      1559,
      1567,
      1571,
      1579,
      1583,
      1597,
      1601,
      1607,
      1609,
      1613,
      1619,
      1621,
      1627,
      1637,
      1657,
      1663,
      1667,
      1669,
      1693,
      1697,
      1699,
      1709,
      1721,
      1723,
      1733,
      1741,
      1747,
      1753,
      1759,
      1777,
      1783,
      1787,
      1789,
      1801,
      1811,
      1823,
      1831,
      1847,
      1861,
      1867,
      1871,
      1873,
      1877,
      1879,
      1889,
      1901,
      1907,
      1913,
      1931,
      1933,
      1949,
      1951,
      1973,
      1979,
      1987,
      1993,
      1997,
      1999,
      2003,
      2011,
      2017,
      2027,
      2029,
      2039,
      2053,
      2063,
      2069,
      2081,
      2083,
      2087,
      2089,
      2099,
      2111,
      2113,
      2129,
      2131,
      2137,
      2141,
      2143,
      2153,
      2161,
      2179,
      2203,
      2207,
      2213,
      2221,
      2237,
      2239,
      2243,
      2251,
      2267,
      2269,
      2273,
      2281,
      2287,
      2293,
      2297,
      2309,
      2311,
      2333,
      2339,
      2341,
      2347,
      2351,
      2357,
      2371,
      2377,
      2381,
      2383,
      2389,
      2393,
      2399,
      2411,
      2417,
      2423,
      2437,
      2441,
      2447,
      2459,
      2467,
      2473,
      2477,
      2503,
      2521,
      2531,
      2539,
      2543,
      2549,
      2551,
      2557,
      2579,
      2591,
      2593,
      2609,
      2617,
      2621,
      2633,
      2647,
      2657,
      2659,
      2663,
      2671,
      2677,
      2683,
      2687,
      2689,
      2693,
      2699,
      2707,
      2711,
      2713,
      2719,
      2729,
      2731,
      2741,
      2749,
      2753,
      2767,
      2777,
      2789,
      2791,
      2797,
      2801,
      2803,
      2819,
      2833,
      2837,
      2843,
      2851,
      2857,
      2861,
      2879,
      2887,
      2897,
      2903,
      2909,
      2917,
      2927,
      2939,
      2953,
      2957,
      2963,
      2969,
      2971,
      2999,
      3001,
      3011,
      3019,
      3023,
      3037,
      3041,
      3049,
      3061,
      3067,
      3079,
      3083,
      3089,
      3109,
      3119,
      3121,
      3137,
      3163,
      3167,
      3169,
      3181,
      3187,
      3191,
      3203,
      3209,
      3217,
      3221,
      3229,
      3251,
      3253,
      3257,
      3259,
      3271,
      3299,
      3301,
      3307,
      3313,
      3319,
      3323,
      3329,
      3331,
      3343,
      3347,
      3359,
      3361,
      3371,
      3373,
      3389,
      3391,
      3407,
      3413,
      3433,
      3449,
      3457,
      3461,
      3463,
      3467,
      3469,
      3491,
      3499,
      3511,
      3517,
      3527,
      3529,
      3533,
      3539,
      3541,
      3547,
      3557,
      3559,
      3571,
      3581,
      3583,
      3593,
      3607,
      3613,
      3617,
      3623,
      3631,
      3637,
      3643,
      3659,
      3671,
      3673,
      3677,
      3691,
      3697,
      3701,
      3709,
      3719,
      3727,
      3733,
      3739,
      3761,
      3767,
      3769,
      3779,
      3793,
      3797,
      3803,
      3821,
      3823,
      3833,
      3847,
      3851,
      3853,
      3863,
      3877,
      3881,
      3889,
      3907,
      3911,
      3917,
      3919,
      3923,
      3929,
      3931,
      3943,
      3947,
      3967,
      3989,
      4001,
      4003,
      4007,
      4013,
      4019,
      4021,
      4027,
      4049,
      4051,
      4057,
      4073,
      4079,
      4091,
      4093,
      4099,
      4111,
      4127,
      4129,
      4133,
      4139,
      4153,
      4157,
      4159,
      4177,
      4201,
      4211,
      4217,
      4219,
      4229,
      4231,
      4241,
      4243,
      4253,
      4259,
      4261,
      4271,
      4273,
      4283,
      4289,
      4297,
      4327,
      4337,
      4339,
      4349,
      4357,
      4363,
      4373,
      4391,
      4397,
      4409,
      4421,
      4423,
      4441,
      4447,
      4451,
      4457,
      4463,
      4481,
      4483,
      4493,
      4507,
      4513,
      4517,
      4519,
      4523,
      4547,
      4549,
      4561,
      4567,
      4583,
      4591,
      4597,
      4603,
      4621,
      4637,
      4639,
      4643,
      4649,
      4651,
      4657,
      4663,
      4673,
      4679,
      4691,
      4703,
      4721,
      4723,
      4729,
      4733,
      4751,
      4759,
      4783,
      4787,
      4789,
      4793,
      4799,
      4801,
      4813,
      4817,
      4831,
      4861,
      4871,
      4877,
      4889,
      4903,
      4909,
      4919,
      4931,
      4933,
      4937,
      4943,
      4951,
      4957,
      4967,
      4969,
      4973,
      4987,
      4993,
      4999,
      5003,
      5009,
      5011,
      5021,
      5023,
      5039,
      5051,
      5059,
      5077,
      5081,
      5087,
      5099,
      5101,
      5107,
      5113,
      5119,
      5147,
      5153,
      5167,
      5171,
      5179,
      5189,
      5197,
      5209,
      5227,
      5231,
      5233,
      5237,
      5261,
      5273,
      5279,
      5281,
      5297,
      5303,
      5309,
      5323,
      5333,
      5347,
      5351,
      5381,
      5387,
      5393,
      5399,
      5407,
      5413,
      5417,
      5419,
      5431,
      5437,
      5441,
      5443,
      5449,
      5471,
      5477,
      5479,
      5483,
      5501,
      5503,
      5507,
      5519,
      5521,
      5527,
      5531,
      5557,
      5563,
      5569,
      5573,
      5581,
      5591,
      5623,
      5639,
      5641,
      5647,
      5651,
      5653,
      5657,
      5659,
      5669,
      5683,
      5689,
      5693,
      5701,
      5711,
      5717,
      5737,
      5741,
      5743,
      5749,
      5779,
      5783,
      5791,
      5801,
      5807,
      5813,
      5821,
      5827,
      5839,
      5843,
      5849,
      5851,
      5857,
      5861,
      5867,
      5869,
      5879,
      5881,
      5897,
      5903,
      5923,
      5927,
      5939,
      5953,
      5981,
      5987,
      6007,
      6011,
      6029,
      6037,
      6043,
      6047,
      6053,
      6067,
      6073,
      6079,
      6089,
      6091,
      6101,
      6113,
      6121,
      6131,
      6133,
      6143,
      6151,
      6163,
      6173,
      6197,
      6199,
      6203,
      6211,
      6217,
      6221,
      6229,
      6247,
      6257,
      6263,
      6269,
      6271,
      6277,
      6287,
      6299,
      6301,
      6311,
      6317,
      6323,
      6329,
      6337,
      6343,
      6353,
      6359,
      6361,
      6367,
      6373,
      6379,
      6389,
      6397,
      6421,
      6427,
      6449,
      6451,
      6469,
      6473,
      6481,
      6491,
      6521,
      6529,
      6547,
      6551,
      6553,
      6563,
      6569,
      6571,
      6577,
      6581,
      6599,
      6607,
      6619,
      6637,
      6653,
      6659,
      6661,
      6673,
      6679,
      6689,
      6691,
      6701,
      6703,
      6709,
      6719,
      6733,
      6737,
      6761,
      6763,
      6779,
      6781,
      6791,
      6793,
      6803,
      6823,
      6827,
      6829,
      6833,
      6841,
      6857,
      6863,
      6869,
      6871,
      6883,
      6899,
      6907,
      6911,
      6917,
      6947,
      6949,
      6959,
      6961,
      6967,
      6971,
      6977,
      6983,
      6991,
      6997,
      7001,
      7013,
      7019,
      7027,
      7039,
      7043,
      7057,
      7069,
      7079,
      7103,
      7109,
      7121,
      7127,
      7129,
      7151,
      7159,
      7177,
      7187,
      7193,
      7207,
      7211,
      7213,
      7219,
      7229,
      7237,
      7243,
      7247,
      7253,
      7283,
      7297,
      7307,
      7309,
      7321,
      7331,
      7333,
      7349,
      7351,
      7369,
      7393,
      7411,
      7417,
      7433,
      7451,
      7457,
      7459,
      7477,
      7481,
      7487,
      7489,
      7499,
      7507,
      7517,
      7523,
      7529,
      7537,
      7541,
      7547,
      7549,
      7559,
      7561,
      7573,
      7577,
      7583,
      7589,
      7591,
      7603,
      7607,
      7621,
      7639,
      7643,
      7649,
      7669,
      7673,
      7681,
      7687,
      7691,
      7699,
      7703,
      7717,
      7723,
      7727,
      7741,
      7753,
      7757,
      7759,
      7789,
      7793,
      7817,
      7823,
      7829,
      7841,
      7853,
      7867,
      7873,
      7877,
      7879,
      7883,
      7901,
      7907,
      7919,
      7927,
      7933,
      7937,
      7949,
      7951,
      7963,
      7993,
      8009,
      8011,
      8017,
      8039,
      8053,
      8059,
      8069,
      8081,
      8087,
      8089,
      8093,
      8101,
      8111,
      8117,
      8123,
      8147,
      8161,
      8167,
      8171,
      8179,
      8191,
      8209,
      8219,
      8221,
      8231,
      8233,
      8237,
      8243,
      8263,
      8269,
      8273,
      8287,
      8291,
      8293,
      8297,
      8311,
      8317,
      8329,
      8353,
      8363,
      8369,
      8377,
      8387,
      8389,
      8419,
      8423,
      8429,
      8431,
      8443,
      8447,
      8461,
      8467,
      8501,
      8513,
      8521,
      8527,
      8537,
      8539,
      8543,
      8563,
      8573,
      8581,
      8597,
      8599,
      8609,
      8623,
      8627,
      8629,
      8641,
      8647,
      8663,
      8669,
      8677,
      8681,
      8689,
      8693,
      8699,
      8707,
      8713,
      8719,
      8731,
      8737,
      8741,
      8747,
      8753,
      8761,
      8779,
      8783,
      8803,
      8807,
      8819,
      8821,
      8831,
      8837,
      8839,
      8849,
      8861,
      8863,
      8867,
      8887,
      8893,
      8923,
      8929,
      8933,
      8941,
      8951,
      8963,
      8969,
      8971,
      8999,
      9001,
      9007,
      9011,
      9013,
      9029,
      9041,
      9043,
      9049,
      9059,
      9067,
      9091,
      9103,
      9109,
      9127,
      9133,
      9137,
      9151,
      9157,
      9161,
      9173,
      9181,
      9187,
      9199,
      9203,
      9209,
      9221,
      9227,
      9239,
      9241,
      9257,
      9277,
      9281,
      9283,
      9293,
      9311,
      9319,
      9323,
      9337,
      9341,
      9343,
      9349,
      9371,
      9377,
      9391,
      9397,
      9403,
      9413,
      9419,
      9421,
      9431,
      9433,
      9437,
      9439,
      9461,
      9463,
      9467,
      9473,
      9479,
      9491,
      9497,
      9511,
      9521,
      9533,
      9539,
      9547,
      9551,
      9587,
      9601,
      9613,
      9619,
      9623,
      9629,
      9631,
      9643,
      9649,
      9661,
      9677,
      9679,
      9689,
      9697,
      9719,
      9721,
      9733,
      9739,
      9743,
      9749,
      9767,
      9769,
      9781,
      9787,
      9791,
      9803,
      9811,
      9817,
      9829,
      9833,
      9839,
      9851,
      9857,
      9859,
      9871,
      9883,
      9887,
      9901,
      9907,
      9923,
      9929,
      9931,
      9941,
      9949,
      9967,
      9973,
      10007,
      10009,
      10037,
      10039,
      10061,
      10067,
      10069,
      10079,
      10091,
      10093,
      10099,
      10103,
      10111,
      10133,
      10139,
      10141,
      10151,
      10159,
      10163,
      10169,
      10177,
      10181,
      10193,
      10211,
      10223,
      10243,
      10247,
      10253,
      10259,
      10267,
      10271,
      10273,
      10289,
      10301,
      10303,
      10313,
      10321,
      10331,
      10333,
      10337,
      10343,
      10357,
      10369,
      10391,
      10399,
      10427,
      10429,
      10433,
      10453,
      10457,
      10459,
      10463,
      10477,
      10487,
      10499,
      10501,
      10513,
      10529,
      10531,
      10559,
      10567,
      10589,
      10597,
      10601,
      10607,
      10613,
      10627,
      10631,
      10639,
      10651,
      10657,
      10663,
      10667,
      10687,
      10691,
      10709,
      10711,
      10723,
      10729,
      10733,
      10739,
      10753,
      10771,
      10781,
      10789,
      10799,
      10831,
      10837,
      10847,
      10853,
      10859,
      10861,
      10867,
      10883,
      10889,
      10891,
      10903,
      10909,
      10937,
      10939,
      10949,
      10957,
      10973,
      10979,
      10987,
      10993,
      11003,
      11027,
      11047,
      11057,
      11059,
      11069,
      11071,
      11083,
      11087,
      11093,
      11113,
      11117,
      11119,
      11131,
      11149,
      11159,
      11161,
      11171,
      11173,
      11177,
      11197,
      11213,
      11239,
      11243,
      11251,
      11257,
      11261,
      11273,
      11279,
      11287,
      11299,
      11311,
      11317,
      11321,
      11329,
      11351,
      11353,
      11369,
      11383,
      11393,
      11399,
      11411,
      11423,
      11437,
      11443,
      11447,
      11467,
      11471,
      11483,
      11489,
      11491,
      11497,
      11503,
      11519,
      11527,
      11549,
      11551,
      11579,
      11587,
      11593,
      11597,
      11617,
      11621,
      11633,
      11657,
      11677,
      11681,
      11689,
      11699,
      11701,
      11717,
      11719,
      11731,
      11743,
      11777,
      11779,
      11783,
      11789,
      11801,
      11807,
      11813,
      11821,
      11827,
      11831,
      11833,
      11839,
      11863,
      11867,
      11887,
      11897,
      11903,
      11909,
      11923,
      11927,
      11933,
      11939,
      11941,
      11953,
      11959,
      11969,
      11971,
      11981,
      11987,
      12007,
      12011,
      12037,
      12041,
      12043,
      12049,
      12071,
      12073,
      12097,
      12101,
      12107,
      12109,
      12113,
      12119,
      12143,
      12149,
      12157,
      12161,
      12163,
      12197,
      12203,
      12211,
      12227,
      12239,
      12241,
      12251,
      12253,
      12263,
      12269,
      12277,
      12281,
      12289,
      12301,
      12323,
      12329,
      12343,
      12347,
      12373,
      12377,
      12379,
      12391,
      12401,
      12409,
      12413,
      12421,
      12433,
      12437,
      12451,
      12457,
      12473,
      12479,
      12487,
      12491,
      12497,
      12503,
      12511,
      12517,
      12527,
      12539,
      12541,
      12547,
      12553,
      12569,
      12577,
      12583,
      12589,
      12601,
      12611,
      12613,
      12619,
      12637,
      12641,
      12647,
      12653,
      12659,
      12671,
      12689,
      12697,
      12703,
      12713,
      12721,
      12739,
      12743,
      12757,
      12763,
      12781,
      12791,
      12799,
      12809,
      12821,
      12823,
      12829,
      12841,
      12853,
      12889,
      12893,
      12899,
      12907,
      12911,
      12917,
      12919,
      12923,
      12941,
      12953,
      12959,
      12967,
      12973,
      12979,
      12983,
      13001,
      13003,
      13007,
      13009,
      13033,
      13037,
      13043,
      13049,
      13063,
      13093,
      13099,
      13103,
      13109,
      13121,
      13127,
      13147,
      13151,
      13159,
      13163,
      13171,
      13177,
      13183,
      13187,
      13217,
      13219,
      13229,
      13241,
      13249,
      13259,
      13267,
      13291,
      13297,
      13309,
      13313,
      13327,
      13331,
      13337,
      13339,
      13367,
      13381,
      13397,
      13399,
      13411,
      13417,
      13421,
      13441,
      13451,
      13457,
      13463,
      13469,
      13477,
      13487,
      13499,
      13513,
      13523,
      13537,
      13553,
      13567,
      13577,
      13591,
      13597,
      13613,
      13619,
      13627,
      13633,
      13649,
      13669,
      13679,
      13681,
      13687,
      13691,
      13693,
      13697,
      13709,
      13711,
      13721,
      13723,
      13729,
      13751,
      13757,
      13759,
      13763,
      13781,
      13789,
      13799,
      13807,
      13829,
      13831,
      13841,
      13859,
      13873,
      13877,
      13879,
      13883,
      13901,
      13903,
      13907,
      13913,
      13921,
      13931,
      13933,
      13963,
      13967,
      13997,
      13999,
      14009,
      14011,
      14029,
      14033,
      14051,
      14057,
      14071,
      14081,
      14083,
      14087,
      14107,
      14143,
      14149,
      14153,
      14159,
      14173,
      14177,
      14197,
      14207,
      14221,
      14243,
      14249,
      14251,
      14281,
      14293,
      14303,
      14321,
      14323,
      14327,
      14341,
      14347,
      14369,
      14387,
      14389,
      14401,
      14407,
      14411,
      14419,
      14423,
      14431,
      14437,
      14447,
      14449,
      14461,
      14479,
      14489,
      14503,
      14519,
      14533,
      14537,
      14543,
      14549,
      14551,
      14557,
      14561,
      14563,
      14591,
      14593,
      14621,
      14627,
      14629,
      14633,
      14639,
      14653,
      14657,
      14669,
      14683,
      14699,
      14713,
      14717,
      14723,
      14731,
      14737,
      14741,
      14747,
      14753,
      14759,
      14767,
      14771,
      14779,
      14783,
      14797,
      14813,
      14821,
      14827,
      14831,
      14843,
      14851,
      14867,
      14869,
      14879,
      14887,
      14891,
      14897,
      14923,
      14929,
      14939,
      14947,
      14951,
      14957,
      14969,
      14983,
      15013,
      15017,
      15031,
      15053,
      15061,
      15073,
      15077,
      15083,
      15091,
      15101,
      15107,
      15121,
      15131,
      15137,
      15139,
      15149,
      15161,
      15173,
      15187,
      15193,
      15199,
      15217,
      15227,
      15233,
      15241,
      15259,
      15263,
      15269,
      15271,
      15277,
      15287,
      15289,
      15299,
      15307,
      15313,
      15319,
      15329,
      15331,
      15349,
      15359,
      15361,
      15373,
      15377,
      15383,
      15391,
      15401,
      15413,
      15427,
      15439,
      15443,
      15451,
      15461,
      15467,
      15473,
      15493,
      15497,
      15511,
      15527,
      15541,
      15551,
      15559,
      15569,
      15581,
      15583,
      15601,
      15607,
      15619,
      15629,
      15641,
      15643,
      15647,
      15649,
      15661,
      15667,
      15671,
      15679,
      15683
    ]
  },
  {
    "id": 469,
    "q_id": "HumanEval/96",
    "code": "def count_up_to(n):\n\n    ans = []\n    isprime = [True] * (n + 1)\n    for i in range(2, n):\n        if isprime[i]:\n            ans.append(i)\n            for j in range(i + i, n, i):\n                isprime[j] = False\n    return ans\n\n\nprint(count_up_to(157))",
    "execution_output": [
      2,
      3,
      5,
      7,
      11,
      13,
      17,
      19,
      23,
      29,
      31,
      37,
      41,
      43,
      47,
      53,
      59,
      61,
      67,
      71,
      73,
      79,
      83,
      89,
      97,
      101,
      103,
      107,
      109,
      113,
      127,
      131,
      137,
      139,
      149,
      151
    ]
  },
  {
    "id": 470,
    "q_id": "HumanEval/97",
    "code": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])\n\n\nprint(multiply(148,412))",
    "execution_output": 16
  },
  {
    "id": 471,
    "q_id": "HumanEval/97",
    "code": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])\n\n\nprint(multiply(2020,1851))",
    "execution_output": 0
  },
  {
    "id": 472,
    "q_id": "HumanEval/97",
    "code": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])\n\n\nprint(multiply(0,1))",
    "execution_output": 0
  },
  {
    "id": 473,
    "q_id": "HumanEval/97",
    "code": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])\n\n\nprint(multiply(-6,-9))",
    "execution_output": 54
  },
  {
    "id": 474,
    "q_id": "HumanEval/97",
    "code": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])\n\n\nprint(multiply(39,25))",
    "execution_output": 45
  },
  {
    "id": 475,
    "q_id": "HumanEval/98",
    "code": "def count_upper(s):\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            cnt += 1\n    return cnt\n\n\nprint(count_upper(aBCdEf))",
    "execution_output": 1
  },
  {
    "id": 476,
    "q_id": "HumanEval/98",
    "code": "def count_upper(s):\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            cnt += 1\n    return cnt\n\n\nprint(count_upper(abcdefg))",
    "execution_output": 0
  },
  {
    "id": 477,
    "q_id": "HumanEval/98",
    "code": "def count_upper(s):\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            cnt += 1\n    return cnt\n\n\nprint(count_upper(EEEE))",
    "execution_output": 2
  },
  {
    "id": 478,
    "q_id": "HumanEval/98",
    "code": "def count_upper(s):\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            cnt += 1\n    return cnt\n\n\nprint(count_upper(uEiAEOIU))",
    "execution_output": 2
  },
  {
    "id": 479,
    "q_id": "HumanEval/98",
    "code": "def count_upper(s):\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            cnt += 1\n    return cnt\n\n\nprint(count_upper(AbCdEfGhIjKlMnOpQAbCAbCdEOStUvWxYzlMnOpQrStUvWxYhIjKlMnOStAbCdEOfGhIjKlMnOpQrStUvWxhhEErrRRYzWxYzv))",
    "execution_output": 10
  },
  {
    "id": 480,
    "q_id": "HumanEval/99",
    "code": "def closest_integer(value):\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n        if val > 0:\n            return int(val) + 1\n        else:\n            return int(val) - 1\n    return rounding(float(value))\n\n\nprint(closest_integer(10))",
    "execution_output": 10
  },
  {
    "id": 481,
    "q_id": "HumanEval/99",
    "code": "def closest_integer(value):\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n        if val > 0:\n            return int(val) + 1\n        else:\n            return int(val) - 1\n    return rounding(float(value))\n\n\nprint(closest_integer(14.5))",
    "execution_output": 15
  },
  {
    "id": 482,
    "q_id": "HumanEval/99",
    "code": "def closest_integer(value):\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n        if val > 0:\n            return int(val) + 1\n        else:\n            return int(val) - 1\n    return rounding(float(value))\n\n\nprint(closest_integer(-15.5))",
    "execution_output": -16
  },
  {
    "id": 483,
    "q_id": "HumanEval/99",
    "code": "def closest_integer(value):\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n        if val > 0:\n            return int(val) + 1\n        else:\n            return int(val) - 1\n    return rounding(float(value))\n\n\nprint(closest_integer(15.3))",
    "execution_output": 15
  },
  {
    "id": 484,
    "q_id": "HumanEval/99",
    "code": "def closest_integer(value):\n\n    def rounding(val):\n        if abs(val - int(val)) != 0.5:\n            return round(val)\n        if val > 0:\n            return int(val) + 1\n        else:\n            return int(val) - 1\n    return rounding(float(value))\n\n\nprint(closest_integer(0))",
    "execution_output": 0
  },
  {
    "id": 485,
    "q_id": "HumanEval/101",
    "code": "def words_string(s):\n    words = (s.replace(\",\", \" \")).split()\n    return [word for word in words if word != \"\"]\n\n\nprint(words_string(Hi, my name is John))",
    "execution_output": [
      "Hi",
      "my",
      "name",
      "is",
      "John"
    ]
  },
  {
    "id": 486,
    "q_id": "HumanEval/101",
    "code": "def words_string(s):\n    words = (s.replace(\",\", \" \")).split()\n    return [word for word in words if word != \"\"]\n\n\nprint(words_string(One, two, three, four, five, six))",
    "execution_output": [
      "One",
      "two",
      "three",
      "four",
      "five",
      "six"
    ]
  },
  {
    "id": 487,
    "q_id": "HumanEval/101",
    "code": "def words_string(s):\n    words = (s.replace(\",\", \" \")).split()\n    return [word for word in words if word != \"\"]\n\n\nprint(words_string(One,, two, three, four, five, six,))",
    "execution_output": [
      "One",
      "two",
      "three",
      "four",
      "five",
      "six"
    ]
  },
  {
    "id": 488,
    "q_id": "HumanEval/101",
    "code": "def words_string(s):\n    words = (s.replace(\",\", \" \")).split()\n    return [word for word in words if word != \"\"]\n\n\nprint(words_string(Elephant,giraffe,,lion,zebra))",
    "execution_output": [
      "Elephant",
      "giraffe",
      "lion",
      "zebra"
    ]
  },
  {
    "id": 489,
    "q_id": "HumanEval/101",
    "code": "def words_string(s):\n    words = (s.replace(\",\", \" \")).split()\n    return [word for word in words if word != \"\"]\n\n\nprint(words_string(The quick brown fox jumps over the lazy dog))",
    "execution_output": [
      "The",
      "quick",
      "brown",
      "fox",
      "jumps",
      "over",
      "the",
      "lazy",
      "dog"
    ]
  },
  {
    "id": 490,
    "q_id": "HumanEval/102",
    "code": "def choose_num(x, y):\n\n    if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1\n\n\nprint(choose_num(12,15))",
    "execution_output": 14
  },
  {
    "id": 491,
    "q_id": "HumanEval/102",
    "code": "def choose_num(x, y):\n\n    if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1\n\n\nprint(choose_num(13,12))",
    "execution_output": -1
  },
  {
    "id": 492,
    "q_id": "HumanEval/102",
    "code": "def choose_num(x, y):\n\n    if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1\n\n\nprint(choose_num(33,12354))",
    "execution_output": 12354
  },
  {
    "id": 493,
    "q_id": "HumanEval/102",
    "code": "def choose_num(x, y):\n\n    if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1\n\n\nprint(choose_num(5234,5233))",
    "execution_output": -1
  },
  {
    "id": 494,
    "q_id": "HumanEval/102",
    "code": "def choose_num(x, y):\n\n    if x > y: return -1\n    if x == y: return y if y % 2 == 0 else -1\n    return y if y % 2 == 0 else y - 1\n\n\nprint(choose_num(6,29))",
    "execution_output": 28
  },
  {
    "id": 495,
    "q_id": "HumanEval/103",
    "code": "def rounded_avg(n, m):\n\n    if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n\nprint(rounded_avg(7,13))",
    "execution_output": "0b1010"
  },
  {
    "id": 496,
    "q_id": "HumanEval/103",
    "code": "def rounded_avg(n, m):\n\n    if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n\nprint(rounded_avg(350,902))",
    "execution_output": "0b1001110010"
  },
  {
    "id": 497,
    "q_id": "HumanEval/103",
    "code": "def rounded_avg(n, m):\n\n    if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n\nprint(rounded_avg(999999,1000000))",
    "execution_output": "0b11110100001001000000"
  },
  {
    "id": 498,
    "q_id": "HumanEval/103",
    "code": "def rounded_avg(n, m):\n\n    if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n\nprint(rounded_avg(10000,12000))",
    "execution_output": "0b10101011111000"
  },
  {
    "id": 499,
    "q_id": "HumanEval/103",
    "code": "def rounded_avg(n, m):\n\n    if n > m: return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n\nprint(rounded_avg(10000,20000))",
    "execution_output": "0b11101010011000"
  },
  {
    "id": 500,
    "q_id": "HumanEval/104",
    "code": "def unique_digits(x):\n\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n    return sorted(list(filter(judge, x)))\n\n\nprint(unique_digits([15, 33, 1422, 1]))",
    "execution_output": [
      1,
      15,
      33
    ]
  },
  {
    "id": 501,
    "q_id": "HumanEval/104",
    "code": "def unique_digits(x):\n\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n    return sorted(list(filter(judge, x)))\n\n\nprint(unique_digits([152, 323, 1422, 10]))",
    "execution_output": []
  },
  {
    "id": 502,
    "q_id": "HumanEval/104",
    "code": "def unique_digits(x):\n\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n    return sorted(list(filter(judge, x)))\n\n\nprint(unique_digits([12345, 2033, 111, 151]))",
    "execution_output": [
      111,
      151
    ]
  },
  {
    "id": 503,
    "q_id": "HumanEval/104",
    "code": "def unique_digits(x):\n\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n    return sorted(list(filter(judge, x)))\n\n\nprint(unique_digits([135, 103, 31]))",
    "execution_output": [
      31,
      135
    ]
  },
  {
    "id": 504,
    "q_id": "HumanEval/104",
    "code": "def unique_digits(x):\n\n    def judge(x):\n        for ch in str(x):\n            if int(ch) % 2 == 0:\n                return False\n        return True\n    return sorted(list(filter(judge, x)))\n\n\nprint(unique_digits([257, 369, 781, 409]))",
    "execution_output": []
  },
  {
    "id": 505,
    "q_id": "HumanEval/105",
    "code": "def by_length(arr):\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))",
    "execution_output": [
      "Eight",
      "Five",
      "Four",
      "Three",
      "Two",
      "Two",
      "One",
      "One"
    ]
  },
  {
    "id": 506,
    "q_id": "HumanEval/105",
    "code": "def by_length(arr):\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n\nprint(by_length([1, -1, 55]))",
    "execution_output": [
      "One"
    ]
  },
  {
    "id": 507,
    "q_id": "HumanEval/105",
    "code": "def by_length(arr):\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n\nprint(by_length([1, -1, 3, 2]))",
    "execution_output": [
      "Three",
      "Two",
      "One"
    ]
  },
  {
    "id": 508,
    "q_id": "HumanEval/105",
    "code": "def by_length(arr):\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n\nprint(by_length([9, 4, 8]))",
    "execution_output": [
      "Nine",
      "Eight",
      "Four"
    ]
  },
  {
    "id": 509,
    "q_id": "HumanEval/105",
    "code": "def by_length(arr):\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n\nprint(by_length([4, 8, 4, 4, 7, 6, -1, 4, 3, 1, 6]))",
    "execution_output": [
      "Eight",
      "Seven",
      "Six",
      "Six",
      "Four",
      "Four",
      "Four",
      "Four",
      "Three",
      "One"
    ]
  },
  {
    "id": 510,
    "q_id": "HumanEval/106",
    "code": "def f(n):\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n\nprint(f(0))",
    "execution_output": []
  },
  {
    "id": 511,
    "q_id": "HumanEval/106",
    "code": "def f(n):\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n\nprint(f(100))",
    "execution_output": [
      1,
      2,
      6,
      24,
      15,
      720,
      28,
      40320,
      45,
      3628800,
      66,
      479001600,
      91,
      87178291200,
      120,
      20922789888000,
      153,
      6402373705728000,
      190,
      2432902008176640000,
      231,
      1124000727777607680000,
      276,
      620448401733239439360000,
      325,
      403291461126605635584000000,
      378,
      304888344611713860501504000000,
      435,
      265252859812191058636308480000000,
      496,
      263130836933693530167218012160000000,
      561,
      295232799039604140847618609643520000000,
      630,
      371993326789901217467999448150835200000000,
      703,
      523022617466601111760007224100074291200000000,
      780,
      815915283247897734345611269596115894272000000000,
      861,
      1405006117752879898543142606244511569936384000000000,
      946,
      2658271574788448768043625811014615890319638528000000000,
      1035,
      5502622159812088949850305428800254892961651752960000000000,
      1128,
      12413915592536072670862289047373375038521486354677760000000000,
      1225,
      30414093201713378043612608166064768844377641568960512000000000000,
      1326,
      80658175170943878571660636856403766975289505440883277824000000000000,
      1431,
      230843697339241380472092742683027581083278564571807941132288000000000000,
      1540,
      710998587804863451854045647463724949736497978881168458687447040000000000000,
      1653,
      2350561331282878571829474910515074683828862318181142924420699914240000000000000,
      1770,
      8320987112741390144276341183223364380754172606361245952449277696409600000000000000,
      1891,
      31469973260387937525653122354950764088012280797258232192163168247821107200000000000000,
      2016,
      126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000,
      2145,
      544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000,
      2278,
      2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000,
      2415,
      11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000,
      2556,
      61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000,
      2701,
      330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000,
      2850,
      1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000,
      3003,
      11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000,
      3160,
      71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000,
      3321,
      475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000,
      3486,
      3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000,
      3655,
      24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000,
      3828,
      185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000,
      4005,
      1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000,
      4186,
      12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000,
      4371,
      108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000,
      4560,
      991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000,
      4753,
      9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000,
      4950,
      93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
    ]
  },
  {
    "id": 512,
    "q_id": "HumanEval/106",
    "code": "def f(n):\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n\nprint(f(5))",
    "execution_output": [
      1,
      2,
      6,
      24,
      15
    ]
  },
  {
    "id": 513,
    "q_id": "HumanEval/106",
    "code": "def f(n):\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n\nprint(f(7))",
    "execution_output": [
      1,
      2,
      6,
      24,
      15,
      720,
      28
    ]
  },
  {
    "id": 514,
    "q_id": "HumanEval/106",
    "code": "def f(n):\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n\nprint(f(15))",
    "execution_output": [
      1,
      2,
      6,
      24,
      15,
      720,
      28,
      40320,
      45,
      3628800,
      66,
      479001600,
      91,
      87178291200,
      120
    ]
  },
  {
    "id": 515,
    "q_id": "HumanEval/107",
    "code": "def even_odd_palindrome(n):\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n    return even_cnt, odd_cnt\n\n\nprint(even_odd_palindrome(123))",
    "execution_output": [
      8,
      13
    ]
  },
  {
    "id": 516,
    "q_id": "HumanEval/107",
    "code": "def even_odd_palindrome(n):\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n    return even_cnt, odd_cnt\n\n\nprint(even_odd_palindrome(12))",
    "execution_output": [
      4,
      6
    ]
  },
  {
    "id": 517,
    "q_id": "HumanEval/107",
    "code": "def even_odd_palindrome(n):\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n    return even_cnt, odd_cnt\n\n\nprint(even_odd_palindrome(63))",
    "execution_output": [
      6,
      8
    ]
  },
  {
    "id": 518,
    "q_id": "HumanEval/107",
    "code": "def even_odd_palindrome(n):\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n    return even_cnt, odd_cnt\n\n\nprint(even_odd_palindrome(1000))",
    "execution_output": [
      48,
      60
    ]
  },
  {
    "id": 519,
    "q_id": "HumanEval/107",
    "code": "def even_odd_palindrome(n):\n\n    odd_cnt, even_cnt = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 1:\n                odd_cnt += 1\n            else:\n                even_cnt += 1\n    return even_cnt, odd_cnt\n\n\nprint(even_odd_palindrome(500))",
    "execution_output": [
      28,
      30
    ]
  },
  {
    "id": 520,
    "q_id": "HumanEval/108",
    "code": "def count_nums(arr):\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))\n\n\nprint(count_nums([-1, -2, 0]))",
    "execution_output": 0
  },
  {
    "id": 521,
    "q_id": "HumanEval/108",
    "code": "def count_nums(arr):\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))\n\n\nprint(count_nums([1, 1, 2, -2, 3, 4, 5]))",
    "execution_output": 6
  },
  {
    "id": 522,
    "q_id": "HumanEval/108",
    "code": "def count_nums(arr):\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))\n\n\nprint(count_nums([1, 6, 9, -6, 0, 1, 5]))",
    "execution_output": 5
  },
  {
    "id": 523,
    "q_id": "HumanEval/108",
    "code": "def count_nums(arr):\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))\n\n\nprint(count_nums([1, 100, 98, -7, 1, -1]))",
    "execution_output": 4
  },
  {
    "id": 524,
    "q_id": "HumanEval/108",
    "code": "def count_nums(arr):\n    def judge(x: int) -> int:\n        l = list(str(x))\n        if l[0] == \"-\":\n            l = l[1:]\n            l = list(map(int, l))\n            l[0] = -l[0]\n        else:\n            l = list(map(int, l))\n        return 1 if sum(l) > 0 else 0\n    return sum(map(judge, arr))\n\n\nprint(count_nums([303, -405, -405, -606]))",
    "execution_output": 3
  },
  {
    "id": 525,
    "q_id": "HumanEval/109",
    "code": "def move_one_ball(arr):\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n\n\nprint(move_one_ball([3, 4, 5, 1, 2]))",
    "execution_output": true
  },
  {
    "id": 526,
    "q_id": "HumanEval/109",
    "code": "def move_one_ball(arr):\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n\n\nprint(move_one_ball([3, 5, 10, 1, 2]))",
    "execution_output": true
  },
  {
    "id": 527,
    "q_id": "HumanEval/109",
    "code": "def move_one_ball(arr):\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n\n\nprint(move_one_ball([3, 5, 4, 1, 2]))",
    "execution_output": false
  },
  {
    "id": 528,
    "q_id": "HumanEval/109",
    "code": "def move_one_ball(arr):\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n\n\nprint(move_one_ball([1]))",
    "execution_output": true
  },
  {
    "id": 529,
    "q_id": "HumanEval/109",
    "code": "def move_one_ball(arr):\n    \n    sorted_arr = sorted(arr)\n    if arr == sorted_arr: return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n\n\nprint(move_one_ball([2, 1]))",
    "execution_output": true
  },
  {
    "id": 530,
    "q_id": "HumanEval/110",
    "code": "def exchange(lst1, lst2):\n\n    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))\n    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    return \"YES\" if cnt_odd <= cnt_even else \"NO\"\n\n\nprint(exchange([1, 2, 3, 4],[1, 2, 3, 4]))",
    "execution_output": "YES"
  },
  {
    "id": 531,
    "q_id": "HumanEval/110",
    "code": "def exchange(lst1, lst2):\n\n    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))\n    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    return \"YES\" if cnt_odd <= cnt_even else \"NO\"\n\n\nprint(exchange([1, 2, 3, 4],[1, 5, 3, 4]))",
    "execution_output": "NO"
  },
  {
    "id": 532,
    "q_id": "HumanEval/110",
    "code": "def exchange(lst1, lst2):\n\n    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))\n    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    return \"YES\" if cnt_odd <= cnt_even else \"NO\"\n\n\nprint(exchange([5, 7, 3],[2, 6, 4]))",
    "execution_output": "YES"
  },
  {
    "id": 533,
    "q_id": "HumanEval/110",
    "code": "def exchange(lst1, lst2):\n\n    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))\n    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    return \"YES\" if cnt_odd <= cnt_even else \"NO\"\n\n\nprint(exchange([5, 7, 3],[2, 6, 3]))",
    "execution_output": "NO"
  },
  {
    "id": 534,
    "q_id": "HumanEval/110",
    "code": "def exchange(lst1, lst2):\n\n    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))\n    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))\n    return \"YES\" if cnt_odd <= cnt_even else \"NO\"\n\n\nprint(exchange([3, 2, 6, 1, 8, 9],[3, 5, 5, 1, 1, 1]))",
    "execution_output": "NO"
  },
  {
    "id": 535,
    "q_id": "HumanEval/111",
    "code": "def histogram(test):\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n\nprint(histogram(a b b a))",
    "execution_output": {
      "a": 2,
      "b": 2
    }
  },
  {
    "id": 536,
    "q_id": "HumanEval/111",
    "code": "def histogram(test):\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n\nprint(histogram(b b b b a))",
    "execution_output": {
      "b": 4
    }
  },
  {
    "id": 537,
    "q_id": "HumanEval/111",
    "code": "def histogram(test):\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n\nprint(histogram(a a a a a a a b b b b b b b))",
    "execution_output": {
      "a": 7,
      "b": 7
    }
  },
  {
    "id": 538,
    "q_id": "HumanEval/111",
    "code": "def histogram(test):\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n\nprint(histogram(p  l  e))",
    "execution_output": {
      "p": 1,
      "l": 1,
      "e": 1
    }
  },
  {
    "id": 539,
    "q_id": "HumanEval/111",
    "code": "def histogram(test):\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n\nprint(histogram(h i j j    k l  m   p))",
    "execution_output": {
      "j": 2
    }
  },
  {
    "id": 540,
    "q_id": "HumanEval/112",
    "code": "def reverse_delete(s,c):\n    ss = \"\".join(filter(lambda ch: ch not in c, s))\n    return ss, ss == ss[::-1]\n\n\nprint(reverse_delete(abcde,ae))",
    "execution_output": [
      "bcd",
      false
    ]
  },
  {
    "id": 541,
    "q_id": "HumanEval/112",
    "code": "def reverse_delete(s,c):\n    ss = \"\".join(filter(lambda ch: ch not in c, s))\n    return ss, ss == ss[::-1]\n\n\nprint(reverse_delete(abcdef,b))",
    "execution_output": [
      "acdef",
      false
    ]
  },
  {
    "id": 542,
    "q_id": "HumanEval/112",
    "code": "def reverse_delete(s,c):\n    ss = \"\".join(filter(lambda ch: ch not in c, s))\n    return ss, ss == ss[::-1]\n\n\nprint(reverse_delete(abcdedcba,ab))",
    "execution_output": [
      "cdedc",
      true
    ]
  },
  {
    "id": 543,
    "q_id": "HumanEval/112",
    "code": "def reverse_delete(s,c):\n    ss = \"\".join(filter(lambda ch: ch not in c, s))\n    return ss, ss == ss[::-1]\n\n\nprint(reverse_delete(dwik,w))",
    "execution_output": [
      "dik",
      false
    ]
  },
  {
    "id": 544,
    "q_id": "HumanEval/112",
    "code": "def reverse_delete(s,c):\n    ss = \"\".join(filter(lambda ch: ch not in c, s))\n    return ss, ss == ss[::-1]\n\n\nprint(reverse_delete(a,a))",
    "execution_output": [
      "",
      true
    ]
  },
  {
    "id": 545,
    "q_id": "HumanEval/113",
    "code": "def odd_count(lst):\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n    return ans\n\n\nprint(odd_count(['1234567']))",
    "execution_output": [
      "the number of odd elements 4n the str4ng 4 of the 4nput."
    ]
  },
  {
    "id": 546,
    "q_id": "HumanEval/113",
    "code": "def odd_count(lst):\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n    return ans\n\n\nprint(odd_count(['3', '11111111']))",
    "execution_output": [
      "the number of odd elements 1n the str1ng 1 of the 1nput.",
      "the number of odd elements 8n the str8ng 8 of the 8nput."
    ]
  },
  {
    "id": 547,
    "q_id": "HumanEval/113",
    "code": "def odd_count(lst):\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n    return ans\n\n\nprint(odd_count(['2468']))",
    "execution_output": [
      "the number of odd elements 0n the str0ng 0 of the 0nput."
    ]
  },
  {
    "id": 548,
    "q_id": "HumanEval/113",
    "code": "def odd_count(lst):\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n    return ans\n\n\nprint(odd_count(['13579', '2468', '357']))",
    "execution_output": [
      "the number of odd elements 5n the str5ng 5 of the 5nput.",
      "the number of odd elements 0n the str0ng 0 of the 0nput.",
      "the number of odd elements 3n the str3ng 3 of the 3nput."
    ]
  },
  {
    "id": 549,
    "q_id": "HumanEval/113",
    "code": "def odd_count(lst):\n\n    ans, template = [], \"the number of odd elements in the string i of the input.\"\n    for s in lst:\n        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))\n        ans.append(template.replace(\"i\", str(odd_cnt)))\n    return ans\n\n\nprint(odd_count(['778855588', '24628', '3', '000', '333', '24628']))",
    "execution_output": [
      "the number of odd elements 5n the str5ng 5 of the 5nput.",
      "the number of odd elements 0n the str0ng 0 of the 0nput.",
      "the number of odd elements 1n the str1ng 1 of the 1nput.",
      "the number of odd elements 0n the str0ng 0 of the 0nput.",
      "the number of odd elements 3n the str3ng 3 of the 3nput.",
      "the number of odd elements 0n the str0ng 0 of the 0nput."
    ]
  },
  {
    "id": 550,
    "q_id": "HumanEval/114",
    "code": "def minSubArraySum(nums):\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for x in nums:\n        s += x\n        ans = min(ans, s)\n        if s >= 0: s = 0\n    return ans\n\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))",
    "execution_output": 1
  },
  {
    "id": 551,
    "q_id": "HumanEval/114",
    "code": "def minSubArraySum(nums):\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for x in nums:\n        s += x\n        ans = min(ans, s)\n        if s >= 0: s = 0\n    return ans\n\n\nprint(minSubArraySum([-1, -2, -3]))",
    "execution_output": -6
  },
  {
    "id": 552,
    "q_id": "HumanEval/114",
    "code": "def minSubArraySum(nums):\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for x in nums:\n        s += x\n        ans = min(ans, s)\n        if s >= 0: s = 0\n    return ans\n\n\nprint(minSubArraySum([-1, -2, -3, 2, -10]))",
    "execution_output": -14
  },
  {
    "id": 553,
    "q_id": "HumanEval/114",
    "code": "def minSubArraySum(nums):\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for x in nums:\n        s += x\n        ans = min(ans, s)\n        if s >= 0: s = 0\n    return ans\n\n\nprint(minSubArraySum([-9999999999999999]))",
    "execution_output": -9999999999999999
  },
  {
    "id": 554,
    "q_id": "HumanEval/114",
    "code": "def minSubArraySum(nums):\n\n    if all(x >= 0 for x in nums): return min(nums)\n    s, ans = 0, 0\n    for x in nums:\n        s += x\n        ans = min(ans, s)\n        if s >= 0: s = 0\n    return ans\n\n\nprint(minSubArraySum([0, 10, 20, 1000000]))",
    "execution_output": 0
  },
  {
    "id": 555,
    "q_id": "HumanEval/115",
    "code": "def max_fill(grid, capacity):\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n\nprint(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],1))",
    "execution_output": 6
  },
  {
    "id": 556,
    "q_id": "HumanEval/115",
    "code": "def max_fill(grid, capacity):\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n\nprint(max_fill([[0, 0, 0], [0, 0, 0]],5))",
    "execution_output": 0
  },
  {
    "id": 557,
    "q_id": "HumanEval/115",
    "code": "def max_fill(grid, capacity):\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n\nprint(max_fill([[1, 1, 1, 1], [1, 1, 1, 1]],2))",
    "execution_output": 4
  },
  {
    "id": 558,
    "q_id": "HumanEval/115",
    "code": "def max_fill(grid, capacity):\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n\nprint(max_fill([[1, 1, 1, 1], [1, 1, 1, 1]],9))",
    "execution_output": 2
  },
  {
    "id": 559,
    "q_id": "HumanEval/115",
    "code": "def max_fill(grid, capacity):\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n\nprint(max_fill([[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]],2))",
    "execution_output": 5
  },
  {
    "id": 560,
    "q_id": "HumanEval/116",
    "code": "def sort_array(arr):\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        if x1 != y1: return x1 - y1\n        return x - y\n    return sorted(arr, key=cmp_to_key(cmp))\n\n\nprint(sort_array([1, 5, 2, 3, 4]))",
    "execution_output": [
      1,
      2,
      4,
      3,
      5
    ]
  },
  {
    "id": 561,
    "q_id": "HumanEval/116",
    "code": "def sort_array(arr):\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        if x1 != y1: return x1 - y1\n        return x - y\n    return sorted(arr, key=cmp_to_key(cmp))\n\n\nprint(sort_array([-2, -3, -4, -5, -6]))",
    "execution_output": [
      -4,
      -2,
      -6,
      -5,
      -3
    ]
  },
  {
    "id": 562,
    "q_id": "HumanEval/116",
    "code": "def sort_array(arr):\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        if x1 != y1: return x1 - y1\n        return x - y\n    return sorted(arr, key=cmp_to_key(cmp))\n\n\nprint(sort_array([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))",
    "execution_output": [
      2,
      2,
      4,
      4,
      3,
      3,
      5,
      5,
      5,
      7,
      77
    ]
  },
  {
    "id": 563,
    "q_id": "HumanEval/116",
    "code": "def sort_array(arr):\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        if x1 != y1: return x1 - y1\n        return x - y\n    return sorted(arr, key=cmp_to_key(cmp))\n\n\nprint(sort_array([3, 6, 44, 12, 32, 5]))",
    "execution_output": [
      32,
      3,
      5,
      6,
      12,
      44
    ]
  },
  {
    "id": 564,
    "q_id": "HumanEval/116",
    "code": "def sort_array(arr):\n    from functools import cmp_to_key\n    def cmp(x: int, y: int) -> int:\n        x1 = len(list(filter(lambda ch: ch == \"1\", bin(x))))\n        y1 = len(list(filter(lambda ch: ch == \"1\", bin(y))))\n        if x1 != y1: return x1 - y1\n        return x - y\n    return sorted(arr, key=cmp_to_key(cmp))\n\n\nprint(sort_array([15, 0, 10101010, 0, 100000]))",
    "execution_output": [
      0,
      0,
      15,
      100000,
      10101010
    ]
  },
  {
    "id": 565,
    "q_id": "HumanEval/117",
    "code": "def select_words(s, n):\n\n    ans = []\n    for word in s.split(\" \"):\n        if word != \"\":\n            c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))\n            if c_cnt == n: ans.append(word)\n    return ans\n\n\nprint(select_words(Mary had a little lamb,4))",
    "execution_output": [
      "little"
    ]
  },
  {
    "id": 566,
    "q_id": "HumanEval/117",
    "code": "def select_words(s, n):\n\n    ans = []\n    for word in s.split(\" \"):\n        if word != \"\":\n            c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))\n            if c_cnt == n: ans.append(word)\n    return ans\n\n\nprint(select_words(Mary had a little lamb,3))",
    "execution_output": [
      "Mary",
      "lamb"
    ]
  },
  {
    "id": 567,
    "q_id": "HumanEval/117",
    "code": "def select_words(s, n):\n\n    ans = []\n    for word in s.split(\" \"):\n        if word != \"\":\n            c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))\n            if c_cnt == n: ans.append(word)\n    return ans\n\n\nprint(select_words(simple white space,2))",
    "execution_output": []
  },
  {
    "id": 568,
    "q_id": "HumanEval/117",
    "code": "def select_words(s, n):\n\n    ans = []\n    for word in s.split(\" \"):\n        if word != \"\":\n            c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))\n            if c_cnt == n: ans.append(word)\n    return ans\n\n\nprint(select_words(,4))",
    "execution_output": []
  },
  {
    "id": 569,
    "q_id": "HumanEval/117",
    "code": "def select_words(s, n):\n\n    ans = []\n    for word in s.split(\" \"):\n        if word != \"\":\n            c_cnt = len(list(filter(lambda ch: ch not in \"aeiouAEIOU\", word)))\n            if c_cnt == n: ans.append(word)\n    return ans\n\n\nprint(select_words(random words are fun to write,5))",
    "execution_output": []
  },
  {
    "id": 570,
    "q_id": "HumanEval/118",
    "code": "def get_closest_vowel(word):\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n\nprint(get_closest_vowel(yogurt))",
    "execution_output": "u"
  },
  {
    "id": 571,
    "q_id": "HumanEval/118",
    "code": "def get_closest_vowel(word):\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n\nprint(get_closest_vowel(full))",
    "execution_output": "u"
  },
  {
    "id": 572,
    "q_id": "HumanEval/118",
    "code": "def get_closest_vowel(word):\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n\nprint(get_closest_vowel(easy))",
    "execution_output": ""
  },
  {
    "id": 573,
    "q_id": "HumanEval/118",
    "code": "def get_closest_vowel(word):\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n\nprint(get_closest_vowel(eAsy))",
    "execution_output": ""
  },
  {
    "id": 574,
    "q_id": "HumanEval/118",
    "code": "def get_closest_vowel(word):\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n\nprint(get_closest_vowel(ali))",
    "execution_output": ""
  },
  {
    "id": 575,
    "q_id": "HumanEval/119",
    "code": "def match_parens(lst):\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            cnt = cnt + 1 if ch == \"(\" else cnt - 1\n            if cnt < 0: return False\n        return cnt == 0\n    return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No\"\n\n\nprint(match_parens([')', ')']))",
    "execution_output": "No"
  },
  {
    "id": 576,
    "q_id": "HumanEval/119",
    "code": "def match_parens(lst):\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            cnt = cnt + 1 if ch == \"(\" else cnt - 1\n            if cnt < 0: return False\n        return cnt == 0\n    return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No\"\n\n\nprint(match_parens(['(()(())', '())())']))",
    "execution_output": "No"
  },
  {
    "id": 577,
    "q_id": "HumanEval/119",
    "code": "def match_parens(lst):\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            cnt = cnt + 1 if ch == \"(\" else cnt - 1\n            if cnt < 0: return False\n        return cnt == 0\n    return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No\"\n\n\nprint(match_parens([')())', '(()()(']))",
    "execution_output": "Yes"
  },
  {
    "id": 578,
    "q_id": "HumanEval/119",
    "code": "def match_parens(lst):\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            cnt = cnt + 1 if ch == \"(\" else cnt - 1\n            if cnt < 0: return False\n        return cnt == 0\n    return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No\"\n\n\nprint(match_parens(['(())))', '(()())((']))",
    "execution_output": "Yes"
  },
  {
    "id": 579,
    "q_id": "HumanEval/119",
    "code": "def match_parens(lst):\n\n    def valid_parens(s: str) -> bool:\n        cnt = 0\n        for ch in s:\n            cnt = cnt + 1 if ch == \"(\" else cnt - 1\n            if cnt < 0: return False\n        return cnt == 0\n    return \"Yes\" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else \"No\"\n\n\nprint(match_parens(['()', '())']))",
    "execution_output": "No"
  },
  {
    "id": 580,
    "q_id": "HumanEval/120",
    "code": "def maximum(arr, k):\n\n    return sorted(sorted(arr)[::-1][:k])\n\n\nprint(maximum([-3, -4, 5],3))",
    "execution_output": [
      -4,
      -3,
      5
    ]
  },
  {
    "id": 581,
    "q_id": "HumanEval/120",
    "code": "def maximum(arr, k):\n\n    return sorted(sorted(arr)[::-1][:k])\n\n\nprint(maximum([4, -4, 4],2))",
    "execution_output": [
      4,
      4
    ]
  },
  {
    "id": 582,
    "q_id": "HumanEval/120",
    "code": "def maximum(arr, k):\n\n    return sorted(sorted(arr)[::-1][:k])\n\n\nprint(maximum([123, -123, 20, 0, 1, 2, -3],3))",
    "execution_output": [
      2,
      20,
      123
    ]
  },
  {
    "id": 583,
    "q_id": "HumanEval/120",
    "code": "def maximum(arr, k):\n\n    return sorted(sorted(arr)[::-1][:k])\n\n\nprint(maximum([-123, 20, 0, 1, 2, -3],4))",
    "execution_output": [
      0,
      1,
      2,
      20
    ]
  },
  {
    "id": 584,
    "q_id": "HumanEval/120",
    "code": "def maximum(arr, k):\n\n    return sorted(sorted(arr)[::-1][:k])\n\n\nprint(maximum([5, 15, 0, 3, -13, -8, 0],7))",
    "execution_output": [
      -13,
      -8,
      0,
      0,
      3,
      5,
      15
    ]
  },
  {
    "id": 585,
    "q_id": "HumanEval/121",
    "code": "def solution(lst):\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n\nprint(solution([5, 8, 7, 1]))",
    "execution_output": 12
  },
  {
    "id": 586,
    "q_id": "HumanEval/121",
    "code": "def solution(lst):\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n\nprint(solution([3, 3, 3, 3, 3]))",
    "execution_output": 9
  },
  {
    "id": 587,
    "q_id": "HumanEval/121",
    "code": "def solution(lst):\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n\nprint(solution([30, 13, 24, 321]))",
    "execution_output": 0
  },
  {
    "id": 588,
    "q_id": "HumanEval/121",
    "code": "def solution(lst):\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n\nprint(solution([30, 13, 23, 32]))",
    "execution_output": 23
  },
  {
    "id": 589,
    "q_id": "HumanEval/121",
    "code": "def solution(lst):\n\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)\n\n\nprint(solution([5, 9]))",
    "execution_output": 5
  },
  {
    "id": 590,
    "q_id": "HumanEval/122",
    "code": "def add_elements(arr, k):\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n\nprint(add_elements([1, -2, -3, 41, 57, 76, 87, 88, 99],3))",
    "execution_output": -4
  },
  {
    "id": 591,
    "q_id": "HumanEval/122",
    "code": "def add_elements(arr, k):\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n\nprint(add_elements([111, 121, 3, 4000, 5, 6],2))",
    "execution_output": 0
  },
  {
    "id": 592,
    "q_id": "HumanEval/122",
    "code": "def add_elements(arr, k):\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n\nprint(add_elements([11, 21, 3, 90, 5, 6, 7, 8, 9],4))",
    "execution_output": 125
  },
  {
    "id": 593,
    "q_id": "HumanEval/122",
    "code": "def add_elements(arr, k):\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n\nprint(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],4))",
    "execution_output": 24
  },
  {
    "id": 594,
    "q_id": "HumanEval/122",
    "code": "def add_elements(arr, k):\n\n    def digits(x: int) -> int:\n        s = str(x)\n        return len(s) - 1 if s[0] == \"-\" else len(s)\n    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))\n\n\nprint(add_elements([1],1))",
    "execution_output": 1
  },
  {
    "id": 595,
    "q_id": "HumanEval/123",
    "code": "def get_odd_collatz(n):\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1: ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)\n\n\nprint(get_odd_collatz(1))",
    "execution_output": [
      1
    ]
  },
  {
    "id": 596,
    "q_id": "HumanEval/123",
    "code": "def get_odd_collatz(n):\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1: ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)\n\n\nprint(get_odd_collatz(14))",
    "execution_output": [
      1,
      5,
      7,
      11,
      13,
      17
    ]
  },
  {
    "id": 597,
    "q_id": "HumanEval/123",
    "code": "def get_odd_collatz(n):\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1: ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)\n\n\nprint(get_odd_collatz(5))",
    "execution_output": [
      1,
      5
    ]
  },
  {
    "id": 598,
    "q_id": "HumanEval/123",
    "code": "def get_odd_collatz(n):\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1: ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)\n\n\nprint(get_odd_collatz(12))",
    "execution_output": [
      1,
      3,
      5
    ]
  },
  {
    "id": 599,
    "q_id": "HumanEval/123",
    "code": "def get_odd_collatz(n):\n\n    ans, x = [], n\n    while x != 1:\n        if x % 2 == 1: ans.append(x)\n        x = x // 2 if x % 2 == 0 else x * 3 + 1\n    ans.append(1)\n    return sorted(ans)\n\n\nprint(get_odd_collatz(2))",
    "execution_output": [
      1
    ]
  },
  {
    "id": 600,
    "q_id": "HumanEval/124",
    "code": "def valid_date(date):\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d = int(m), int(d)\n    if not 1 <= m <= 12: return False\n    if not 1 <= d <= days[m-1]: return False\n    return True\n\n\nprint(valid_date(03-11-2000))",
    "execution_output": true
  },
  {
    "id": 601,
    "q_id": "HumanEval/124",
    "code": "def valid_date(date):\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d = int(m), int(d)\n    if not 1 <= m <= 12: return False\n    if not 1 <= d <= days[m-1]: return False\n    return True\n\n\nprint(valid_date(15-01-2012))",
    "execution_output": false
  },
  {
    "id": 602,
    "q_id": "HumanEval/124",
    "code": "def valid_date(date):\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d = int(m), int(d)\n    if not 1 <= m <= 12: return False\n    if not 1 <= d <= days[m-1]: return False\n    return True\n\n\nprint(valid_date(06-04-2020))",
    "execution_output": true
  },
  {
    "id": 603,
    "q_id": "HumanEval/124",
    "code": "def valid_date(date):\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d = int(m), int(d)\n    if not 1 <= m <= 12: return False\n    if not 1 <= d <= days[m-1]: return False\n    return True\n\n\nprint(valid_date(02-29-2021))",
    "execution_output": true
  },
  {
    "id": 604,
    "q_id": "HumanEval/124",
    "code": "def valid_date(date):\n    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) != 10: return False\n    if date[2] != \"-\" or date[5] != \"-\": return False\n    m, d, y = date[:2], date[3:5], date[6:]\n    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False\n    m, d = int(m), int(d)\n    if not 1 <= m <= 12: return False\n    if not 1 <= d <= days[m-1]: return False\n    return True\n\n\nprint(valid_date(13-01-2000))",
    "execution_output": false
  },
  {
    "id": 605,
    "q_id": "HumanEval/125",
    "code": "def split_words(txt):\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    cnt = 0\n    for ch in txt:\n        if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1\n    return cnt\n\n\nprint(split_words(abcdef))",
    "execution_output": 3
  },
  {
    "id": 606,
    "q_id": "HumanEval/125",
    "code": "def split_words(txt):\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    cnt = 0\n    for ch in txt:\n        if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1\n    return cnt\n\n\nprint(split_words(Hello?))",
    "execution_output": 2
  },
  {
    "id": 607,
    "q_id": "HumanEval/125",
    "code": "def split_words(txt):\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    cnt = 0\n    for ch in txt:\n        if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1\n    return cnt\n\n\nprint(split_words(123,456))",
    "execution_output": [
      "123",
      "456"
    ]
  },
  {
    "id": 608,
    "q_id": "HumanEval/125",
    "code": "def split_words(txt):\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    cnt = 0\n    for ch in txt:\n        if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1\n    return cnt\n\n\nprint(split_words(abce deg))",
    "execution_output": [
      "abce",
      "deg"
    ]
  },
  {
    "id": 609,
    "q_id": "HumanEval/125",
    "code": "def split_words(txt):\n    whitespace = tuple(' \\n\\r\\t')\n    if any([x in txt for x in whitespace]): return txt.split()\n    if \",\" in txt: return txt.split(\",\")\n    cnt = 0\n    for ch in txt:\n        if ch.islower() and (ord(ch) - ord(\"a\")) % 2 == 1: cnt += 1\n    return cnt\n\n\nprint(split_words(aaab cdg deg12344a,bbb))",
    "execution_output": [
      "aaab",
      "cdg",
      "deg12344a,bbb"
    ]
  },
  {
    "id": 610,
    "q_id": "HumanEval/126",
    "code": "def is_sorted(lst):\n\n    count = dict()\n    for x in lst:\n        if x not in count: count[x] = 0\n        count[x] += 1\n        if count[x] > 2: return False\n    return lst == sorted(lst)\n\n\nprint(is_sorted([5]))",
    "execution_output": true
  },
  {
    "id": 611,
    "q_id": "HumanEval/126",
    "code": "def is_sorted(lst):\n\n    count = dict()\n    for x in lst:\n        if x not in count: count[x] = 0\n        count[x] += 1\n        if count[x] > 2: return False\n    return lst == sorted(lst)\n\n\nprint(is_sorted([1, 3, 2, 4, 5]))",
    "execution_output": false
  },
  {
    "id": 612,
    "q_id": "HumanEval/126",
    "code": "def is_sorted(lst):\n\n    count = dict()\n    for x in lst:\n        if x not in count: count[x] = 0\n        count[x] += 1\n        if count[x] > 2: return False\n    return lst == sorted(lst)\n\n\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))",
    "execution_output": false
  },
  {
    "id": 613,
    "q_id": "HumanEval/126",
    "code": "def is_sorted(lst):\n\n    count = dict()\n    for x in lst:\n        if x not in count: count[x] = 0\n        count[x] += 1\n        if count[x] > 2: return False\n    return lst == sorted(lst)\n\n\nprint(is_sorted([3, 2, 1]))",
    "execution_output": false
  },
  {
    "id": 614,
    "q_id": "HumanEval/126",
    "code": "def is_sorted(lst):\n\n    count = dict()\n    for x in lst:\n        if x not in count: count[x] = 0\n        count[x] += 1\n        if count[x] > 2: return False\n    return lst == sorted(lst)\n\n\nprint(is_sorted([1, 2, 2, 3, 4, 4, 5]))",
    "execution_output": true
  },
  {
    "id": 615,
    "q_id": "HumanEval/127",
    "code": "def intersection(interval1, interval2):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO\"\n\n\nprint(intersection([1, 2],[2, 3]))",
    "execution_output": "NO"
  },
  {
    "id": 616,
    "q_id": "HumanEval/127",
    "code": "def intersection(interval1, interval2):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO\"\n\n\nprint(intersection([-3, -1],[-5, 5]))",
    "execution_output": "YES"
  },
  {
    "id": 617,
    "q_id": "HumanEval/127",
    "code": "def intersection(interval1, interval2):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO\"\n\n\nprint(intersection([-11, 2],[-1, -1]))",
    "execution_output": "NO"
  },
  {
    "id": 618,
    "q_id": "HumanEval/127",
    "code": "def intersection(interval1, interval2):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO\"\n\n\nprint(intersection([1, 2],[3, 5]))",
    "execution_output": "NO"
  },
  {
    "id": 619,
    "q_id": "HumanEval/127",
    "code": "def intersection(interval1, interval2):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1\n    l, r = interval2[0], min(interval1[1], interval2[1])\n    return \"YES\" if is_prime(r - l) else \"NO\"\n\n\nprint(intersection([4, 10],[-1, 7]))",
    "execution_output": "YES"
  },
  {
    "id": 620,
    "q_id": "HumanEval/128",
    "code": "def prod_signs(arr):\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n    return s * sgn\n\n\nprint(prod_signs([1, 2, 2, -4]))",
    "execution_output": -9
  },
  {
    "id": 621,
    "q_id": "HumanEval/128",
    "code": "def prod_signs(arr):\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n    return s * sgn\n\n\nprint(prod_signs([0, 1]))",
    "execution_output": 0
  },
  {
    "id": 622,
    "q_id": "HumanEval/128",
    "code": "def prod_signs(arr):\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n    return s * sgn\n\n\nprint(prod_signs([-1, 1, -1, 1]))",
    "execution_output": 4
  },
  {
    "id": 623,
    "q_id": "HumanEval/128",
    "code": "def prod_signs(arr):\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n    return s * sgn\n\n\nprint(prod_signs([-1, 1, 1, 1]))",
    "execution_output": -4
  },
  {
    "id": 624,
    "q_id": "HumanEval/128",
    "code": "def prod_signs(arr):\n    if arr == []: return None\n    if 0 in arr: return 0\n    s, sgn = 0, 1\n    for x in arr:\n        s += abs(x)\n        sgn *= (x // abs(x))\n    return s * sgn\n\n\nprint(prod_signs([2, 1, 1, 0, -1, 0]))",
    "execution_output": 0
  },
  {
    "id": 625,
    "q_id": "HumanEval/129",
    "code": "def minPath(grid, k):\n\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n    return [1 if i % 2 == 0 else mn for i in range(k)]\n\n\nprint(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],3))",
    "execution_output": [
      1,
      2,
      1
    ]
  },
  {
    "id": 626,
    "q_id": "HumanEval/129",
    "code": "def minPath(grid, k):\n\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n    return [1 if i % 2 == 0 else mn for i in range(k)]\n\n\nprint(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]],1))",
    "execution_output": [
      1
    ]
  },
  {
    "id": 627,
    "q_id": "HumanEval/129",
    "code": "def minPath(grid, k):\n\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n    return [1 if i % 2 == 0 else mn for i in range(k)]\n\n\nprint(minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]],4))",
    "execution_output": [
      1,
      2,
      1,
      2
    ]
  },
  {
    "id": 628,
    "q_id": "HumanEval/129",
    "code": "def minPath(grid, k):\n\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n    return [1 if i % 2 == 0 else mn for i in range(k)]\n\n\nprint(minPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]],7))",
    "execution_output": [
      1,
      10,
      1,
      10,
      1,
      10,
      1
    ]
  },
  {
    "id": 629,
    "q_id": "HumanEval/129",
    "code": "def minPath(grid, k):\n\n    N = len(grid)\n    x, y = 0, 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                x, y = i, j\n    mn = N * N\n    if x > 0: mn = min(mn, grid[x - 1][y])\n    if x < N - 1: mn = min(mn, grid[x + 1][y])\n    if y > 0: mn = min(mn, grid[x][y - 1])\n    if y < N - 1: mn = min(mn, grid[x][y + 1])\n    return [1 if i % 2 == 0 else mn for i in range(k)]\n\n\nprint(minPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]],5))",
    "execution_output": [
      1,
      7,
      1,
      7,
      1
    ]
  },
  {
    "id": 630,
    "q_id": "HumanEval/131",
    "code": "def digits(n):\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        if int(ch) % 2 == 1:\n            has_odd = True\n            prod *= int(ch)\n    return 0 if not has_odd else prod\n\n\nprint(digits(5))",
    "execution_output": 5
  },
  {
    "id": 631,
    "q_id": "HumanEval/131",
    "code": "def digits(n):\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        if int(ch) % 2 == 1:\n            has_odd = True\n            prod *= int(ch)\n    return 0 if not has_odd else prod\n\n\nprint(digits(54))",
    "execution_output": 5
  },
  {
    "id": 632,
    "q_id": "HumanEval/131",
    "code": "def digits(n):\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        if int(ch) % 2 == 1:\n            has_odd = True\n            prod *= int(ch)\n    return 0 if not has_odd else prod\n\n\nprint(digits(2468))",
    "execution_output": 0
  },
  {
    "id": 633,
    "q_id": "HumanEval/131",
    "code": "def digits(n):\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        if int(ch) % 2 == 1:\n            has_odd = True\n            prod *= int(ch)\n    return 0 if not has_odd else prod\n\n\nprint(digits(182135))",
    "execution_output": 15
  },
  {
    "id": 634,
    "q_id": "HumanEval/131",
    "code": "def digits(n):\n\n    has_odd, prod = False, 1\n    for ch in str(n):\n        if int(ch) % 2 == 1:\n            has_odd = True\n            prod *= int(ch)\n    return 0 if not has_odd else prod\n\n\nprint(digits(44))",
    "execution_output": 0
  },
  {
    "id": 635,
    "q_id": "HumanEval/132",
    "code": "def is_nested(string):\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n\nprint(is_nested([]]]]]]][[[[[]))",
    "execution_output": false
  },
  {
    "id": 636,
    "q_id": "HumanEval/132",
    "code": "def is_nested(string):\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n\nprint(is_nested([][]))",
    "execution_output": false
  },
  {
    "id": 637,
    "q_id": "HumanEval/132",
    "code": "def is_nested(string):\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n\nprint(is_nested([[][]]))",
    "execution_output": true
  },
  {
    "id": 638,
    "q_id": "HumanEval/132",
    "code": "def is_nested(string):\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n\nprint(is_nested([[[]]]]))",
    "execution_output": true
  },
  {
    "id": 639,
    "q_id": "HumanEval/132",
    "code": "def is_nested(string):\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n\nprint(is_nested([[[[][]]]][]))",
    "execution_output": true
  },
  {
    "id": 640,
    "q_id": "HumanEval/133",
    "code": "def sum_squares(lst):\n    import math\n    return sum(map(lambda x: math.ceil(x) ** 2, lst))\n\n\nprint(sum_squares([1, 2, 3]))",
    "execution_output": 14
  },
  {
    "id": 641,
    "q_id": "HumanEval/133",
    "code": "def sum_squares(lst):\n    import math\n    return sum(map(lambda x: math.ceil(x) ** 2, lst))\n\n\nprint(sum_squares([1.0, 2, 3]))",
    "execution_output": 14
  },
  {
    "id": 642,
    "q_id": "HumanEval/133",
    "code": "def sum_squares(lst):\n    import math\n    return sum(map(lambda x: math.ceil(x) ** 2, lst))\n\n\nprint(sum_squares([1, 3, 5, 7]))",
    "execution_output": 84
  },
  {
    "id": 643,
    "q_id": "HumanEval/133",
    "code": "def sum_squares(lst):\n    import math\n    return sum(map(lambda x: math.ceil(x) ** 2, lst))\n\n\nprint(sum_squares([1.4, 4.2, 0]))",
    "execution_output": 29
  },
  {
    "id": 644,
    "q_id": "HumanEval/133",
    "code": "def sum_squares(lst):\n    import math\n    return sum(map(lambda x: math.ceil(x) ** 2, lst))\n\n\nprint(sum_squares([-2.4, 1, 1]))",
    "execution_output": 6
  },
  {
    "id": 645,
    "q_id": "HumanEval/134",
    "code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0: return False\n    if len(txt) == 1: return txt.isalpha()\n    return txt[-1].isalpha() and txt[-2] == \" \"\n\n\nprint(check_if_last_char_is_a_letter(apple pi e))",
    "execution_output": true
  },
  {
    "id": 646,
    "q_id": "HumanEval/134",
    "code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0: return False\n    if len(txt) == 1: return txt.isalpha()\n    return txt[-1].isalpha() and txt[-2] == \" \"\n\n\nprint(check_if_last_char_is_a_letter(Pumpkin pie 1))",
    "execution_output": false
  },
  {
    "id": 647,
    "q_id": "HumanEval/134",
    "code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0: return False\n    if len(txt) == 1: return txt.isalpha()\n    return txt[-1].isalpha() and txt[-2] == \" \"\n\n\nprint(check_if_last_char_is_a_letter(eeeee e ))",
    "execution_output": false
  },
  {
    "id": 648,
    "q_id": "HumanEval/134",
    "code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0: return False\n    if len(txt) == 1: return txt.isalpha()\n    return txt[-1].isalpha() and txt[-2] == \" \"\n\n\nprint(check_if_last_char_is_a_letter(Pumpkin e!))",
    "execution_output": false
  },
  {
    "id": 649,
    "q_id": "HumanEval/134",
    "code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0: return False\n    if len(txt) == 1: return txt.isalpha()\n    return txt[-1].isalpha() and txt[-2] == \" \"\n\n\nprint(check_if_last_char_is_a_letter(acceberrymuffinc!Pumpkin pie!cake?ake?))",
    "execution_output": false
  },
  {
    "id": 650,
    "q_id": "HumanEval/135",
    "code": "def can_arrange(arr):\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            return i\n    return -1\n\n\nprint(can_arrange([1, 2, 4, 3, 5]))",
    "execution_output": 3
  },
  {
    "id": 651,
    "q_id": "HumanEval/135",
    "code": "def can_arrange(arr):\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            return i\n    return -1\n\n\nprint(can_arrange([4, 8, 5, 7, 3]))",
    "execution_output": 4
  },
  {
    "id": 652,
    "q_id": "HumanEval/135",
    "code": "def can_arrange(arr):\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            return i\n    return -1\n\n\nprint(can_arrange([1, 2, 3, 4, 5]))",
    "execution_output": -1
  },
  {
    "id": 653,
    "q_id": "HumanEval/135",
    "code": "def can_arrange(arr):\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            return i\n    return -1\n\n\nprint(can_arrange([5, 4, 3, 2, 1]))",
    "execution_output": 4
  },
  {
    "id": 654,
    "q_id": "HumanEval/135",
    "code": "def can_arrange(arr):\n\n    for i in range(len(arr) - 1, 0, -1):\n        if not (arr[i] >= arr[i - 1]):\n            return i\n    return -1\n\n\nprint(can_arrange([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))",
    "execution_output": 9
  },
  {
    "id": 655,
    "q_id": "HumanEval/136",
    "code": "def largest_smallest_integers(lst):\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    return None if neg == [] else max(neg), None if pos == [] else min(pos)\n\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))",
    "execution_output": [
      null,
      1
    ]
  },
  {
    "id": 656,
    "q_id": "HumanEval/136",
    "code": "def largest_smallest_integers(lst):\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    return None if neg == [] else max(neg), None if pos == [] else min(pos)\n\n\nprint(largest_smallest_integers([0]))",
    "execution_output": [
      null,
      null
    ]
  },
  {
    "id": 657,
    "q_id": "HumanEval/136",
    "code": "def largest_smallest_integers(lst):\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    return None if neg == [] else max(neg), None if pos == [] else min(pos)\n\n\nprint(largest_smallest_integers([-6, -4, -4, -3, -100, 1]))",
    "execution_output": [
      -3,
      1
    ]
  },
  {
    "id": 658,
    "q_id": "HumanEval/136",
    "code": "def largest_smallest_integers(lst):\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    return None if neg == [] else max(neg), None if pos == [] else min(pos)\n\n\nprint(largest_smallest_integers([1, 1, 1, 1, 1, 1]))",
    "execution_output": [
      null,
      1
    ]
  },
  {
    "id": 659,
    "q_id": "HumanEval/136",
    "code": "def largest_smallest_integers(lst):\n    neg = list(filter(lambda x: x < 0, lst))\n    pos = list(filter(lambda x: x > 0, lst))\n    return None if neg == [] else max(neg), None if pos == [] else min(pos)\n\n\nprint(largest_smallest_integers([1, 3, -5, -7, 2, -4, 6]))",
    "execution_output": [
      -4,
      1
    ]
  },
  {
    "id": 660,
    "q_id": "HumanEval/137",
    "code": "def compare_one(a, b):\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n    if num_a == num_b:\n        return None\n    return a if num_a > num_b else b\n\n\nprint(compare_one(1,2.5))",
    "execution_output": 2.5
  },
  {
    "id": 661,
    "q_id": "HumanEval/137",
    "code": "def compare_one(a, b):\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n    if num_a == num_b:\n        return None\n    return a if num_a > num_b else b\n\n\nprint(compare_one(5,1,6))",
    "execution_output": "6"
  },
  {
    "id": 662,
    "q_id": "HumanEval/137",
    "code": "def compare_one(a, b):\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n    if num_a == num_b:\n        return None\n    return a if num_a > num_b else b\n\n\nprint(compare_one(3,3))",
    "execution_output": null
  },
  {
    "id": 663,
    "q_id": "HumanEval/137",
    "code": "def compare_one(a, b):\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n    if num_a == num_b:\n        return None\n    return a if num_a > num_b else b\n\n\nprint(compare_one(0,0))",
    "execution_output": null
  },
  {
    "id": 664,
    "q_id": "HumanEval/137",
    "code": "def compare_one(a, b):\n\n    num_a = float(str(a).replace(\",\", \".\"))\n    num_b = float(str(b).replace(\",\", \".\"))\n    if num_a == num_b:\n        return None\n    return a if num_a > num_b else b\n\n\nprint(compare_one(10,10.0))",
    "execution_output": null
  },
  {
    "id": 665,
    "q_id": "HumanEval/138",
    "code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0\n\n\nprint(is_equal_to_sum_even(4))",
    "execution_output": false
  },
  {
    "id": 666,
    "q_id": "HumanEval/138",
    "code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0\n\n\nprint(is_equal_to_sum_even(8))",
    "execution_output": true
  },
  {
    "id": 667,
    "q_id": "HumanEval/138",
    "code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0\n\n\nprint(is_equal_to_sum_even(13))",
    "execution_output": false
  },
  {
    "id": 668,
    "q_id": "HumanEval/138",
    "code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0\n\n\nprint(is_equal_to_sum_even(24))",
    "execution_output": true
  },
  {
    "id": 669,
    "q_id": "HumanEval/138",
    "code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0\n\n\nprint(is_equal_to_sum_even(39))",
    "execution_output": false
  },
  {
    "id": 670,
    "q_id": "HumanEval/140",
    "code": "def fix_spaces(text):\n    ans = text\n    for i in range(len(text), 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    return ans.replace(\" \", \"_\")\n\n\nprint(fix_spaces(Example))",
    "execution_output": "Example"
  },
  {
    "id": 671,
    "q_id": "HumanEval/140",
    "code": "def fix_spaces(text):\n    ans = text\n    for i in range(len(text), 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    return ans.replace(\" \", \"_\")\n\n\nprint(fix_spaces(Mudasir Hanif ))",
    "execution_output": "Mudasir_Hanif_"
  },
  {
    "id": 672,
    "q_id": "HumanEval/140",
    "code": "def fix_spaces(text):\n    ans = text\n    for i in range(len(text), 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    return ans.replace(\" \", \"_\")\n\n\nprint(fix_spaces(NoSpacesHere))",
    "execution_output": "NoSpacesHere"
  },
  {
    "id": 673,
    "q_id": "HumanEval/140",
    "code": "def fix_spaces(text):\n    ans = text\n    for i in range(len(text), 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    return ans.replace(\" \", \"_\")\n\n\nprint(fix_spaces(This is  a  test))",
    "execution_output": "This_is__a__test"
  },
  {
    "id": 674,
    "q_id": "HumanEval/140",
    "code": "def fix_spaces(text):\n    ans = text\n    for i in range(len(text), 2, -1):\n        ans = ans.replace(\" \" * i, \"-\")\n    return ans.replace(\" \", \"_\")\n\n\nprint(fix_spaces(Testing     1  2   3))",
    "execution_output": "Testing-1__2-3"
  },
  {
    "id": 675,
    "q_id": "HumanEval/141",
    "code": "def file_name_check(file_name):\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2: return \"No\"\n    if len(f_list[0]) == 0: return \"No\"\n    if not f_list[0][0].isalpha(): return \"No\"\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\"\n    return \"Yes\"\n\n\nprint(file_name_check(example.txt))",
    "execution_output": "Yes"
  },
  {
    "id": 676,
    "q_id": "HumanEval/141",
    "code": "def file_name_check(file_name):\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2: return \"No\"\n    if len(f_list[0]) == 0: return \"No\"\n    if not f_list[0][0].isalpha(): return \"No\"\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\"\n    return \"Yes\"\n\n\nprint(file_name_check(1example.dll))",
    "execution_output": "No"
  },
  {
    "id": 677,
    "q_id": "HumanEval/141",
    "code": "def file_name_check(file_name):\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2: return \"No\"\n    if len(f_list[0]) == 0: return \"No\"\n    if not f_list[0][0].isalpha(): return \"No\"\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\"\n    return \"Yes\"\n\n\nprint(file_name_check(His12FILE94.exe))",
    "execution_output": "No"
  },
  {
    "id": 678,
    "q_id": "HumanEval/141",
    "code": "def file_name_check(file_name):\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2: return \"No\"\n    if len(f_list[0]) == 0: return \"No\"\n    if not f_list[0][0].isalpha(): return \"No\"\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\"\n    return \"Yes\"\n\n\nprint(file_name_check(this_is_valid.txtexe))",
    "execution_output": "No"
  },
  {
    "id": 679,
    "q_id": "HumanEval/141",
    "code": "def file_name_check(file_name):\n    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:\n        return \"No\"\n    f_list = file_name.split(\".\")\n    if len(f_list) != 2: return \"No\"\n    if len(f_list[0]) == 0: return \"No\"\n    if not f_list[0][0].isalpha(): return \"No\"\n    if f_list[1] not in [\"txt\", \"exe\", \"dll\"]: return \"No\"\n    return \"Yes\"\n\n\nprint(file_name_check(.exalic1script.bate.123.txt))",
    "execution_output": "No"
  },
  {
    "id": 680,
    "q_id": "HumanEval/142",
    "code": "def sum_squares(lst):\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans\n\n\nprint(sum_squares([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))",
    "execution_output": 1674
  },
  {
    "id": 681,
    "q_id": "HumanEval/142",
    "code": "def sum_squares(lst):\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans\n\n\nprint(sum_squares([3, 6, 1, 7, 0, 8, -9, -3, 10, 11]))",
    "execution_output": 1272
  },
  {
    "id": 682,
    "q_id": "HumanEval/142",
    "code": "def sum_squares(lst):\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans\n\n\nprint(sum_squares([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))",
    "execution_output": 5817
  },
  {
    "id": 683,
    "q_id": "HumanEval/142",
    "code": "def sum_squares(lst):\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans\n\n\nprint(sum_squares([1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 20, -14]))",
    "execution_output": 1392
  },
  {
    "id": 684,
    "q_id": "HumanEval/142",
    "code": "def sum_squares(lst):\n    ans = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            ans += num ** 2\n        elif i % 4 == 0:\n            ans += num ** 3\n        else:\n            ans += num\n    return ans\n\n\nprint(sum_squares([1000000000, -1000000000, 2000000000, -2000000000, 3000000000, -3000000000]))",
    "execution_output": 27000000004999999998000000000
  },
  {
    "id": 685,
    "q_id": "HumanEval/143",
    "code": "def words_in_sentence(sentence):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n\nprint(words_in_sentence(This is a test))",
    "execution_output": "is"
  },
  {
    "id": 686,
    "q_id": "HumanEval/143",
    "code": "def words_in_sentence(sentence):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n\nprint(words_in_sentence(lets go for swimming))",
    "execution_output": "go for"
  },
  {
    "id": 687,
    "q_id": "HumanEval/143",
    "code": "def words_in_sentence(sentence):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n\nprint(words_in_sentence(there is no place available here))",
    "execution_output": "there is no place"
  },
  {
    "id": 688,
    "q_id": "HumanEval/143",
    "code": "def words_in_sentence(sentence):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n\nprint(words_in_sentence(Hi I am Hussein))",
    "execution_output": "Hi am Hussein"
  },
  {
    "id": 689,
    "q_id": "HumanEval/143",
    "code": "def words_in_sentence(sentence):\n\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return \" \".join(list(filter(lambda word: is_prime(len(word)), sentence.split(\" \"))))\n\n\nprint(words_in_sentence(go for it))",
    "execution_output": "go for it"
  },
  {
    "id": 690,
    "q_id": "HumanEval/144",
    "code": "def simplify(x, n):\n\n    x1, x2 = map(int, x.split(\"/\"))\n    n1, n2 = map(int, n.split(\"/\"))\n    return (x1 * n1) % (x2 * n2) == 0\n\n\nprint(simplify(1/5,5/1))",
    "execution_output": true
  },
  {
    "id": 691,
    "q_id": "HumanEval/144",
    "code": "def simplify(x, n):\n\n    x1, x2 = map(int, x.split(\"/\"))\n    n1, n2 = map(int, n.split(\"/\"))\n    return (x1 * n1) % (x2 * n2) == 0\n\n\nprint(simplify(1/6,2/1))",
    "execution_output": false
  },
  {
    "id": 692,
    "q_id": "HumanEval/144",
    "code": "def simplify(x, n):\n\n    x1, x2 = map(int, x.split(\"/\"))\n    n1, n2 = map(int, n.split(\"/\"))\n    return (x1 * n1) % (x2 * n2) == 0\n\n\nprint(simplify(7/10,10/2))",
    "execution_output": false
  },
  {
    "id": 693,
    "q_id": "HumanEval/144",
    "code": "def simplify(x, n):\n\n    x1, x2 = map(int, x.split(\"/\"))\n    n1, n2 = map(int, n.split(\"/\"))\n    return (x1 * n1) % (x2 * n2) == 0\n\n\nprint(simplify(7/2,4/2))",
    "execution_output": true
  },
  {
    "id": 694,
    "q_id": "HumanEval/144",
    "code": "def simplify(x, n):\n\n    x1, x2 = map(int, x.split(\"/\"))\n    n1, n2 = map(int, n.split(\"/\"))\n    return (x1 * n1) % (x2 * n2) == 0\n\n\nprint(simplify(11/6,6/1))",
    "execution_output": true
  },
  {
    "id": 695,
    "q_id": "HumanEval/145",
    "code": "def order_by_points(nums):\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)\n\n\nprint(order_by_points([1, 11, -1, -11, -12]))",
    "execution_output": [
      -1,
      -11,
      1,
      -12,
      11
    ]
  },
  {
    "id": 696,
    "q_id": "HumanEval/145",
    "code": "def order_by_points(nums):\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)\n\n\nprint(order_by_points([1, -11, -32, 43, 54, -98, 2, -3]))",
    "execution_output": [
      -3,
      -32,
      -98,
      -11,
      1,
      2,
      43,
      54
    ]
  },
  {
    "id": 697,
    "q_id": "HumanEval/145",
    "code": "def order_by_points(nums):\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)\n\n\nprint(order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))",
    "execution_output": [
      1,
      10,
      2,
      11,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ]
  },
  {
    "id": 698,
    "q_id": "HumanEval/145",
    "code": "def order_by_points(nums):\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)\n\n\nprint(order_by_points([0, 6, 6, -76, -21, 23, 4]))",
    "execution_output": [
      -76,
      -21,
      0,
      4,
      23,
      6,
      6
    ]
  },
  {
    "id": 699,
    "q_id": "HumanEval/145",
    "code": "def order_by_points(nums):\n    def weight(x):\n        x_list = list(str(x))\n        if x_list[0] == \"-\":\n            x_list = x_list[1:]\n            x_list = list(map(int, x_list))\n            x_list[0] = -x_list[0]\n        else:\n            x_list = list(map(int, x_list))\n        return sum(x_list)\n    return sorted(nums, key=weight)\n\n\nprint(order_by_points([1111, 2222, 3333, 4444]))",
    "execution_output": [
      1111,
      2222,
      3333,
      4444
    ]
  },
  {
    "id": 700,
    "q_id": "HumanEval/146",
    "code": "def specialFilter(nums):\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:\n            ans += 1\n    return ans\n\n\nprint(specialFilter([5, -2, 1, -5]))",
    "execution_output": 0
  },
  {
    "id": 701,
    "q_id": "HumanEval/146",
    "code": "def specialFilter(nums):\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:\n            ans += 1\n    return ans\n\n\nprint(specialFilter([15, -73, 14, -15]))",
    "execution_output": 1
  },
  {
    "id": 702,
    "q_id": "HumanEval/146",
    "code": "def specialFilter(nums):\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:\n            ans += 1\n    return ans\n\n\nprint(specialFilter([33, -2, -3, 45, 21, 109]))",
    "execution_output": 2
  },
  {
    "id": 703,
    "q_id": "HumanEval/146",
    "code": "def specialFilter(nums):\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:\n            ans += 1\n    return ans\n\n\nprint(specialFilter([43, -12, 93, 125, 121, 109]))",
    "execution_output": 4
  },
  {
    "id": 704,
    "q_id": "HumanEval/146",
    "code": "def specialFilter(nums):\n    ans, odd = 0, [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    for num in nums:\n        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:\n            ans += 1\n    return ans\n\n\nprint(specialFilter([71, -2, -33, 75, 21, 19]))",
    "execution_output": 3
  },
  {
    "id": 705,
    "q_id": "HumanEval/147",
    "code": "def get_max_triples(n):\n\n    if n <= 2: return False\n    one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3\n    zero_cnt = n - one_cnt\n    return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6\n\n\nprint(get_max_triples(5))",
    "execution_output": 1
  },
  {
    "id": 706,
    "q_id": "HumanEval/147",
    "code": "def get_max_triples(n):\n\n    if n <= 2: return False\n    one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3\n    zero_cnt = n - one_cnt\n    return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6\n\n\nprint(get_max_triples(6))",
    "execution_output": 4
  },
  {
    "id": 707,
    "q_id": "HumanEval/147",
    "code": "def get_max_triples(n):\n\n    if n <= 2: return False\n    one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3\n    zero_cnt = n - one_cnt\n    return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6\n\n\nprint(get_max_triples(2))",
    "execution_output": false
  },
  {
    "id": 708,
    "q_id": "HumanEval/147",
    "code": "def get_max_triples(n):\n\n    if n <= 2: return False\n    one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3\n    zero_cnt = n - one_cnt\n    return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6\n\n\nprint(get_max_triples(15))",
    "execution_output": 130
  },
  {
    "id": 709,
    "q_id": "HumanEval/147",
    "code": "def get_max_triples(n):\n\n    if n <= 2: return False\n    one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3\n    zero_cnt = n - one_cnt\n    return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6\n\n\nprint(get_max_triples(38))",
    "execution_output": 2586
  },
  {
    "id": 710,
    "q_id": "HumanEval/148",
    "code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2: i1, i2 = i2, i1\n    return tuple(planets[i1 + 1 : i2])\n\n\nprint(bf(Jupiter,Neptune))",
    "execution_output": [
      "Saturn",
      "Uranus"
    ]
  },
  {
    "id": 711,
    "q_id": "HumanEval/148",
    "code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2: i1, i2 = i2, i1\n    return tuple(planets[i1 + 1 : i2])\n\n\nprint(bf(Earth,Mercury))",
    "execution_output": [
      "Venus"
    ]
  },
  {
    "id": 712,
    "q_id": "HumanEval/148",
    "code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2: i1, i2 = i2, i1\n    return tuple(planets[i1 + 1 : i2])\n\n\nprint(bf(Jupiter,Makemake))",
    "execution_output": []
  },
  {
    "id": 713,
    "q_id": "HumanEval/148",
    "code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2: i1, i2 = i2, i1\n    return tuple(planets[i1 + 1 : i2])\n\n\nprint(bf(Neptune,Saturn))",
    "execution_output": [
      "Uranus"
    ]
  },
  {
    "id": 714,
    "q_id": "HumanEval/148",
    "code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets: return tuple()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2: i1, i2 = i2, i1\n    return tuple(planets[i1 + 1 : i2])\n\n\nprint(bf(Earth,Neptune))",
    "execution_output": [
      "Mars",
      "Jupiter",
      "Saturn",
      "Uranus"
    ]
  },
  {
    "id": 715,
    "q_id": "HumanEval/149",
    "code": "def sorted_list_sum(lst):\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n        if len(s) != len(t):\n            return len(s) - len(t)\n        return -1 if s < t else 1\n    return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))\n\n\nprint(sorted_list_sum(['aa', 'a', 'aaa']))",
    "execution_output": [
      "aa"
    ]
  },
  {
    "id": 716,
    "q_id": "HumanEval/149",
    "code": "def sorted_list_sum(lst):\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n        if len(s) != len(t):\n            return len(s) - len(t)\n        return -1 if s < t else 1\n    return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))\n\n\nprint(sorted_list_sum(['school', 'AI', 'asdf', 'b']))",
    "execution_output": [
      "AI",
      "asdf",
      "school"
    ]
  },
  {
    "id": 717,
    "q_id": "HumanEval/149",
    "code": "def sorted_list_sum(lst):\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n        if len(s) != len(t):\n            return len(s) - len(t)\n        return -1 if s < t else 1\n    return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))\n\n\nprint(sorted_list_sum(['d', 'b', 'c', 'a']))",
    "execution_output": []
  },
  {
    "id": 718,
    "q_id": "HumanEval/149",
    "code": "def sorted_list_sum(lst):\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n        if len(s) != len(t):\n            return len(s) - len(t)\n        return -1 if s < t else 1\n    return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))\n\n\nprint(sorted_list_sum(['d', 'dcba', 'abcd', 'a']))",
    "execution_output": [
      "abcd",
      "dcba"
    ]
  },
  {
    "id": 719,
    "q_id": "HumanEval/149",
    "code": "def sorted_list_sum(lst):\n    from functools import cmp_to_key\n    def cmp(s: str, t: str):\n        if len(s) != len(t):\n            return len(s) - len(t)\n        return -1 if s < t else 1\n    return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))\n\n\nprint(sorted_list_sum(['AI', 'ai', 'au']))",
    "execution_output": [
      "AI",
      "ai",
      "au"
    ]
  },
  {
    "id": 720,
    "q_id": "HumanEval/150",
    "code": "def x_or_y(n, x, y):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return x if is_prime(n) else y\n\n\nprint(x_or_y(7,34,12))",
    "execution_output": 34
  },
  {
    "id": 721,
    "q_id": "HumanEval/150",
    "code": "def x_or_y(n, x, y):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return x if is_prime(n) else y\n\n\nprint(x_or_y(15,8,5))",
    "execution_output": 5
  },
  {
    "id": 722,
    "q_id": "HumanEval/150",
    "code": "def x_or_y(n, x, y):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return x if is_prime(n) else y\n\n\nprint(x_or_y(3,33,5212))",
    "execution_output": 33
  },
  {
    "id": 723,
    "q_id": "HumanEval/150",
    "code": "def x_or_y(n, x, y):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return x if is_prime(n) else y\n\n\nprint(x_or_y(0,500,1000))",
    "execution_output": 1000
  },
  {
    "id": 724,
    "q_id": "HumanEval/150",
    "code": "def x_or_y(n, x, y):\n    def is_prime(a):\n        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))\n    return x if is_prime(n) else y\n\n\nprint(x_or_y(11,1,0))",
    "execution_output": 1
  },
  {
    "id": 725,
    "q_id": "HumanEval/151",
    "code": "def double_the_difference(lst):\n    ans = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and \".\" not in str(num):\n            ans += num ** 2\n    return ans\n\n\nprint(double_the_difference([0.1, 0.2, 0.3]))",
    "execution_output": 0
  },
  {
    "id": 726,
    "q_id": "HumanEval/151",
    "code": "def double_the_difference(lst):\n    ans = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and \".\" not in str(num):\n            ans += num ** 2\n    return ans\n\n\nprint(double_the_difference([-1, -2, 8]))",
    "execution_output": 0
  },
  {
    "id": 727,
    "q_id": "HumanEval/151",
    "code": "def double_the_difference(lst):\n    ans = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and \".\" not in str(num):\n            ans += num ** 2\n    return ans\n\n\nprint(double_the_difference([-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]))",
    "execution_output": 166650
  },
  {
    "id": 728,
    "q_id": "HumanEval/151",
    "code": "def double_the_difference(lst):\n    ans = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and \".\" not in str(num):\n            ans += num ** 2\n    return ans\n\n\nprint(double_the_difference([2, 4, 6]))",
    "execution_output": 0
  },
  {
    "id": 729,
    "q_id": "HumanEval/151",
    "code": "def double_the_difference(lst):\n    ans = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and \".\" not in str(num):\n            ans += num ** 2\n    return ans\n\n\nprint(double_the_difference([1, 5]))",
    "execution_output": 26
  },
  {
    "id": 730,
    "q_id": "HumanEval/152",
    "code": "def compare(game,guess):\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n\nprint(compare([1, 2, 3, 4, 5, 1],[1, 2, 3, 4, 2, -2]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      3,
      3
    ]
  },
  {
    "id": 731,
    "q_id": "HumanEval/152",
    "code": "def compare(game,guess):\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n\nprint(compare([0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 0]))",
    "execution_output": [
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  {
    "id": 732,
    "q_id": "HumanEval/152",
    "code": "def compare(game,guess):\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n\nprint(compare([1, 2, 3],[-1, -2, -3]))",
    "execution_output": [
      2,
      4,
      6
    ]
  },
  {
    "id": 733,
    "q_id": "HumanEval/152",
    "code": "def compare(game,guess):\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n\nprint(compare([1, 2, 3, 5],[-1, 2, 3, 4]))",
    "execution_output": [
      2,
      0,
      0,
      1
    ]
  },
  {
    "id": 734,
    "q_id": "HumanEval/152",
    "code": "def compare(game,guess):\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n\nprint(compare([1, 1, 1, 1, 1],[0, 0, 0, 0, 0]))",
    "execution_output": [
      1,
      1,
      1,
      1,
      1
    ]
  },
  {
    "id": 735,
    "q_id": "HumanEval/153",
    "code": "def Strongest_Extension(class_name, extensions):\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n\nprint(Strongest_Extension(Watashi,['tEN', 'niNE', 'eIGHt8OKe']))",
    "execution_output": "Watashi.eIGHt8OKe"
  },
  {
    "id": 736,
    "q_id": "HumanEval/153",
    "code": "def Strongest_Extension(class_name, extensions):\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n\nprint(Strongest_Extension(Boku123,['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']))",
    "execution_output": "Boku123.YEs.WeCaNe"
  },
  {
    "id": 737,
    "q_id": "HumanEval/153",
    "code": "def Strongest_Extension(class_name, extensions):\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n\nprint(Strongest_Extension(__YESIMHERE,['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']))",
    "execution_output": "__YESIMHERE.NuLl__"
  },
  {
    "id": 738,
    "q_id": "HumanEval/153",
    "code": "def Strongest_Extension(class_name, extensions):\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n\nprint(Strongest_Extension(K,['Ta', 'TAR', 't234An', 'cosSo']))",
    "execution_output": "K.TAR"
  },
  {
    "id": 739,
    "q_id": "HumanEval/153",
    "code": "def Strongest_Extension(class_name, extensions):\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n\nprint(Strongest_Extension(__HAHA,['Tab', '123', '781345', '-_-']))",
    "execution_output": "__HAHA.123"
  },
  {
    "id": 740,
    "q_id": "HumanEval/154",
    "code": "def cycpattern_check(a , b):\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n\nprint(cycpattern_check(xyzw,xyw))",
    "execution_output": false
  },
  {
    "id": 741,
    "q_id": "HumanEval/154",
    "code": "def cycpattern_check(a , b):\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n\nprint(cycpattern_check(abab,aabb))",
    "execution_output": false
  },
  {
    "id": 742,
    "q_id": "HumanEval/154",
    "code": "def cycpattern_check(a , b):\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n\nprint(cycpattern_check(winemtt,tinem))",
    "execution_output": true
  },
  {
    "id": 743,
    "q_id": "HumanEval/154",
    "code": "def cycpattern_check(a , b):\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n\nprint(cycpattern_check(hello,olelh))",
    "execution_output": false
  },
  {
    "id": 744,
    "q_id": "HumanEval/154",
    "code": "def cycpattern_check(a , b):\n    if a == b:\n        return True\n    if b == \"\":\n        return True\n    for i in range(0, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n\n\nprint(cycpattern_check(abcdefg,cde))",
    "execution_output": true
  },
  {
    "id": 745,
    "q_id": "HumanEval/155",
    "code": "def even_odd_count(num):\n    even, odd = 0, 0\n    for ch in str(num):\n        if ch in \"02468\": even += 1\n        if ch in \"13579\": odd += 1\n    return even, odd\n\n\nprint(even_odd_count(7))",
    "execution_output": [
      0,
      1
    ]
  },
  {
    "id": 746,
    "q_id": "HumanEval/155",
    "code": "def even_odd_count(num):\n    even, odd = 0, 0\n    for ch in str(num):\n        if ch in \"02468\": even += 1\n        if ch in \"13579\": odd += 1\n    return even, odd\n\n\nprint(even_odd_count(-78))",
    "execution_output": [
      1,
      1
    ]
  },
  {
    "id": 747,
    "q_id": "HumanEval/155",
    "code": "def even_odd_count(num):\n    even, odd = 0, 0\n    for ch in str(num):\n        if ch in \"02468\": even += 1\n        if ch in \"13579\": odd += 1\n    return even, odd\n\n\nprint(even_odd_count(3452))",
    "execution_output": [
      2,
      2
    ]
  },
  {
    "id": 748,
    "q_id": "HumanEval/155",
    "code": "def even_odd_count(num):\n    even, odd = 0, 0\n    for ch in str(num):\n        if ch in \"02468\": even += 1\n        if ch in \"13579\": odd += 1\n    return even, odd\n\n\nprint(even_odd_count(346211))",
    "execution_output": [
      3,
      3
    ]
  },
  {
    "id": 749,
    "q_id": "HumanEval/155",
    "code": "def even_odd_count(num):\n    even, odd = 0, 0\n    for ch in str(num):\n        if ch in \"02468\": even += 1\n        if ch in \"13579\": odd += 1\n    return even, odd\n\n\nprint(even_odd_count(-345821))",
    "execution_output": [
      3,
      3
    ]
  },
  {
    "id": 750,
    "q_id": "HumanEval/156",
    "code": "def int_to_mini_roman(number):\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    thousands = m[number // 1000]\n    hundreds = c[(number % 1000) // 100]\n    tens = x[(number % 100) // 10]\n    ones = i[number % 10]\n    return thousands + hundreds + tens + ones\n\n\nprint(int_to_mini_roman(19))",
    "execution_output": "xix"
  },
  {
    "id": 751,
    "q_id": "HumanEval/156",
    "code": "def int_to_mini_roman(number):\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    thousands = m[number // 1000]\n    hundreds = c[(number % 1000) // 100]\n    tens = x[(number % 100) // 10]\n    ones = i[number % 10]\n    return thousands + hundreds + tens + ones\n\n\nprint(int_to_mini_roman(152))",
    "execution_output": "clii"
  },
  {
    "id": 752,
    "q_id": "HumanEval/156",
    "code": "def int_to_mini_roman(number):\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    thousands = m[number // 1000]\n    hundreds = c[(number % 1000) // 100]\n    tens = x[(number % 100) // 10]\n    ones = i[number % 10]\n    return thousands + hundreds + tens + ones\n\n\nprint(int_to_mini_roman(4))",
    "execution_output": "iv"
  },
  {
    "id": 753,
    "q_id": "HumanEval/156",
    "code": "def int_to_mini_roman(number):\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    thousands = m[number // 1000]\n    hundreds = c[(number % 1000) // 100]\n    tens = x[(number % 100) // 10]\n    ones = i[number % 10]\n    return thousands + hundreds + tens + ones\n\n\nprint(int_to_mini_roman(900))",
    "execution_output": "cm"
  },
  {
    "id": 754,
    "q_id": "HumanEval/156",
    "code": "def int_to_mini_roman(number):\n\n    m = [\"\", \"m\"]\n    c = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    x = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    i = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    thousands = m[number // 1000]\n    hundreds = c[(number % 1000) // 100]\n    tens = x[(number % 100) // 10]\n    ones = i[number % 10]\n    return thousands + hundreds + tens + ones\n\n\nprint(int_to_mini_roman(1000))",
    "execution_output": "m"
  },
  {
    "id": 755,
    "q_id": "HumanEval/157",
    "code": "def right_angle_triangle(a, b, c):\n    \n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n\nprint(right_angle_triangle(3,4,5))",
    "execution_output": true
  },
  {
    "id": 756,
    "q_id": "HumanEval/157",
    "code": "def right_angle_triangle(a, b, c):\n    \n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n\nprint(right_angle_triangle(1,2,3))",
    "execution_output": false
  },
  {
    "id": 757,
    "q_id": "HumanEval/157",
    "code": "def right_angle_triangle(a, b, c):\n    \n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n\nprint(right_angle_triangle(19,19,19))",
    "execution_output": false
  },
  {
    "id": 758,
    "q_id": "HumanEval/157",
    "code": "def right_angle_triangle(a, b, c):\n    \n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n\nprint(right_angle_triangle(495,496,226))",
    "execution_output": false
  },
  {
    "id": 759,
    "q_id": "HumanEval/157",
    "code": "def right_angle_triangle(a, b, c):\n    \n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n\nprint(right_angle_triangle(9999,383,75))",
    "execution_output": false
  },
  {
    "id": 760,
    "q_id": "HumanEval/158",
    "code": "def find_max(words):\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word)) \n        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):\n            mx_ch_cnt, ans = ch_cnt, word\n    return ans\n\n\nprint(find_max(['name', 'of', 'string']))",
    "execution_output": "string"
  },
  {
    "id": 761,
    "q_id": "HumanEval/158",
    "code": "def find_max(words):\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word)) \n        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):\n            mx_ch_cnt, ans = ch_cnt, word\n    return ans\n\n\nprint(find_max(['aaaaaaa', 'bb', 'cc']))",
    "execution_output": "aaaaaaa"
  },
  {
    "id": 762,
    "q_id": "HumanEval/158",
    "code": "def find_max(words):\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word)) \n        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):\n            mx_ch_cnt, ans = ch_cnt, word\n    return ans\n\n\nprint(find_max(['play', 'this', 'game', 'of', 'footbott']))",
    "execution_output": "footbott"
  },
  {
    "id": 763,
    "q_id": "HumanEval/158",
    "code": "def find_max(words):\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word)) \n        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):\n            mx_ch_cnt, ans = ch_cnt, word\n    return ans\n\n\nprint(find_max(['abcdefg', 'hijklmnop', 'qrstuvwxyz']))",
    "execution_output": "qrstuvwxyz"
  },
  {
    "id": 764,
    "q_id": "HumanEval/158",
    "code": "def find_max(words):\n\n    mx_ch_cnt, ans = 0, \"\"\n    for word in words:\n        ch_cnt = len(set(word)) \n        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):\n            mx_ch_cnt, ans = ch_cnt, word\n    return ans\n\n\nprint(find_max(['aabbcc', 'dddeee', 'fff']))",
    "execution_output": "aabbcc"
  },
  {
    "id": 765,
    "q_id": "HumanEval/159",
    "code": "def eat(number, need, remaining):\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n\nprint(eat(5,6,10))",
    "execution_output": [
      11,
      4
    ]
  },
  {
    "id": 766,
    "q_id": "HumanEval/159",
    "code": "def eat(number, need, remaining):\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n\nprint(eat(4,8,9))",
    "execution_output": [
      12,
      1
    ]
  },
  {
    "id": 767,
    "q_id": "HumanEval/159",
    "code": "def eat(number, need, remaining):\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n\nprint(eat(1,10,10))",
    "execution_output": [
      11,
      0
    ]
  },
  {
    "id": 768,
    "q_id": "HumanEval/159",
    "code": "def eat(number, need, remaining):\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n\nprint(eat(2,11,5))",
    "execution_output": [
      7,
      0
    ]
  },
  {
    "id": 769,
    "q_id": "HumanEval/159",
    "code": "def eat(number, need, remaining):\n\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n\nprint(eat(4,5,7))",
    "execution_output": [
      9,
      2
    ]
  },
  {
    "id": 770,
    "q_id": "HumanEval/160",
    "code": "def do_algebra(operator, operand):\n\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)\n\n\nprint(do_algebra(['**', '*', '+'],[2, 3, 4, 5]))",
    "execution_output": 37
  },
  {
    "id": 771,
    "q_id": "HumanEval/160",
    "code": "def do_algebra(operator, operand):\n\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)\n\n\nprint(do_algebra(['+', '*', '-'],[2, 3, 4, 5]))",
    "execution_output": 9
  },
  {
    "id": 772,
    "q_id": "HumanEval/160",
    "code": "def do_algebra(operator, operand):\n\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)\n\n\nprint(do_algebra(['//', '*'],[7, 3, 4]))",
    "execution_output": 8
  },
  {
    "id": 773,
    "q_id": "HumanEval/160",
    "code": "def do_algebra(operator, operand):\n\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)\n\n\nprint(do_algebra(['+', '-', '*', '//'],[5, 2, 3, 4, 7]))",
    "execution_output": 6
  },
  {
    "id": 774,
    "q_id": "HumanEval/160",
    "code": "def do_algebra(operator, operand):\n\n    exp = \"\"\n    for i in range(len(operator)):\n        exp += str(operand[i]) + operator[i]\n    exp += str(operand[-1])\n    return eval(exp)\n\n\nprint(do_algebra(['**', '-', '//'],[9, 2, 5, 3]))",
    "execution_output": 80
  },
  {
    "id": 775,
    "q_id": "HumanEval/161",
    "code": "def solve(s):\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n\n\nprint(solve(1234))",
    "execution_output": "4321"
  },
  {
    "id": 776,
    "q_id": "HumanEval/161",
    "code": "def solve(s):\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n\n\nprint(solve(#6@2))",
    "execution_output": "2@6#"
  },
  {
    "id": 777,
    "q_id": "HumanEval/161",
    "code": "def solve(s):\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n\n\nprint(solve(ABCDEFG))",
    "execution_output": "abcdefg"
  },
  {
    "id": 778,
    "q_id": "HumanEval/161",
    "code": "def solve(s):\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n\n\nprint(solve(tH1s Is A t3sT!))",
    "execution_output": "Th1S iS a T3St!"
  },
  {
    "id": 779,
    "q_id": "HumanEval/161",
    "code": "def solve(s):\n    ans, has_letter = \"\", False\n    for ch in s:\n        if ch.isalpha():\n            has_letter = True\n            ans += ch.swapcase()\n        else:\n            ans += ch\n    return ans if has_letter else s[::-1]\n\n\nprint(solve(!!!!!1234!!!!!!!1234!!!!))",
    "execution_output": "!!!!4321!!!!!!!4321!!!!!"
  },
  {
    "id": 780,
    "q_id": "HumanEval/162",
    "code": "def string_to_md5(text):\n    if text == \"\": return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    return m.hexdigest()\n\n\nprint(string_to_md5(Hello world))",
    "execution_output": "3e25960a79dbc69b674cd4ec67a72c62"
  },
  {
    "id": 781,
    "q_id": "HumanEval/162",
    "code": "def string_to_md5(text):\n    if text == \"\": return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    return m.hexdigest()\n\n\nprint(string_to_md5(A B C))",
    "execution_output": "0ef78513b0cb8cef12743f5aeb35f888"
  },
  {
    "id": 782,
    "q_id": "HumanEval/162",
    "code": "def string_to_md5(text):\n    if text == \"\": return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    return m.hexdigest()\n\n\nprint(string_to_md5(password))",
    "execution_output": "5f4dcc3b5aa765d61d8327deb882cf99"
  },
  {
    "id": 783,
    "q_id": "HumanEval/162",
    "code": "def string_to_md5(text):\n    if text == \"\": return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    return m.hexdigest()\n\n\nprint(string_to_md5(5873hajsdklh))",
    "execution_output": "0dbb501bb9d84c751d2cf6394d9308c0"
  },
  {
    "id": 784,
    "q_id": "HumanEval/162",
    "code": "def string_to_md5(text):\n    if text == \"\": return None\n    import hashlib\n    m = hashlib.md5()\n    m.update(text.encode(\"utf-8\"))\n    return m.hexdigest()\n\n\nprint(string_to_md5(\n\t   ))",
    "execution_output": "0b7d028299b34a3eca02793c59da5e21"
  },
  {
    "id": 785,
    "q_id": "HumanEval/163",
    "code": "def generate_integers(a, b):\n\n    if a > b: a, b = b, a\n    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]\n\n\nprint(generate_integers(2,10))",
    "execution_output": [
      2,
      4,
      6,
      8
    ]
  },
  {
    "id": 786,
    "q_id": "HumanEval/163",
    "code": "def generate_integers(a, b):\n\n    if a > b: a, b = b, a\n    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]\n\n\nprint(generate_integers(10,2))",
    "execution_output": [
      2,
      4,
      6,
      8
    ]
  },
  {
    "id": 787,
    "q_id": "HumanEval/163",
    "code": "def generate_integers(a, b):\n\n    if a > b: a, b = b, a\n    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]\n\n\nprint(generate_integers(201,299))",
    "execution_output": []
  },
  {
    "id": 788,
    "q_id": "HumanEval/163",
    "code": "def generate_integers(a, b):\n\n    if a > b: a, b = b, a\n    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]\n\n\nprint(generate_integers(5,5))",
    "execution_output": []
  },
  {
    "id": 789,
    "q_id": "HumanEval/163",
    "code": "def generate_integers(a, b):\n\n    if a > b: a, b = b, a\n    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]\n\n\nprint(generate_integers(198,34))",
    "execution_output": []
  }
]